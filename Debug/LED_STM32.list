
LED_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c38c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f98  0800c448  0800c448  0000d448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3e0  0800d3e0  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800d3e0  0800d3e0  0000f1d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800d3e0  0800d3e0  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3e0  0800d3e0  0000e3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3e4  0800d3e4  0000e3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d3e8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd4  200001d8  0800d5c0  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dac  0800d5c0  0000fdac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000515dd  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d3c  00000000  00000000  000607dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003d10  00000000  00000000  00064520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002e18  00000000  00000000  00068230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191ea  00000000  00000000  0006b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002133b  00000000  00000000  00084232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acb70  00000000  00000000  000a556d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001520dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ff44  00000000  00000000  00152120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00162064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d8 	.word	0x200001d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c430 	.word	0x0800c430

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001dc 	.word	0x200001dc
 8000100:	0800c430 	.word	0x0800c430

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f002 f80b 	bl	8002454 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 ff4f 	bl	80022ec <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fffd 	bl	8002454 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fff3 	bl	8002454 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 ff79 	bl	8002374 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ff6f 	bl	8002374 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fbc9 	bl	8000c44 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb51 	bl	8000b64 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fbbb 	bl	8000c44 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fbb1 	bl	8000c44 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb5f 	bl	8000bb4 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fb55 	bl	8000bb4 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_d2uiz>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	2200      	movs	r2, #0
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <__aeabi_d2uiz+0x38>)
 800051e:	0004      	movs	r4, r0
 8000520:	000d      	movs	r5, r1
 8000522:	f7ff ffb5 	bl	8000490 <__aeabi_dcmpge>
 8000526:	2800      	cmp	r0, #0
 8000528:	d104      	bne.n	8000534 <__aeabi_d2uiz+0x1c>
 800052a:	0020      	movs	r0, r4
 800052c:	0029      	movs	r1, r5
 800052e:	f002 ff11 	bl	8003354 <__aeabi_d2iz>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <__aeabi_d2uiz+0x38>)
 8000536:	2200      	movs	r2, #0
 8000538:	0020      	movs	r0, r4
 800053a:	0029      	movs	r1, r5
 800053c:	f002 fade 	bl	8002afc <__aeabi_dsub>
 8000540:	f002 ff08 	bl	8003354 <__aeabi_d2iz>
 8000544:	2380      	movs	r3, #128	@ 0x80
 8000546:	061b      	lsls	r3, r3, #24
 8000548:	469c      	mov	ip, r3
 800054a:	4460      	add	r0, ip
 800054c:	e7f1      	b.n	8000532 <__aeabi_d2uiz+0x1a>
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	41e00000 	.word	0x41e00000

08000554 <__aeabi_fadd>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	024b      	lsls	r3, r1, #9
 8000558:	0a5a      	lsrs	r2, r3, #9
 800055a:	4694      	mov	ip, r2
 800055c:	004a      	lsls	r2, r1, #1
 800055e:	0fc9      	lsrs	r1, r1, #31
 8000560:	46ce      	mov	lr, r9
 8000562:	4647      	mov	r7, r8
 8000564:	4689      	mov	r9, r1
 8000566:	0045      	lsls	r5, r0, #1
 8000568:	0246      	lsls	r6, r0, #9
 800056a:	0e2d      	lsrs	r5, r5, #24
 800056c:	0e12      	lsrs	r2, r2, #24
 800056e:	b580      	push	{r7, lr}
 8000570:	0999      	lsrs	r1, r3, #6
 8000572:	0a77      	lsrs	r7, r6, #9
 8000574:	0fc4      	lsrs	r4, r0, #31
 8000576:	09b6      	lsrs	r6, r6, #6
 8000578:	1aab      	subs	r3, r5, r2
 800057a:	454c      	cmp	r4, r9
 800057c:	d020      	beq.n	80005c0 <__aeabi_fadd+0x6c>
 800057e:	2b00      	cmp	r3, #0
 8000580:	dd0c      	ble.n	800059c <__aeabi_fadd+0x48>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d134      	bne.n	80005f0 <__aeabi_fadd+0x9c>
 8000586:	2900      	cmp	r1, #0
 8000588:	d02a      	beq.n	80005e0 <__aeabi_fadd+0x8c>
 800058a:	1e5a      	subs	r2, r3, #1
 800058c:	2b01      	cmp	r3, #1
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x3e>
 8000590:	e08f      	b.n	80006b2 <__aeabi_fadd+0x15e>
 8000592:	2bff      	cmp	r3, #255	@ 0xff
 8000594:	d100      	bne.n	8000598 <__aeabi_fadd+0x44>
 8000596:	e0cd      	b.n	8000734 <__aeabi_fadd+0x1e0>
 8000598:	0013      	movs	r3, r2
 800059a:	e02f      	b.n	80005fc <__aeabi_fadd+0xa8>
 800059c:	2b00      	cmp	r3, #0
 800059e:	d060      	beq.n	8000662 <__aeabi_fadd+0x10e>
 80005a0:	1b53      	subs	r3, r2, r5
 80005a2:	2d00      	cmp	r5, #0
 80005a4:	d000      	beq.n	80005a8 <__aeabi_fadd+0x54>
 80005a6:	e0ee      	b.n	8000786 <__aeabi_fadd+0x232>
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x5a>
 80005ac:	e13e      	b.n	800082c <__aeabi_fadd+0x2d8>
 80005ae:	1e5c      	subs	r4, r3, #1
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0x62>
 80005b4:	e16b      	b.n	800088e <__aeabi_fadd+0x33a>
 80005b6:	2bff      	cmp	r3, #255	@ 0xff
 80005b8:	d100      	bne.n	80005bc <__aeabi_fadd+0x68>
 80005ba:	e0b9      	b.n	8000730 <__aeabi_fadd+0x1dc>
 80005bc:	0023      	movs	r3, r4
 80005be:	e0e7      	b.n	8000790 <__aeabi_fadd+0x23c>
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dc00      	bgt.n	80005c6 <__aeabi_fadd+0x72>
 80005c4:	e0a4      	b.n	8000710 <__aeabi_fadd+0x1bc>
 80005c6:	2a00      	cmp	r2, #0
 80005c8:	d069      	beq.n	800069e <__aeabi_fadd+0x14a>
 80005ca:	2dff      	cmp	r5, #255	@ 0xff
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fadd+0x7c>
 80005ce:	e0b1      	b.n	8000734 <__aeabi_fadd+0x1e0>
 80005d0:	2280      	movs	r2, #128	@ 0x80
 80005d2:	04d2      	lsls	r2, r2, #19
 80005d4:	4311      	orrs	r1, r2
 80005d6:	2b1b      	cmp	r3, #27
 80005d8:	dc00      	bgt.n	80005dc <__aeabi_fadd+0x88>
 80005da:	e0e9      	b.n	80007b0 <__aeabi_fadd+0x25c>
 80005dc:	002b      	movs	r3, r5
 80005de:	3605      	adds	r6, #5
 80005e0:	08f7      	lsrs	r7, r6, #3
 80005e2:	2bff      	cmp	r3, #255	@ 0xff
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x94>
 80005e6:	e0a5      	b.n	8000734 <__aeabi_fadd+0x1e0>
 80005e8:	027a      	lsls	r2, r7, #9
 80005ea:	0a52      	lsrs	r2, r2, #9
 80005ec:	b2d8      	uxtb	r0, r3
 80005ee:	e030      	b.n	8000652 <__aeabi_fadd+0xfe>
 80005f0:	2dff      	cmp	r5, #255	@ 0xff
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fadd+0xa2>
 80005f4:	e09e      	b.n	8000734 <__aeabi_fadd+0x1e0>
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	04d2      	lsls	r2, r2, #19
 80005fa:	4311      	orrs	r1, r2
 80005fc:	2001      	movs	r0, #1
 80005fe:	2b1b      	cmp	r3, #27
 8000600:	dc08      	bgt.n	8000614 <__aeabi_fadd+0xc0>
 8000602:	0008      	movs	r0, r1
 8000604:	2220      	movs	r2, #32
 8000606:	40d8      	lsrs	r0, r3
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	4099      	lsls	r1, r3
 800060c:	000b      	movs	r3, r1
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	4193      	sbcs	r3, r2
 8000612:	4318      	orrs	r0, r3
 8000614:	1a36      	subs	r6, r6, r0
 8000616:	0173      	lsls	r3, r6, #5
 8000618:	d400      	bmi.n	800061c <__aeabi_fadd+0xc8>
 800061a:	e071      	b.n	8000700 <__aeabi_fadd+0x1ac>
 800061c:	01b6      	lsls	r6, r6, #6
 800061e:	09b7      	lsrs	r7, r6, #6
 8000620:	0038      	movs	r0, r7
 8000622:	f002 ff6d 	bl	8003500 <__clzsi2>
 8000626:	003b      	movs	r3, r7
 8000628:	3805      	subs	r0, #5
 800062a:	4083      	lsls	r3, r0
 800062c:	4285      	cmp	r5, r0
 800062e:	dd4d      	ble.n	80006cc <__aeabi_fadd+0x178>
 8000630:	4eb4      	ldr	r6, [pc, #720]	@ (8000904 <__aeabi_fadd+0x3b0>)
 8000632:	1a2d      	subs	r5, r5, r0
 8000634:	401e      	ands	r6, r3
 8000636:	075a      	lsls	r2, r3, #29
 8000638:	d068      	beq.n	800070c <__aeabi_fadd+0x1b8>
 800063a:	220f      	movs	r2, #15
 800063c:	4013      	ands	r3, r2
 800063e:	2b04      	cmp	r3, #4
 8000640:	d064      	beq.n	800070c <__aeabi_fadd+0x1b8>
 8000642:	3604      	adds	r6, #4
 8000644:	0173      	lsls	r3, r6, #5
 8000646:	d561      	bpl.n	800070c <__aeabi_fadd+0x1b8>
 8000648:	1c68      	adds	r0, r5, #1
 800064a:	2dfe      	cmp	r5, #254	@ 0xfe
 800064c:	d154      	bne.n	80006f8 <__aeabi_fadd+0x1a4>
 800064e:	20ff      	movs	r0, #255	@ 0xff
 8000650:	2200      	movs	r2, #0
 8000652:	05c0      	lsls	r0, r0, #23
 8000654:	4310      	orrs	r0, r2
 8000656:	07e4      	lsls	r4, r4, #31
 8000658:	4320      	orrs	r0, r4
 800065a:	bcc0      	pop	{r6, r7}
 800065c:	46b9      	mov	r9, r7
 800065e:	46b0      	mov	r8, r6
 8000660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000662:	22fe      	movs	r2, #254	@ 0xfe
 8000664:	4690      	mov	r8, r2
 8000666:	1c68      	adds	r0, r5, #1
 8000668:	0002      	movs	r2, r0
 800066a:	4640      	mov	r0, r8
 800066c:	4210      	tst	r0, r2
 800066e:	d16b      	bne.n	8000748 <__aeabi_fadd+0x1f4>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d000      	beq.n	8000676 <__aeabi_fadd+0x122>
 8000674:	e0dd      	b.n	8000832 <__aeabi_fadd+0x2de>
 8000676:	2e00      	cmp	r6, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x128>
 800067a:	e102      	b.n	8000882 <__aeabi_fadd+0x32e>
 800067c:	2900      	cmp	r1, #0
 800067e:	d0b3      	beq.n	80005e8 <__aeabi_fadd+0x94>
 8000680:	2280      	movs	r2, #128	@ 0x80
 8000682:	1a77      	subs	r7, r6, r1
 8000684:	04d2      	lsls	r2, r2, #19
 8000686:	4217      	tst	r7, r2
 8000688:	d100      	bne.n	800068c <__aeabi_fadd+0x138>
 800068a:	e136      	b.n	80008fa <__aeabi_fadd+0x3a6>
 800068c:	464c      	mov	r4, r9
 800068e:	1b8e      	subs	r6, r1, r6
 8000690:	d061      	beq.n	8000756 <__aeabi_fadd+0x202>
 8000692:	2001      	movs	r0, #1
 8000694:	4216      	tst	r6, r2
 8000696:	d130      	bne.n	80006fa <__aeabi_fadd+0x1a6>
 8000698:	2300      	movs	r3, #0
 800069a:	08f7      	lsrs	r7, r6, #3
 800069c:	e7a4      	b.n	80005e8 <__aeabi_fadd+0x94>
 800069e:	2900      	cmp	r1, #0
 80006a0:	d09e      	beq.n	80005e0 <__aeabi_fadd+0x8c>
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d100      	bne.n	80006aa <__aeabi_fadd+0x156>
 80006a8:	e0ca      	b.n	8000840 <__aeabi_fadd+0x2ec>
 80006aa:	2bff      	cmp	r3, #255	@ 0xff
 80006ac:	d042      	beq.n	8000734 <__aeabi_fadd+0x1e0>
 80006ae:	0013      	movs	r3, r2
 80006b0:	e791      	b.n	80005d6 <__aeabi_fadd+0x82>
 80006b2:	1a71      	subs	r1, r6, r1
 80006b4:	014b      	lsls	r3, r1, #5
 80006b6:	d400      	bmi.n	80006ba <__aeabi_fadd+0x166>
 80006b8:	e0d1      	b.n	800085e <__aeabi_fadd+0x30a>
 80006ba:	018f      	lsls	r7, r1, #6
 80006bc:	09bf      	lsrs	r7, r7, #6
 80006be:	0038      	movs	r0, r7
 80006c0:	f002 ff1e 	bl	8003500 <__clzsi2>
 80006c4:	003b      	movs	r3, r7
 80006c6:	3805      	subs	r0, #5
 80006c8:	4083      	lsls	r3, r0
 80006ca:	2501      	movs	r5, #1
 80006cc:	2220      	movs	r2, #32
 80006ce:	1b40      	subs	r0, r0, r5
 80006d0:	3001      	adds	r0, #1
 80006d2:	1a12      	subs	r2, r2, r0
 80006d4:	001e      	movs	r6, r3
 80006d6:	4093      	lsls	r3, r2
 80006d8:	40c6      	lsrs	r6, r0
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	4193      	sbcs	r3, r2
 80006de:	431e      	orrs	r6, r3
 80006e0:	d039      	beq.n	8000756 <__aeabi_fadd+0x202>
 80006e2:	0773      	lsls	r3, r6, #29
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fadd+0x194>
 80006e6:	e11b      	b.n	8000920 <__aeabi_fadd+0x3cc>
 80006e8:	230f      	movs	r3, #15
 80006ea:	2500      	movs	r5, #0
 80006ec:	4033      	ands	r3, r6
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d1a7      	bne.n	8000642 <__aeabi_fadd+0xee>
 80006f2:	2001      	movs	r0, #1
 80006f4:	0172      	lsls	r2, r6, #5
 80006f6:	d57c      	bpl.n	80007f2 <__aeabi_fadd+0x29e>
 80006f8:	b2c0      	uxtb	r0, r0
 80006fa:	01b2      	lsls	r2, r6, #6
 80006fc:	0a52      	lsrs	r2, r2, #9
 80006fe:	e7a8      	b.n	8000652 <__aeabi_fadd+0xfe>
 8000700:	0773      	lsls	r3, r6, #29
 8000702:	d003      	beq.n	800070c <__aeabi_fadd+0x1b8>
 8000704:	230f      	movs	r3, #15
 8000706:	4033      	ands	r3, r6
 8000708:	2b04      	cmp	r3, #4
 800070a:	d19a      	bne.n	8000642 <__aeabi_fadd+0xee>
 800070c:	002b      	movs	r3, r5
 800070e:	e767      	b.n	80005e0 <__aeabi_fadd+0x8c>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d023      	beq.n	800075c <__aeabi_fadd+0x208>
 8000714:	1b53      	subs	r3, r2, r5
 8000716:	2d00      	cmp	r5, #0
 8000718:	d17b      	bne.n	8000812 <__aeabi_fadd+0x2be>
 800071a:	2e00      	cmp	r6, #0
 800071c:	d100      	bne.n	8000720 <__aeabi_fadd+0x1cc>
 800071e:	e086      	b.n	800082e <__aeabi_fadd+0x2da>
 8000720:	1e5d      	subs	r5, r3, #1
 8000722:	2b01      	cmp	r3, #1
 8000724:	d100      	bne.n	8000728 <__aeabi_fadd+0x1d4>
 8000726:	e08b      	b.n	8000840 <__aeabi_fadd+0x2ec>
 8000728:	2bff      	cmp	r3, #255	@ 0xff
 800072a:	d002      	beq.n	8000732 <__aeabi_fadd+0x1de>
 800072c:	002b      	movs	r3, r5
 800072e:	e075      	b.n	800081c <__aeabi_fadd+0x2c8>
 8000730:	464c      	mov	r4, r9
 8000732:	4667      	mov	r7, ip
 8000734:	2f00      	cmp	r7, #0
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x1e6>
 8000738:	e789      	b.n	800064e <__aeabi_fadd+0xfa>
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	03d2      	lsls	r2, r2, #15
 800073e:	433a      	orrs	r2, r7
 8000740:	0252      	lsls	r2, r2, #9
 8000742:	20ff      	movs	r0, #255	@ 0xff
 8000744:	0a52      	lsrs	r2, r2, #9
 8000746:	e784      	b.n	8000652 <__aeabi_fadd+0xfe>
 8000748:	1a77      	subs	r7, r6, r1
 800074a:	017b      	lsls	r3, r7, #5
 800074c:	d46b      	bmi.n	8000826 <__aeabi_fadd+0x2d2>
 800074e:	2f00      	cmp	r7, #0
 8000750:	d000      	beq.n	8000754 <__aeabi_fadd+0x200>
 8000752:	e765      	b.n	8000620 <__aeabi_fadd+0xcc>
 8000754:	2400      	movs	r4, #0
 8000756:	2000      	movs	r0, #0
 8000758:	2200      	movs	r2, #0
 800075a:	e77a      	b.n	8000652 <__aeabi_fadd+0xfe>
 800075c:	22fe      	movs	r2, #254	@ 0xfe
 800075e:	1c6b      	adds	r3, r5, #1
 8000760:	421a      	tst	r2, r3
 8000762:	d149      	bne.n	80007f8 <__aeabi_fadd+0x2a4>
 8000764:	2d00      	cmp	r5, #0
 8000766:	d000      	beq.n	800076a <__aeabi_fadd+0x216>
 8000768:	e09f      	b.n	80008aa <__aeabi_fadd+0x356>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x21c>
 800076e:	e0ba      	b.n	80008e6 <__aeabi_fadd+0x392>
 8000770:	2900      	cmp	r1, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0x222>
 8000774:	e0cf      	b.n	8000916 <__aeabi_fadd+0x3c2>
 8000776:	1872      	adds	r2, r6, r1
 8000778:	0153      	lsls	r3, r2, #5
 800077a:	d400      	bmi.n	800077e <__aeabi_fadd+0x22a>
 800077c:	e0cd      	b.n	800091a <__aeabi_fadd+0x3c6>
 800077e:	0192      	lsls	r2, r2, #6
 8000780:	2001      	movs	r0, #1
 8000782:	0a52      	lsrs	r2, r2, #9
 8000784:	e765      	b.n	8000652 <__aeabi_fadd+0xfe>
 8000786:	2aff      	cmp	r2, #255	@ 0xff
 8000788:	d0d2      	beq.n	8000730 <__aeabi_fadd+0x1dc>
 800078a:	2080      	movs	r0, #128	@ 0x80
 800078c:	04c0      	lsls	r0, r0, #19
 800078e:	4306      	orrs	r6, r0
 8000790:	2001      	movs	r0, #1
 8000792:	2b1b      	cmp	r3, #27
 8000794:	dc08      	bgt.n	80007a8 <__aeabi_fadd+0x254>
 8000796:	0030      	movs	r0, r6
 8000798:	2420      	movs	r4, #32
 800079a:	40d8      	lsrs	r0, r3
 800079c:	1ae3      	subs	r3, r4, r3
 800079e:	409e      	lsls	r6, r3
 80007a0:	0033      	movs	r3, r6
 80007a2:	1e5c      	subs	r4, r3, #1
 80007a4:	41a3      	sbcs	r3, r4
 80007a6:	4318      	orrs	r0, r3
 80007a8:	464c      	mov	r4, r9
 80007aa:	0015      	movs	r5, r2
 80007ac:	1a0e      	subs	r6, r1, r0
 80007ae:	e732      	b.n	8000616 <__aeabi_fadd+0xc2>
 80007b0:	0008      	movs	r0, r1
 80007b2:	2220      	movs	r2, #32
 80007b4:	40d8      	lsrs	r0, r3
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	4099      	lsls	r1, r3
 80007ba:	000b      	movs	r3, r1
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	4193      	sbcs	r3, r2
 80007c0:	4303      	orrs	r3, r0
 80007c2:	18f6      	adds	r6, r6, r3
 80007c4:	0173      	lsls	r3, r6, #5
 80007c6:	d59b      	bpl.n	8000700 <__aeabi_fadd+0x1ac>
 80007c8:	3501      	adds	r5, #1
 80007ca:	2dff      	cmp	r5, #255	@ 0xff
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x27c>
 80007ce:	e73e      	b.n	800064e <__aeabi_fadd+0xfa>
 80007d0:	2301      	movs	r3, #1
 80007d2:	494d      	ldr	r1, [pc, #308]	@ (8000908 <__aeabi_fadd+0x3b4>)
 80007d4:	0872      	lsrs	r2, r6, #1
 80007d6:	4033      	ands	r3, r6
 80007d8:	400a      	ands	r2, r1
 80007da:	431a      	orrs	r2, r3
 80007dc:	0016      	movs	r6, r2
 80007de:	0753      	lsls	r3, r2, #29
 80007e0:	d004      	beq.n	80007ec <__aeabi_fadd+0x298>
 80007e2:	230f      	movs	r3, #15
 80007e4:	4013      	ands	r3, r2
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d000      	beq.n	80007ec <__aeabi_fadd+0x298>
 80007ea:	e72a      	b.n	8000642 <__aeabi_fadd+0xee>
 80007ec:	0173      	lsls	r3, r6, #5
 80007ee:	d500      	bpl.n	80007f2 <__aeabi_fadd+0x29e>
 80007f0:	e72a      	b.n	8000648 <__aeabi_fadd+0xf4>
 80007f2:	002b      	movs	r3, r5
 80007f4:	08f7      	lsrs	r7, r6, #3
 80007f6:	e6f7      	b.n	80005e8 <__aeabi_fadd+0x94>
 80007f8:	2bff      	cmp	r3, #255	@ 0xff
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2aa>
 80007fc:	e727      	b.n	800064e <__aeabi_fadd+0xfa>
 80007fe:	1871      	adds	r1, r6, r1
 8000800:	0849      	lsrs	r1, r1, #1
 8000802:	074a      	lsls	r2, r1, #29
 8000804:	d02f      	beq.n	8000866 <__aeabi_fadd+0x312>
 8000806:	220f      	movs	r2, #15
 8000808:	400a      	ands	r2, r1
 800080a:	2a04      	cmp	r2, #4
 800080c:	d02b      	beq.n	8000866 <__aeabi_fadd+0x312>
 800080e:	1d0e      	adds	r6, r1, #4
 8000810:	e6e6      	b.n	80005e0 <__aeabi_fadd+0x8c>
 8000812:	2aff      	cmp	r2, #255	@ 0xff
 8000814:	d08d      	beq.n	8000732 <__aeabi_fadd+0x1de>
 8000816:	2080      	movs	r0, #128	@ 0x80
 8000818:	04c0      	lsls	r0, r0, #19
 800081a:	4306      	orrs	r6, r0
 800081c:	2b1b      	cmp	r3, #27
 800081e:	dd24      	ble.n	800086a <__aeabi_fadd+0x316>
 8000820:	0013      	movs	r3, r2
 8000822:	1d4e      	adds	r6, r1, #5
 8000824:	e6dc      	b.n	80005e0 <__aeabi_fadd+0x8c>
 8000826:	464c      	mov	r4, r9
 8000828:	1b8f      	subs	r7, r1, r6
 800082a:	e6f9      	b.n	8000620 <__aeabi_fadd+0xcc>
 800082c:	464c      	mov	r4, r9
 800082e:	000e      	movs	r6, r1
 8000830:	e6d6      	b.n	80005e0 <__aeabi_fadd+0x8c>
 8000832:	2e00      	cmp	r6, #0
 8000834:	d149      	bne.n	80008ca <__aeabi_fadd+0x376>
 8000836:	2900      	cmp	r1, #0
 8000838:	d068      	beq.n	800090c <__aeabi_fadd+0x3b8>
 800083a:	4667      	mov	r7, ip
 800083c:	464c      	mov	r4, r9
 800083e:	e77c      	b.n	800073a <__aeabi_fadd+0x1e6>
 8000840:	1870      	adds	r0, r6, r1
 8000842:	0143      	lsls	r3, r0, #5
 8000844:	d574      	bpl.n	8000930 <__aeabi_fadd+0x3dc>
 8000846:	4930      	ldr	r1, [pc, #192]	@ (8000908 <__aeabi_fadd+0x3b4>)
 8000848:	0840      	lsrs	r0, r0, #1
 800084a:	4001      	ands	r1, r0
 800084c:	0743      	lsls	r3, r0, #29
 800084e:	d009      	beq.n	8000864 <__aeabi_fadd+0x310>
 8000850:	230f      	movs	r3, #15
 8000852:	4003      	ands	r3, r0
 8000854:	2b04      	cmp	r3, #4
 8000856:	d005      	beq.n	8000864 <__aeabi_fadd+0x310>
 8000858:	2302      	movs	r3, #2
 800085a:	1d0e      	adds	r6, r1, #4
 800085c:	e6c0      	b.n	80005e0 <__aeabi_fadd+0x8c>
 800085e:	2301      	movs	r3, #1
 8000860:	08cf      	lsrs	r7, r1, #3
 8000862:	e6c1      	b.n	80005e8 <__aeabi_fadd+0x94>
 8000864:	2302      	movs	r3, #2
 8000866:	08cf      	lsrs	r7, r1, #3
 8000868:	e6be      	b.n	80005e8 <__aeabi_fadd+0x94>
 800086a:	2520      	movs	r5, #32
 800086c:	0030      	movs	r0, r6
 800086e:	40d8      	lsrs	r0, r3
 8000870:	1aeb      	subs	r3, r5, r3
 8000872:	409e      	lsls	r6, r3
 8000874:	0033      	movs	r3, r6
 8000876:	1e5d      	subs	r5, r3, #1
 8000878:	41ab      	sbcs	r3, r5
 800087a:	4303      	orrs	r3, r0
 800087c:	0015      	movs	r5, r2
 800087e:	185e      	adds	r6, r3, r1
 8000880:	e7a0      	b.n	80007c4 <__aeabi_fadd+0x270>
 8000882:	2900      	cmp	r1, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x334>
 8000886:	e765      	b.n	8000754 <__aeabi_fadd+0x200>
 8000888:	464c      	mov	r4, r9
 800088a:	4667      	mov	r7, ip
 800088c:	e6ac      	b.n	80005e8 <__aeabi_fadd+0x94>
 800088e:	1b8f      	subs	r7, r1, r6
 8000890:	017b      	lsls	r3, r7, #5
 8000892:	d52e      	bpl.n	80008f2 <__aeabi_fadd+0x39e>
 8000894:	01bf      	lsls	r7, r7, #6
 8000896:	09bf      	lsrs	r7, r7, #6
 8000898:	0038      	movs	r0, r7
 800089a:	f002 fe31 	bl	8003500 <__clzsi2>
 800089e:	003b      	movs	r3, r7
 80008a0:	3805      	subs	r0, #5
 80008a2:	4083      	lsls	r3, r0
 80008a4:	464c      	mov	r4, r9
 80008a6:	3501      	adds	r5, #1
 80008a8:	e710      	b.n	80006cc <__aeabi_fadd+0x178>
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d100      	bne.n	80008b0 <__aeabi_fadd+0x35c>
 80008ae:	e740      	b.n	8000732 <__aeabi_fadd+0x1de>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_fadd+0x362>
 80008b4:	e741      	b.n	800073a <__aeabi_fadd+0x1e6>
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	03db      	lsls	r3, r3, #15
 80008ba:	429f      	cmp	r7, r3
 80008bc:	d200      	bcs.n	80008c0 <__aeabi_fadd+0x36c>
 80008be:	e73c      	b.n	800073a <__aeabi_fadd+0x1e6>
 80008c0:	459c      	cmp	ip, r3
 80008c2:	d300      	bcc.n	80008c6 <__aeabi_fadd+0x372>
 80008c4:	e739      	b.n	800073a <__aeabi_fadd+0x1e6>
 80008c6:	4667      	mov	r7, ip
 80008c8:	e737      	b.n	800073a <__aeabi_fadd+0x1e6>
 80008ca:	2900      	cmp	r1, #0
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fadd+0x37c>
 80008ce:	e734      	b.n	800073a <__aeabi_fadd+0x1e6>
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	03db      	lsls	r3, r3, #15
 80008d4:	429f      	cmp	r7, r3
 80008d6:	d200      	bcs.n	80008da <__aeabi_fadd+0x386>
 80008d8:	e72f      	b.n	800073a <__aeabi_fadd+0x1e6>
 80008da:	459c      	cmp	ip, r3
 80008dc:	d300      	bcc.n	80008e0 <__aeabi_fadd+0x38c>
 80008de:	e72c      	b.n	800073a <__aeabi_fadd+0x1e6>
 80008e0:	464c      	mov	r4, r9
 80008e2:	4667      	mov	r7, ip
 80008e4:	e729      	b.n	800073a <__aeabi_fadd+0x1e6>
 80008e6:	2900      	cmp	r1, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x398>
 80008ea:	e734      	b.n	8000756 <__aeabi_fadd+0x202>
 80008ec:	2300      	movs	r3, #0
 80008ee:	08cf      	lsrs	r7, r1, #3
 80008f0:	e67a      	b.n	80005e8 <__aeabi_fadd+0x94>
 80008f2:	464c      	mov	r4, r9
 80008f4:	2301      	movs	r3, #1
 80008f6:	08ff      	lsrs	r7, r7, #3
 80008f8:	e676      	b.n	80005e8 <__aeabi_fadd+0x94>
 80008fa:	2f00      	cmp	r7, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x3ac>
 80008fe:	e729      	b.n	8000754 <__aeabi_fadd+0x200>
 8000900:	08ff      	lsrs	r7, r7, #3
 8000902:	e671      	b.n	80005e8 <__aeabi_fadd+0x94>
 8000904:	fbffffff 	.word	0xfbffffff
 8000908:	7dffffff 	.word	0x7dffffff
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	2400      	movs	r4, #0
 8000910:	20ff      	movs	r0, #255	@ 0xff
 8000912:	03d2      	lsls	r2, r2, #15
 8000914:	e69d      	b.n	8000652 <__aeabi_fadd+0xfe>
 8000916:	2300      	movs	r3, #0
 8000918:	e666      	b.n	80005e8 <__aeabi_fadd+0x94>
 800091a:	2300      	movs	r3, #0
 800091c:	08d7      	lsrs	r7, r2, #3
 800091e:	e663      	b.n	80005e8 <__aeabi_fadd+0x94>
 8000920:	2001      	movs	r0, #1
 8000922:	0172      	lsls	r2, r6, #5
 8000924:	d500      	bpl.n	8000928 <__aeabi_fadd+0x3d4>
 8000926:	e6e7      	b.n	80006f8 <__aeabi_fadd+0x1a4>
 8000928:	0031      	movs	r1, r6
 800092a:	2300      	movs	r3, #0
 800092c:	08cf      	lsrs	r7, r1, #3
 800092e:	e65b      	b.n	80005e8 <__aeabi_fadd+0x94>
 8000930:	2301      	movs	r3, #1
 8000932:	08c7      	lsrs	r7, r0, #3
 8000934:	e658      	b.n	80005e8 <__aeabi_fadd+0x94>
 8000936:	46c0      	nop			@ (mov r8, r8)

08000938 <__aeabi_fdiv>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	4646      	mov	r6, r8
 800093c:	464f      	mov	r7, r9
 800093e:	46d6      	mov	lr, sl
 8000940:	0245      	lsls	r5, r0, #9
 8000942:	b5c0      	push	{r6, r7, lr}
 8000944:	0fc3      	lsrs	r3, r0, #31
 8000946:	0047      	lsls	r7, r0, #1
 8000948:	4698      	mov	r8, r3
 800094a:	1c0e      	adds	r6, r1, #0
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	d05b      	beq.n	8000a0a <__aeabi_fdiv+0xd2>
 8000952:	2fff      	cmp	r7, #255	@ 0xff
 8000954:	d021      	beq.n	800099a <__aeabi_fdiv+0x62>
 8000956:	2380      	movs	r3, #128	@ 0x80
 8000958:	00ed      	lsls	r5, r5, #3
 800095a:	04db      	lsls	r3, r3, #19
 800095c:	431d      	orrs	r5, r3
 800095e:	2300      	movs	r3, #0
 8000960:	4699      	mov	r9, r3
 8000962:	469a      	mov	sl, r3
 8000964:	3f7f      	subs	r7, #127	@ 0x7f
 8000966:	0274      	lsls	r4, r6, #9
 8000968:	0073      	lsls	r3, r6, #1
 800096a:	0a64      	lsrs	r4, r4, #9
 800096c:	0e1b      	lsrs	r3, r3, #24
 800096e:	0ff6      	lsrs	r6, r6, #31
 8000970:	2b00      	cmp	r3, #0
 8000972:	d020      	beq.n	80009b6 <__aeabi_fdiv+0x7e>
 8000974:	2bff      	cmp	r3, #255	@ 0xff
 8000976:	d043      	beq.n	8000a00 <__aeabi_fdiv+0xc8>
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	2000      	movs	r0, #0
 800097c:	00e4      	lsls	r4, r4, #3
 800097e:	04d2      	lsls	r2, r2, #19
 8000980:	4314      	orrs	r4, r2
 8000982:	3b7f      	subs	r3, #127	@ 0x7f
 8000984:	4642      	mov	r2, r8
 8000986:	1aff      	subs	r7, r7, r3
 8000988:	464b      	mov	r3, r9
 800098a:	4072      	eors	r2, r6
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d900      	bls.n	8000992 <__aeabi_fdiv+0x5a>
 8000990:	e09d      	b.n	8000ace <__aeabi_fdiv+0x196>
 8000992:	4971      	ldr	r1, [pc, #452]	@ (8000b58 <__aeabi_fdiv+0x220>)
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	58cb      	ldr	r3, [r1, r3]
 8000998:	469f      	mov	pc, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d15a      	bne.n	8000a54 <__aeabi_fdiv+0x11c>
 800099e:	2308      	movs	r3, #8
 80009a0:	4699      	mov	r9, r3
 80009a2:	3b06      	subs	r3, #6
 80009a4:	0274      	lsls	r4, r6, #9
 80009a6:	469a      	mov	sl, r3
 80009a8:	0073      	lsls	r3, r6, #1
 80009aa:	27ff      	movs	r7, #255	@ 0xff
 80009ac:	0a64      	lsrs	r4, r4, #9
 80009ae:	0e1b      	lsrs	r3, r3, #24
 80009b0:	0ff6      	lsrs	r6, r6, #31
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1de      	bne.n	8000974 <__aeabi_fdiv+0x3c>
 80009b6:	2c00      	cmp	r4, #0
 80009b8:	d13b      	bne.n	8000a32 <__aeabi_fdiv+0xfa>
 80009ba:	2301      	movs	r3, #1
 80009bc:	4642      	mov	r2, r8
 80009be:	4649      	mov	r1, r9
 80009c0:	4072      	eors	r2, r6
 80009c2:	4319      	orrs	r1, r3
 80009c4:	290e      	cmp	r1, #14
 80009c6:	d818      	bhi.n	80009fa <__aeabi_fdiv+0xc2>
 80009c8:	4864      	ldr	r0, [pc, #400]	@ (8000b5c <__aeabi_fdiv+0x224>)
 80009ca:	0089      	lsls	r1, r1, #2
 80009cc:	5841      	ldr	r1, [r0, r1]
 80009ce:	468f      	mov	pc, r1
 80009d0:	4653      	mov	r3, sl
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fdiv+0xa0>
 80009d6:	e0b8      	b.n	8000b4a <__aeabi_fdiv+0x212>
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d06e      	beq.n	8000aba <__aeabi_fdiv+0x182>
 80009dc:	4642      	mov	r2, r8
 80009de:	002c      	movs	r4, r5
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d140      	bne.n	8000a66 <__aeabi_fdiv+0x12e>
 80009e4:	2000      	movs	r0, #0
 80009e6:	2400      	movs	r4, #0
 80009e8:	05c0      	lsls	r0, r0, #23
 80009ea:	4320      	orrs	r0, r4
 80009ec:	07d2      	lsls	r2, r2, #31
 80009ee:	4310      	orrs	r0, r2
 80009f0:	bce0      	pop	{r5, r6, r7}
 80009f2:	46ba      	mov	sl, r7
 80009f4:	46b1      	mov	r9, r6
 80009f6:	46a8      	mov	r8, r5
 80009f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fa:	20ff      	movs	r0, #255	@ 0xff
 80009fc:	2400      	movs	r4, #0
 80009fe:	e7f3      	b.n	80009e8 <__aeabi_fdiv+0xb0>
 8000a00:	2c00      	cmp	r4, #0
 8000a02:	d120      	bne.n	8000a46 <__aeabi_fdiv+0x10e>
 8000a04:	2302      	movs	r3, #2
 8000a06:	3fff      	subs	r7, #255	@ 0xff
 8000a08:	e7d8      	b.n	80009bc <__aeabi_fdiv+0x84>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d105      	bne.n	8000a1a <__aeabi_fdiv+0xe2>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	4699      	mov	r9, r3
 8000a12:	3b03      	subs	r3, #3
 8000a14:	2700      	movs	r7, #0
 8000a16:	469a      	mov	sl, r3
 8000a18:	e7a5      	b.n	8000966 <__aeabi_fdiv+0x2e>
 8000a1a:	0028      	movs	r0, r5
 8000a1c:	f002 fd70 	bl	8003500 <__clzsi2>
 8000a20:	2776      	movs	r7, #118	@ 0x76
 8000a22:	1f43      	subs	r3, r0, #5
 8000a24:	409d      	lsls	r5, r3
 8000a26:	2300      	movs	r3, #0
 8000a28:	427f      	negs	r7, r7
 8000a2a:	4699      	mov	r9, r3
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	1a3f      	subs	r7, r7, r0
 8000a30:	e799      	b.n	8000966 <__aeabi_fdiv+0x2e>
 8000a32:	0020      	movs	r0, r4
 8000a34:	f002 fd64 	bl	8003500 <__clzsi2>
 8000a38:	1f43      	subs	r3, r0, #5
 8000a3a:	409c      	lsls	r4, r3
 8000a3c:	2376      	movs	r3, #118	@ 0x76
 8000a3e:	425b      	negs	r3, r3
 8000a40:	1a1b      	subs	r3, r3, r0
 8000a42:	2000      	movs	r0, #0
 8000a44:	e79e      	b.n	8000984 <__aeabi_fdiv+0x4c>
 8000a46:	2303      	movs	r3, #3
 8000a48:	464a      	mov	r2, r9
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	4691      	mov	r9, r2
 8000a4e:	2003      	movs	r0, #3
 8000a50:	33fc      	adds	r3, #252	@ 0xfc
 8000a52:	e797      	b.n	8000984 <__aeabi_fdiv+0x4c>
 8000a54:	230c      	movs	r3, #12
 8000a56:	4699      	mov	r9, r3
 8000a58:	3b09      	subs	r3, #9
 8000a5a:	27ff      	movs	r7, #255	@ 0xff
 8000a5c:	469a      	mov	sl, r3
 8000a5e:	e782      	b.n	8000966 <__aeabi_fdiv+0x2e>
 8000a60:	2803      	cmp	r0, #3
 8000a62:	d02c      	beq.n	8000abe <__aeabi_fdiv+0x186>
 8000a64:	0032      	movs	r2, r6
 8000a66:	0038      	movs	r0, r7
 8000a68:	307f      	adds	r0, #127	@ 0x7f
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	dd47      	ble.n	8000afe <__aeabi_fdiv+0x1c6>
 8000a6e:	0763      	lsls	r3, r4, #29
 8000a70:	d004      	beq.n	8000a7c <__aeabi_fdiv+0x144>
 8000a72:	230f      	movs	r3, #15
 8000a74:	4023      	ands	r3, r4
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d000      	beq.n	8000a7c <__aeabi_fdiv+0x144>
 8000a7a:	3404      	adds	r4, #4
 8000a7c:	0123      	lsls	r3, r4, #4
 8000a7e:	d503      	bpl.n	8000a88 <__aeabi_fdiv+0x150>
 8000a80:	0038      	movs	r0, r7
 8000a82:	4b37      	ldr	r3, [pc, #220]	@ (8000b60 <__aeabi_fdiv+0x228>)
 8000a84:	3080      	adds	r0, #128	@ 0x80
 8000a86:	401c      	ands	r4, r3
 8000a88:	28fe      	cmp	r0, #254	@ 0xfe
 8000a8a:	dcb6      	bgt.n	80009fa <__aeabi_fdiv+0xc2>
 8000a8c:	01a4      	lsls	r4, r4, #6
 8000a8e:	0a64      	lsrs	r4, r4, #9
 8000a90:	b2c0      	uxtb	r0, r0
 8000a92:	e7a9      	b.n	80009e8 <__aeabi_fdiv+0xb0>
 8000a94:	2480      	movs	r4, #128	@ 0x80
 8000a96:	2200      	movs	r2, #0
 8000a98:	20ff      	movs	r0, #255	@ 0xff
 8000a9a:	03e4      	lsls	r4, r4, #15
 8000a9c:	e7a4      	b.n	80009e8 <__aeabi_fdiv+0xb0>
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	03db      	lsls	r3, r3, #15
 8000aa2:	421d      	tst	r5, r3
 8000aa4:	d001      	beq.n	8000aaa <__aeabi_fdiv+0x172>
 8000aa6:	421c      	tst	r4, r3
 8000aa8:	d00b      	beq.n	8000ac2 <__aeabi_fdiv+0x18a>
 8000aaa:	2480      	movs	r4, #128	@ 0x80
 8000aac:	03e4      	lsls	r4, r4, #15
 8000aae:	432c      	orrs	r4, r5
 8000ab0:	0264      	lsls	r4, r4, #9
 8000ab2:	4642      	mov	r2, r8
 8000ab4:	20ff      	movs	r0, #255	@ 0xff
 8000ab6:	0a64      	lsrs	r4, r4, #9
 8000ab8:	e796      	b.n	80009e8 <__aeabi_fdiv+0xb0>
 8000aba:	4646      	mov	r6, r8
 8000abc:	002c      	movs	r4, r5
 8000abe:	2380      	movs	r3, #128	@ 0x80
 8000ac0:	03db      	lsls	r3, r3, #15
 8000ac2:	431c      	orrs	r4, r3
 8000ac4:	0264      	lsls	r4, r4, #9
 8000ac6:	0032      	movs	r2, r6
 8000ac8:	20ff      	movs	r0, #255	@ 0xff
 8000aca:	0a64      	lsrs	r4, r4, #9
 8000acc:	e78c      	b.n	80009e8 <__aeabi_fdiv+0xb0>
 8000ace:	016d      	lsls	r5, r5, #5
 8000ad0:	0160      	lsls	r0, r4, #5
 8000ad2:	4285      	cmp	r5, r0
 8000ad4:	d22d      	bcs.n	8000b32 <__aeabi_fdiv+0x1fa>
 8000ad6:	231b      	movs	r3, #27
 8000ad8:	2400      	movs	r4, #0
 8000ada:	3f01      	subs	r7, #1
 8000adc:	2601      	movs	r6, #1
 8000ade:	0029      	movs	r1, r5
 8000ae0:	0064      	lsls	r4, r4, #1
 8000ae2:	006d      	lsls	r5, r5, #1
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	db01      	blt.n	8000aec <__aeabi_fdiv+0x1b4>
 8000ae8:	4285      	cmp	r5, r0
 8000aea:	d301      	bcc.n	8000af0 <__aeabi_fdiv+0x1b8>
 8000aec:	1a2d      	subs	r5, r5, r0
 8000aee:	4334      	orrs	r4, r6
 8000af0:	3b01      	subs	r3, #1
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1f3      	bne.n	8000ade <__aeabi_fdiv+0x1a6>
 8000af6:	1e6b      	subs	r3, r5, #1
 8000af8:	419d      	sbcs	r5, r3
 8000afa:	432c      	orrs	r4, r5
 8000afc:	e7b3      	b.n	8000a66 <__aeabi_fdiv+0x12e>
 8000afe:	2301      	movs	r3, #1
 8000b00:	1a1b      	subs	r3, r3, r0
 8000b02:	2b1b      	cmp	r3, #27
 8000b04:	dd00      	ble.n	8000b08 <__aeabi_fdiv+0x1d0>
 8000b06:	e76d      	b.n	80009e4 <__aeabi_fdiv+0xac>
 8000b08:	0021      	movs	r1, r4
 8000b0a:	379e      	adds	r7, #158	@ 0x9e
 8000b0c:	40d9      	lsrs	r1, r3
 8000b0e:	40bc      	lsls	r4, r7
 8000b10:	000b      	movs	r3, r1
 8000b12:	1e61      	subs	r1, r4, #1
 8000b14:	418c      	sbcs	r4, r1
 8000b16:	4323      	orrs	r3, r4
 8000b18:	0759      	lsls	r1, r3, #29
 8000b1a:	d004      	beq.n	8000b26 <__aeabi_fdiv+0x1ee>
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	4019      	ands	r1, r3
 8000b20:	2904      	cmp	r1, #4
 8000b22:	d000      	beq.n	8000b26 <__aeabi_fdiv+0x1ee>
 8000b24:	3304      	adds	r3, #4
 8000b26:	0159      	lsls	r1, r3, #5
 8000b28:	d413      	bmi.n	8000b52 <__aeabi_fdiv+0x21a>
 8000b2a:	019b      	lsls	r3, r3, #6
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	0a5c      	lsrs	r4, r3, #9
 8000b30:	e75a      	b.n	80009e8 <__aeabi_fdiv+0xb0>
 8000b32:	231a      	movs	r3, #26
 8000b34:	2401      	movs	r4, #1
 8000b36:	1a2d      	subs	r5, r5, r0
 8000b38:	e7d0      	b.n	8000adc <__aeabi_fdiv+0x1a4>
 8000b3a:	1e98      	subs	r0, r3, #2
 8000b3c:	4243      	negs	r3, r0
 8000b3e:	4158      	adcs	r0, r3
 8000b40:	4240      	negs	r0, r0
 8000b42:	0032      	movs	r2, r6
 8000b44:	2400      	movs	r4, #0
 8000b46:	b2c0      	uxtb	r0, r0
 8000b48:	e74e      	b.n	80009e8 <__aeabi_fdiv+0xb0>
 8000b4a:	4642      	mov	r2, r8
 8000b4c:	20ff      	movs	r0, #255	@ 0xff
 8000b4e:	2400      	movs	r4, #0
 8000b50:	e74a      	b.n	80009e8 <__aeabi_fdiv+0xb0>
 8000b52:	2001      	movs	r0, #1
 8000b54:	2400      	movs	r4, #0
 8000b56:	e747      	b.n	80009e8 <__aeabi_fdiv+0xb0>
 8000b58:	0800c4a8 	.word	0x0800c4a8
 8000b5c:	0800c4e8 	.word	0x0800c4e8
 8000b60:	f7ffffff 	.word	0xf7ffffff

08000b64 <__eqsf2>:
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	0042      	lsls	r2, r0, #1
 8000b68:	024e      	lsls	r6, r1, #9
 8000b6a:	004c      	lsls	r4, r1, #1
 8000b6c:	0245      	lsls	r5, r0, #9
 8000b6e:	0a6d      	lsrs	r5, r5, #9
 8000b70:	0e12      	lsrs	r2, r2, #24
 8000b72:	0fc3      	lsrs	r3, r0, #31
 8000b74:	0a76      	lsrs	r6, r6, #9
 8000b76:	0e24      	lsrs	r4, r4, #24
 8000b78:	0fc9      	lsrs	r1, r1, #31
 8000b7a:	2aff      	cmp	r2, #255	@ 0xff
 8000b7c:	d010      	beq.n	8000ba0 <__eqsf2+0x3c>
 8000b7e:	2cff      	cmp	r4, #255	@ 0xff
 8000b80:	d00c      	beq.n	8000b9c <__eqsf2+0x38>
 8000b82:	2001      	movs	r0, #1
 8000b84:	42a2      	cmp	r2, r4
 8000b86:	d10a      	bne.n	8000b9e <__eqsf2+0x3a>
 8000b88:	42b5      	cmp	r5, r6
 8000b8a:	d108      	bne.n	8000b9e <__eqsf2+0x3a>
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d00f      	beq.n	8000bb0 <__eqsf2+0x4c>
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d104      	bne.n	8000b9e <__eqsf2+0x3a>
 8000b94:	0028      	movs	r0, r5
 8000b96:	1e43      	subs	r3, r0, #1
 8000b98:	4198      	sbcs	r0, r3
 8000b9a:	e000      	b.n	8000b9e <__eqsf2+0x3a>
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	2cff      	cmp	r4, #255	@ 0xff
 8000ba4:	d1fb      	bne.n	8000b9e <__eqsf2+0x3a>
 8000ba6:	4335      	orrs	r5, r6
 8000ba8:	d1f9      	bne.n	8000b9e <__eqsf2+0x3a>
 8000baa:	404b      	eors	r3, r1
 8000bac:	0018      	movs	r0, r3
 8000bae:	e7f6      	b.n	8000b9e <__eqsf2+0x3a>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	e7f4      	b.n	8000b9e <__eqsf2+0x3a>

08000bb4 <__gesf2>:
 8000bb4:	b530      	push	{r4, r5, lr}
 8000bb6:	0042      	lsls	r2, r0, #1
 8000bb8:	0244      	lsls	r4, r0, #9
 8000bba:	024d      	lsls	r5, r1, #9
 8000bbc:	0fc3      	lsrs	r3, r0, #31
 8000bbe:	0048      	lsls	r0, r1, #1
 8000bc0:	0a64      	lsrs	r4, r4, #9
 8000bc2:	0e12      	lsrs	r2, r2, #24
 8000bc4:	0a6d      	lsrs	r5, r5, #9
 8000bc6:	0e00      	lsrs	r0, r0, #24
 8000bc8:	0fc9      	lsrs	r1, r1, #31
 8000bca:	2aff      	cmp	r2, #255	@ 0xff
 8000bcc:	d018      	beq.n	8000c00 <__gesf2+0x4c>
 8000bce:	28ff      	cmp	r0, #255	@ 0xff
 8000bd0:	d00a      	beq.n	8000be8 <__gesf2+0x34>
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	d11e      	bne.n	8000c14 <__gesf2+0x60>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	d10a      	bne.n	8000bf0 <__gesf2+0x3c>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d029      	beq.n	8000c32 <__gesf2+0x7e>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d12d      	bne.n	8000c3e <__gesf2+0x8a>
 8000be2:	0048      	lsls	r0, r1, #1
 8000be4:	3801      	subs	r0, #1
 8000be6:	bd30      	pop	{r4, r5, pc}
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d125      	bne.n	8000c38 <__gesf2+0x84>
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	d101      	bne.n	8000bf4 <__gesf2+0x40>
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d0f6      	beq.n	8000be2 <__gesf2+0x2e>
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d019      	beq.n	8000c2c <__gesf2+0x78>
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	4318      	orrs	r0, r3
 8000bfe:	e7f2      	b.n	8000be6 <__gesf2+0x32>
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d119      	bne.n	8000c38 <__gesf2+0x84>
 8000c04:	28ff      	cmp	r0, #255	@ 0xff
 8000c06:	d1f7      	bne.n	8000bf8 <__gesf2+0x44>
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d115      	bne.n	8000c38 <__gesf2+0x84>
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d1f2      	bne.n	8000bf8 <__gesf2+0x44>
 8000c12:	e7e8      	b.n	8000be6 <__gesf2+0x32>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	d0ef      	beq.n	8000bf8 <__gesf2+0x44>
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	d1ed      	bne.n	8000bf8 <__gesf2+0x44>
 8000c1c:	4282      	cmp	r2, r0
 8000c1e:	dceb      	bgt.n	8000bf8 <__gesf2+0x44>
 8000c20:	db04      	blt.n	8000c2c <__gesf2+0x78>
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	d8e8      	bhi.n	8000bf8 <__gesf2+0x44>
 8000c26:	2000      	movs	r0, #0
 8000c28:	42ac      	cmp	r4, r5
 8000c2a:	d2dc      	bcs.n	8000be6 <__gesf2+0x32>
 8000c2c:	0058      	lsls	r0, r3, #1
 8000c2e:	3801      	subs	r0, #1
 8000c30:	e7d9      	b.n	8000be6 <__gesf2+0x32>
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d0d7      	beq.n	8000be6 <__gesf2+0x32>
 8000c36:	e7df      	b.n	8000bf8 <__gesf2+0x44>
 8000c38:	2002      	movs	r0, #2
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	e7d3      	b.n	8000be6 <__gesf2+0x32>
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d1da      	bne.n	8000bf8 <__gesf2+0x44>
 8000c42:	e7ee      	b.n	8000c22 <__gesf2+0x6e>

08000c44 <__lesf2>:
 8000c44:	b530      	push	{r4, r5, lr}
 8000c46:	0042      	lsls	r2, r0, #1
 8000c48:	0244      	lsls	r4, r0, #9
 8000c4a:	024d      	lsls	r5, r1, #9
 8000c4c:	0fc3      	lsrs	r3, r0, #31
 8000c4e:	0048      	lsls	r0, r1, #1
 8000c50:	0a64      	lsrs	r4, r4, #9
 8000c52:	0e12      	lsrs	r2, r2, #24
 8000c54:	0a6d      	lsrs	r5, r5, #9
 8000c56:	0e00      	lsrs	r0, r0, #24
 8000c58:	0fc9      	lsrs	r1, r1, #31
 8000c5a:	2aff      	cmp	r2, #255	@ 0xff
 8000c5c:	d017      	beq.n	8000c8e <__lesf2+0x4a>
 8000c5e:	28ff      	cmp	r0, #255	@ 0xff
 8000c60:	d00a      	beq.n	8000c78 <__lesf2+0x34>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	d11b      	bne.n	8000c9e <__lesf2+0x5a>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d10a      	bne.n	8000c80 <__lesf2+0x3c>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d01d      	beq.n	8000caa <__lesf2+0x66>
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	d12d      	bne.n	8000cce <__lesf2+0x8a>
 8000c72:	0048      	lsls	r0, r1, #1
 8000c74:	3801      	subs	r0, #1
 8000c76:	e011      	b.n	8000c9c <__lesf2+0x58>
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	d10e      	bne.n	8000c9a <__lesf2+0x56>
 8000c7c:	2a00      	cmp	r2, #0
 8000c7e:	d101      	bne.n	8000c84 <__lesf2+0x40>
 8000c80:	2c00      	cmp	r4, #0
 8000c82:	d0f6      	beq.n	8000c72 <__lesf2+0x2e>
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d10c      	bne.n	8000ca2 <__lesf2+0x5e>
 8000c88:	0058      	lsls	r0, r3, #1
 8000c8a:	3801      	subs	r0, #1
 8000c8c:	e006      	b.n	8000c9c <__lesf2+0x58>
 8000c8e:	2c00      	cmp	r4, #0
 8000c90:	d103      	bne.n	8000c9a <__lesf2+0x56>
 8000c92:	28ff      	cmp	r0, #255	@ 0xff
 8000c94:	d105      	bne.n	8000ca2 <__lesf2+0x5e>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d015      	beq.n	8000cc6 <__lesf2+0x82>
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	bd30      	pop	{r4, r5, pc}
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d106      	bne.n	8000cb0 <__lesf2+0x6c>
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	4318      	orrs	r0, r3
 8000ca8:	e7f8      	b.n	8000c9c <__lesf2+0x58>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d0f6      	beq.n	8000c9c <__lesf2+0x58>
 8000cae:	e7f8      	b.n	8000ca2 <__lesf2+0x5e>
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d1f6      	bne.n	8000ca2 <__lesf2+0x5e>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	dcf4      	bgt.n	8000ca2 <__lesf2+0x5e>
 8000cb8:	dbe6      	blt.n	8000c88 <__lesf2+0x44>
 8000cba:	42ac      	cmp	r4, r5
 8000cbc:	d8f1      	bhi.n	8000ca2 <__lesf2+0x5e>
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	42ac      	cmp	r4, r5
 8000cc2:	d2eb      	bcs.n	8000c9c <__lesf2+0x58>
 8000cc4:	e7e0      	b.n	8000c88 <__lesf2+0x44>
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d1ea      	bne.n	8000ca2 <__lesf2+0x5e>
 8000ccc:	e7e6      	b.n	8000c9c <__lesf2+0x58>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d1e7      	bne.n	8000ca2 <__lesf2+0x5e>
 8000cd2:	e7f2      	b.n	8000cba <__lesf2+0x76>

08000cd4 <__aeabi_fmul>:
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	4646      	mov	r6, r8
 8000cda:	46d6      	mov	lr, sl
 8000cdc:	0044      	lsls	r4, r0, #1
 8000cde:	b5c0      	push	{r6, r7, lr}
 8000ce0:	0246      	lsls	r6, r0, #9
 8000ce2:	1c0f      	adds	r7, r1, #0
 8000ce4:	0a76      	lsrs	r6, r6, #9
 8000ce6:	0e24      	lsrs	r4, r4, #24
 8000ce8:	0fc5      	lsrs	r5, r0, #31
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fmul+0x1c>
 8000cee:	e0da      	b.n	8000ea6 <__aeabi_fmul+0x1d2>
 8000cf0:	2cff      	cmp	r4, #255	@ 0xff
 8000cf2:	d074      	beq.n	8000dde <__aeabi_fmul+0x10a>
 8000cf4:	2380      	movs	r3, #128	@ 0x80
 8000cf6:	00f6      	lsls	r6, r6, #3
 8000cf8:	04db      	lsls	r3, r3, #19
 8000cfa:	431e      	orrs	r6, r3
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4699      	mov	r9, r3
 8000d00:	469a      	mov	sl, r3
 8000d02:	3c7f      	subs	r4, #127	@ 0x7f
 8000d04:	027b      	lsls	r3, r7, #9
 8000d06:	0a5b      	lsrs	r3, r3, #9
 8000d08:	4698      	mov	r8, r3
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	0e1b      	lsrs	r3, r3, #24
 8000d0e:	0fff      	lsrs	r7, r7, #31
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d074      	beq.n	8000dfe <__aeabi_fmul+0x12a>
 8000d14:	2bff      	cmp	r3, #255	@ 0xff
 8000d16:	d100      	bne.n	8000d1a <__aeabi_fmul+0x46>
 8000d18:	e08e      	b.n	8000e38 <__aeabi_fmul+0x164>
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	2180      	movs	r1, #128	@ 0x80
 8000d1e:	00d2      	lsls	r2, r2, #3
 8000d20:	04c9      	lsls	r1, r1, #19
 8000d22:	4311      	orrs	r1, r2
 8000d24:	3b7f      	subs	r3, #127	@ 0x7f
 8000d26:	002a      	movs	r2, r5
 8000d28:	18e4      	adds	r4, r4, r3
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	407a      	eors	r2, r7
 8000d2e:	4688      	mov	r8, r1
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	dc75      	bgt.n	8000e22 <__aeabi_fmul+0x14e>
 8000d36:	464b      	mov	r3, r9
 8000d38:	2000      	movs	r0, #0
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	dd0f      	ble.n	8000d5e <__aeabi_fmul+0x8a>
 8000d3e:	4649      	mov	r1, r9
 8000d40:	2301      	movs	r3, #1
 8000d42:	408b      	lsls	r3, r1
 8000d44:	21a6      	movs	r1, #166	@ 0xa6
 8000d46:	00c9      	lsls	r1, r1, #3
 8000d48:	420b      	tst	r3, r1
 8000d4a:	d169      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000d4c:	2190      	movs	r1, #144	@ 0x90
 8000d4e:	0089      	lsls	r1, r1, #2
 8000d50:	420b      	tst	r3, r1
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fmul+0x82>
 8000d54:	e100      	b.n	8000f58 <__aeabi_fmul+0x284>
 8000d56:	2188      	movs	r1, #136	@ 0x88
 8000d58:	4219      	tst	r1, r3
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fmul+0x8a>
 8000d5c:	e0f5      	b.n	8000f4a <__aeabi_fmul+0x276>
 8000d5e:	4641      	mov	r1, r8
 8000d60:	0409      	lsls	r1, r1, #16
 8000d62:	0c09      	lsrs	r1, r1, #16
 8000d64:	4643      	mov	r3, r8
 8000d66:	0008      	movs	r0, r1
 8000d68:	0c35      	lsrs	r5, r6, #16
 8000d6a:	0436      	lsls	r6, r6, #16
 8000d6c:	0c1b      	lsrs	r3, r3, #16
 8000d6e:	0c36      	lsrs	r6, r6, #16
 8000d70:	4370      	muls	r0, r6
 8000d72:	4369      	muls	r1, r5
 8000d74:	435e      	muls	r6, r3
 8000d76:	435d      	muls	r5, r3
 8000d78:	1876      	adds	r6, r6, r1
 8000d7a:	0c03      	lsrs	r3, r0, #16
 8000d7c:	199b      	adds	r3, r3, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d903      	bls.n	8000d8a <__aeabi_fmul+0xb6>
 8000d82:	2180      	movs	r1, #128	@ 0x80
 8000d84:	0249      	lsls	r1, r1, #9
 8000d86:	468c      	mov	ip, r1
 8000d88:	4465      	add	r5, ip
 8000d8a:	0400      	lsls	r0, r0, #16
 8000d8c:	0419      	lsls	r1, r3, #16
 8000d8e:	0c00      	lsrs	r0, r0, #16
 8000d90:	1809      	adds	r1, r1, r0
 8000d92:	018e      	lsls	r6, r1, #6
 8000d94:	1e70      	subs	r0, r6, #1
 8000d96:	4186      	sbcs	r6, r0
 8000d98:	0c1b      	lsrs	r3, r3, #16
 8000d9a:	0e89      	lsrs	r1, r1, #26
 8000d9c:	195b      	adds	r3, r3, r5
 8000d9e:	430e      	orrs	r6, r1
 8000da0:	019b      	lsls	r3, r3, #6
 8000da2:	431e      	orrs	r6, r3
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	d46c      	bmi.n	8000e82 <__aeabi_fmul+0x1ae>
 8000da8:	0023      	movs	r3, r4
 8000daa:	337f      	adds	r3, #127	@ 0x7f
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	dc00      	bgt.n	8000db2 <__aeabi_fmul+0xde>
 8000db0:	e0b1      	b.n	8000f16 <__aeabi_fmul+0x242>
 8000db2:	0015      	movs	r5, r2
 8000db4:	0771      	lsls	r1, r6, #29
 8000db6:	d00b      	beq.n	8000dd0 <__aeabi_fmul+0xfc>
 8000db8:	200f      	movs	r0, #15
 8000dba:	0021      	movs	r1, r4
 8000dbc:	4030      	ands	r0, r6
 8000dbe:	2804      	cmp	r0, #4
 8000dc0:	d006      	beq.n	8000dd0 <__aeabi_fmul+0xfc>
 8000dc2:	3604      	adds	r6, #4
 8000dc4:	0132      	lsls	r2, r6, #4
 8000dc6:	d503      	bpl.n	8000dd0 <__aeabi_fmul+0xfc>
 8000dc8:	4b6e      	ldr	r3, [pc, #440]	@ (8000f84 <__aeabi_fmul+0x2b0>)
 8000dca:	401e      	ands	r6, r3
 8000dcc:	000b      	movs	r3, r1
 8000dce:	3380      	adds	r3, #128	@ 0x80
 8000dd0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_fmul+0x102>
 8000dd4:	e0bd      	b.n	8000f52 <__aeabi_fmul+0x27e>
 8000dd6:	01b2      	lsls	r2, r6, #6
 8000dd8:	0a52      	lsrs	r2, r2, #9
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	e048      	b.n	8000e70 <__aeabi_fmul+0x19c>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	d000      	beq.n	8000de4 <__aeabi_fmul+0x110>
 8000de2:	e092      	b.n	8000f0a <__aeabi_fmul+0x236>
 8000de4:	2308      	movs	r3, #8
 8000de6:	4699      	mov	r9, r3
 8000de8:	3b06      	subs	r3, #6
 8000dea:	469a      	mov	sl, r3
 8000dec:	027b      	lsls	r3, r7, #9
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	4698      	mov	r8, r3
 8000df2:	007b      	lsls	r3, r7, #1
 8000df4:	24ff      	movs	r4, #255	@ 0xff
 8000df6:	0e1b      	lsrs	r3, r3, #24
 8000df8:	0fff      	lsrs	r7, r7, #31
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d18a      	bne.n	8000d14 <__aeabi_fmul+0x40>
 8000dfe:	4642      	mov	r2, r8
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	d164      	bne.n	8000ece <__aeabi_fmul+0x1fa>
 8000e04:	4649      	mov	r1, r9
 8000e06:	3201      	adds	r2, #1
 8000e08:	4311      	orrs	r1, r2
 8000e0a:	4689      	mov	r9, r1
 8000e0c:	290a      	cmp	r1, #10
 8000e0e:	dc08      	bgt.n	8000e22 <__aeabi_fmul+0x14e>
 8000e10:	407d      	eors	r5, r7
 8000e12:	2001      	movs	r0, #1
 8000e14:	b2ea      	uxtb	r2, r5
 8000e16:	2902      	cmp	r1, #2
 8000e18:	dc91      	bgt.n	8000d3e <__aeabi_fmul+0x6a>
 8000e1a:	0015      	movs	r5, r2
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	e027      	b.n	8000e70 <__aeabi_fmul+0x19c>
 8000e20:	0015      	movs	r5, r2
 8000e22:	4653      	mov	r3, sl
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fmul+0x156>
 8000e28:	e093      	b.n	8000f52 <__aeabi_fmul+0x27e>
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d01a      	beq.n	8000e64 <__aeabi_fmul+0x190>
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d12c      	bne.n	8000e8c <__aeabi_fmul+0x1b8>
 8000e32:	2300      	movs	r3, #0
 8000e34:	2200      	movs	r2, #0
 8000e36:	e01b      	b.n	8000e70 <__aeabi_fmul+0x19c>
 8000e38:	4643      	mov	r3, r8
 8000e3a:	34ff      	adds	r4, #255	@ 0xff
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d055      	beq.n	8000eec <__aeabi_fmul+0x218>
 8000e40:	2103      	movs	r1, #3
 8000e42:	464b      	mov	r3, r9
 8000e44:	430b      	orrs	r3, r1
 8000e46:	0019      	movs	r1, r3
 8000e48:	2b0a      	cmp	r3, #10
 8000e4a:	dc00      	bgt.n	8000e4e <__aeabi_fmul+0x17a>
 8000e4c:	e092      	b.n	8000f74 <__aeabi_fmul+0x2a0>
 8000e4e:	2b0f      	cmp	r3, #15
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x180>
 8000e52:	e08c      	b.n	8000f6e <__aeabi_fmul+0x29a>
 8000e54:	2280      	movs	r2, #128	@ 0x80
 8000e56:	03d2      	lsls	r2, r2, #15
 8000e58:	4216      	tst	r6, r2
 8000e5a:	d003      	beq.n	8000e64 <__aeabi_fmul+0x190>
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	4213      	tst	r3, r2
 8000e60:	d100      	bne.n	8000e64 <__aeabi_fmul+0x190>
 8000e62:	e07d      	b.n	8000f60 <__aeabi_fmul+0x28c>
 8000e64:	2280      	movs	r2, #128	@ 0x80
 8000e66:	03d2      	lsls	r2, r2, #15
 8000e68:	4332      	orrs	r2, r6
 8000e6a:	0252      	lsls	r2, r2, #9
 8000e6c:	0a52      	lsrs	r2, r2, #9
 8000e6e:	23ff      	movs	r3, #255	@ 0xff
 8000e70:	05d8      	lsls	r0, r3, #23
 8000e72:	07ed      	lsls	r5, r5, #31
 8000e74:	4310      	orrs	r0, r2
 8000e76:	4328      	orrs	r0, r5
 8000e78:	bce0      	pop	{r5, r6, r7}
 8000e7a:	46ba      	mov	sl, r7
 8000e7c:	46b1      	mov	r9, r6
 8000e7e:	46a8      	mov	r8, r5
 8000e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e82:	2301      	movs	r3, #1
 8000e84:	0015      	movs	r5, r2
 8000e86:	0871      	lsrs	r1, r6, #1
 8000e88:	401e      	ands	r6, r3
 8000e8a:	430e      	orrs	r6, r1
 8000e8c:	0023      	movs	r3, r4
 8000e8e:	3380      	adds	r3, #128	@ 0x80
 8000e90:	1c61      	adds	r1, r4, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	dd41      	ble.n	8000f1a <__aeabi_fmul+0x246>
 8000e96:	0772      	lsls	r2, r6, #29
 8000e98:	d094      	beq.n	8000dc4 <__aeabi_fmul+0xf0>
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	4032      	ands	r2, r6
 8000e9e:	2a04      	cmp	r2, #4
 8000ea0:	d000      	beq.n	8000ea4 <__aeabi_fmul+0x1d0>
 8000ea2:	e78e      	b.n	8000dc2 <__aeabi_fmul+0xee>
 8000ea4:	e78e      	b.n	8000dc4 <__aeabi_fmul+0xf0>
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d105      	bne.n	8000eb6 <__aeabi_fmul+0x1e2>
 8000eaa:	2304      	movs	r3, #4
 8000eac:	4699      	mov	r9, r3
 8000eae:	3b03      	subs	r3, #3
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	e726      	b.n	8000d04 <__aeabi_fmul+0x30>
 8000eb6:	0030      	movs	r0, r6
 8000eb8:	f002 fb22 	bl	8003500 <__clzsi2>
 8000ebc:	2476      	movs	r4, #118	@ 0x76
 8000ebe:	1f43      	subs	r3, r0, #5
 8000ec0:	409e      	lsls	r6, r3
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	4264      	negs	r4, r4
 8000ec6:	4699      	mov	r9, r3
 8000ec8:	469a      	mov	sl, r3
 8000eca:	1a24      	subs	r4, r4, r0
 8000ecc:	e71a      	b.n	8000d04 <__aeabi_fmul+0x30>
 8000ece:	4640      	mov	r0, r8
 8000ed0:	f002 fb16 	bl	8003500 <__clzsi2>
 8000ed4:	464b      	mov	r3, r9
 8000ed6:	1a24      	subs	r4, r4, r0
 8000ed8:	3c76      	subs	r4, #118	@ 0x76
 8000eda:	2b0a      	cmp	r3, #10
 8000edc:	dca1      	bgt.n	8000e22 <__aeabi_fmul+0x14e>
 8000ede:	4643      	mov	r3, r8
 8000ee0:	3805      	subs	r0, #5
 8000ee2:	4083      	lsls	r3, r0
 8000ee4:	407d      	eors	r5, r7
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	b2ea      	uxtb	r2, r5
 8000eea:	e724      	b.n	8000d36 <__aeabi_fmul+0x62>
 8000eec:	464a      	mov	r2, r9
 8000eee:	3302      	adds	r3, #2
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	002a      	movs	r2, r5
 8000ef4:	407a      	eors	r2, r7
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	2b0a      	cmp	r3, #10
 8000efa:	dc92      	bgt.n	8000e22 <__aeabi_fmul+0x14e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	0015      	movs	r5, r2
 8000f00:	2900      	cmp	r1, #0
 8000f02:	d026      	beq.n	8000f52 <__aeabi_fmul+0x27e>
 8000f04:	4699      	mov	r9, r3
 8000f06:	2002      	movs	r0, #2
 8000f08:	e719      	b.n	8000d3e <__aeabi_fmul+0x6a>
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	4699      	mov	r9, r3
 8000f0e:	3b09      	subs	r3, #9
 8000f10:	24ff      	movs	r4, #255	@ 0xff
 8000f12:	469a      	mov	sl, r3
 8000f14:	e6f6      	b.n	8000d04 <__aeabi_fmul+0x30>
 8000f16:	0015      	movs	r5, r2
 8000f18:	0021      	movs	r1, r4
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b1b      	cmp	r3, #27
 8000f20:	dd00      	ble.n	8000f24 <__aeabi_fmul+0x250>
 8000f22:	e786      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f24:	319e      	adds	r1, #158	@ 0x9e
 8000f26:	0032      	movs	r2, r6
 8000f28:	408e      	lsls	r6, r1
 8000f2a:	40da      	lsrs	r2, r3
 8000f2c:	1e73      	subs	r3, r6, #1
 8000f2e:	419e      	sbcs	r6, r3
 8000f30:	4332      	orrs	r2, r6
 8000f32:	0753      	lsls	r3, r2, #29
 8000f34:	d004      	beq.n	8000f40 <__aeabi_fmul+0x26c>
 8000f36:	230f      	movs	r3, #15
 8000f38:	4013      	ands	r3, r2
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fmul+0x26c>
 8000f3e:	3204      	adds	r2, #4
 8000f40:	0153      	lsls	r3, r2, #5
 8000f42:	d510      	bpl.n	8000f66 <__aeabi_fmul+0x292>
 8000f44:	2301      	movs	r3, #1
 8000f46:	2200      	movs	r2, #0
 8000f48:	e792      	b.n	8000e70 <__aeabi_fmul+0x19c>
 8000f4a:	003d      	movs	r5, r7
 8000f4c:	4646      	mov	r6, r8
 8000f4e:	4682      	mov	sl, r0
 8000f50:	e767      	b.n	8000e22 <__aeabi_fmul+0x14e>
 8000f52:	23ff      	movs	r3, #255	@ 0xff
 8000f54:	2200      	movs	r2, #0
 8000f56:	e78b      	b.n	8000e70 <__aeabi_fmul+0x19c>
 8000f58:	2280      	movs	r2, #128	@ 0x80
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	03d2      	lsls	r2, r2, #15
 8000f5e:	e786      	b.n	8000e6e <__aeabi_fmul+0x19a>
 8000f60:	003d      	movs	r5, r7
 8000f62:	431a      	orrs	r2, r3
 8000f64:	e783      	b.n	8000e6e <__aeabi_fmul+0x19a>
 8000f66:	0192      	lsls	r2, r2, #6
 8000f68:	2300      	movs	r3, #0
 8000f6a:	0a52      	lsrs	r2, r2, #9
 8000f6c:	e780      	b.n	8000e70 <__aeabi_fmul+0x19c>
 8000f6e:	003d      	movs	r5, r7
 8000f70:	4646      	mov	r6, r8
 8000f72:	e777      	b.n	8000e64 <__aeabi_fmul+0x190>
 8000f74:	002a      	movs	r2, r5
 8000f76:	2301      	movs	r3, #1
 8000f78:	407a      	eors	r2, r7
 8000f7a:	408b      	lsls	r3, r1
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	e6e9      	b.n	8000d56 <__aeabi_fmul+0x82>
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	f7ffffff 	.word	0xf7ffffff

08000f88 <__aeabi_fsub>:
 8000f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8a:	4647      	mov	r7, r8
 8000f8c:	46ce      	mov	lr, r9
 8000f8e:	0243      	lsls	r3, r0, #9
 8000f90:	b580      	push	{r7, lr}
 8000f92:	0a5f      	lsrs	r7, r3, #9
 8000f94:	099b      	lsrs	r3, r3, #6
 8000f96:	0045      	lsls	r5, r0, #1
 8000f98:	004a      	lsls	r2, r1, #1
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	024b      	lsls	r3, r1, #9
 8000f9e:	0fc4      	lsrs	r4, r0, #31
 8000fa0:	0fce      	lsrs	r6, r1, #31
 8000fa2:	0e2d      	lsrs	r5, r5, #24
 8000fa4:	0a58      	lsrs	r0, r3, #9
 8000fa6:	0e12      	lsrs	r2, r2, #24
 8000fa8:	0999      	lsrs	r1, r3, #6
 8000faa:	2aff      	cmp	r2, #255	@ 0xff
 8000fac:	d06b      	beq.n	8001086 <__aeabi_fsub+0xfe>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	405e      	eors	r6, r3
 8000fb2:	1aab      	subs	r3, r5, r2
 8000fb4:	42b4      	cmp	r4, r6
 8000fb6:	d04b      	beq.n	8001050 <__aeabi_fsub+0xc8>
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dc00      	bgt.n	8000fbe <__aeabi_fsub+0x36>
 8000fbc:	e0ff      	b.n	80011be <__aeabi_fsub+0x236>
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x3c>
 8000fc2:	e088      	b.n	80010d6 <__aeabi_fsub+0x14e>
 8000fc4:	2dff      	cmp	r5, #255	@ 0xff
 8000fc6:	d100      	bne.n	8000fca <__aeabi_fsub+0x42>
 8000fc8:	e0ef      	b.n	80011aa <__aeabi_fsub+0x222>
 8000fca:	2280      	movs	r2, #128	@ 0x80
 8000fcc:	04d2      	lsls	r2, r2, #19
 8000fce:	4311      	orrs	r1, r2
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	2b1b      	cmp	r3, #27
 8000fd4:	dc08      	bgt.n	8000fe8 <__aeabi_fsub+0x60>
 8000fd6:	0008      	movs	r0, r1
 8000fd8:	2220      	movs	r2, #32
 8000fda:	40d8      	lsrs	r0, r3
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	4099      	lsls	r1, r3
 8000fe0:	000b      	movs	r3, r1
 8000fe2:	1e5a      	subs	r2, r3, #1
 8000fe4:	4193      	sbcs	r3, r2
 8000fe6:	4318      	orrs	r0, r3
 8000fe8:	4663      	mov	r3, ip
 8000fea:	1a1b      	subs	r3, r3, r0
 8000fec:	469c      	mov	ip, r3
 8000fee:	4663      	mov	r3, ip
 8000ff0:	015b      	lsls	r3, r3, #5
 8000ff2:	d400      	bmi.n	8000ff6 <__aeabi_fsub+0x6e>
 8000ff4:	e0cd      	b.n	8001192 <__aeabi_fsub+0x20a>
 8000ff6:	4663      	mov	r3, ip
 8000ff8:	019f      	lsls	r7, r3, #6
 8000ffa:	09bf      	lsrs	r7, r7, #6
 8000ffc:	0038      	movs	r0, r7
 8000ffe:	f002 fa7f 	bl	8003500 <__clzsi2>
 8001002:	003b      	movs	r3, r7
 8001004:	3805      	subs	r0, #5
 8001006:	4083      	lsls	r3, r0
 8001008:	4285      	cmp	r5, r0
 800100a:	dc00      	bgt.n	800100e <__aeabi_fsub+0x86>
 800100c:	e0a2      	b.n	8001154 <__aeabi_fsub+0x1cc>
 800100e:	4ab7      	ldr	r2, [pc, #732]	@ (80012ec <__aeabi_fsub+0x364>)
 8001010:	1a2d      	subs	r5, r5, r0
 8001012:	401a      	ands	r2, r3
 8001014:	4694      	mov	ip, r2
 8001016:	075a      	lsls	r2, r3, #29
 8001018:	d100      	bne.n	800101c <__aeabi_fsub+0x94>
 800101a:	e0c3      	b.n	80011a4 <__aeabi_fsub+0x21c>
 800101c:	220f      	movs	r2, #15
 800101e:	4013      	ands	r3, r2
 8001020:	2b04      	cmp	r3, #4
 8001022:	d100      	bne.n	8001026 <__aeabi_fsub+0x9e>
 8001024:	e0be      	b.n	80011a4 <__aeabi_fsub+0x21c>
 8001026:	2304      	movs	r3, #4
 8001028:	4698      	mov	r8, r3
 800102a:	44c4      	add	ip, r8
 800102c:	4663      	mov	r3, ip
 800102e:	015b      	lsls	r3, r3, #5
 8001030:	d400      	bmi.n	8001034 <__aeabi_fsub+0xac>
 8001032:	e0b7      	b.n	80011a4 <__aeabi_fsub+0x21c>
 8001034:	1c68      	adds	r0, r5, #1
 8001036:	2dfe      	cmp	r5, #254	@ 0xfe
 8001038:	d000      	beq.n	800103c <__aeabi_fsub+0xb4>
 800103a:	e0a5      	b.n	8001188 <__aeabi_fsub+0x200>
 800103c:	20ff      	movs	r0, #255	@ 0xff
 800103e:	2200      	movs	r2, #0
 8001040:	05c0      	lsls	r0, r0, #23
 8001042:	4310      	orrs	r0, r2
 8001044:	07e4      	lsls	r4, r4, #31
 8001046:	4320      	orrs	r0, r4
 8001048:	bcc0      	pop	{r6, r7}
 800104a:	46b9      	mov	r9, r7
 800104c:	46b0      	mov	r8, r6
 800104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001050:	2b00      	cmp	r3, #0
 8001052:	dc00      	bgt.n	8001056 <__aeabi_fsub+0xce>
 8001054:	e1eb      	b.n	800142e <__aeabi_fsub+0x4a6>
 8001056:	2a00      	cmp	r2, #0
 8001058:	d046      	beq.n	80010e8 <__aeabi_fsub+0x160>
 800105a:	2dff      	cmp	r5, #255	@ 0xff
 800105c:	d100      	bne.n	8001060 <__aeabi_fsub+0xd8>
 800105e:	e0a4      	b.n	80011aa <__aeabi_fsub+0x222>
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	04d2      	lsls	r2, r2, #19
 8001064:	4311      	orrs	r1, r2
 8001066:	2b1b      	cmp	r3, #27
 8001068:	dc00      	bgt.n	800106c <__aeabi_fsub+0xe4>
 800106a:	e0fb      	b.n	8001264 <__aeabi_fsub+0x2dc>
 800106c:	2305      	movs	r3, #5
 800106e:	4698      	mov	r8, r3
 8001070:	002b      	movs	r3, r5
 8001072:	44c4      	add	ip, r8
 8001074:	4662      	mov	r2, ip
 8001076:	08d7      	lsrs	r7, r2, #3
 8001078:	2bff      	cmp	r3, #255	@ 0xff
 800107a:	d100      	bne.n	800107e <__aeabi_fsub+0xf6>
 800107c:	e095      	b.n	80011aa <__aeabi_fsub+0x222>
 800107e:	027a      	lsls	r2, r7, #9
 8001080:	0a52      	lsrs	r2, r2, #9
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	e7dc      	b.n	8001040 <__aeabi_fsub+0xb8>
 8001086:	002b      	movs	r3, r5
 8001088:	3bff      	subs	r3, #255	@ 0xff
 800108a:	4699      	mov	r9, r3
 800108c:	2900      	cmp	r1, #0
 800108e:	d118      	bne.n	80010c2 <__aeabi_fsub+0x13a>
 8001090:	2301      	movs	r3, #1
 8001092:	405e      	eors	r6, r3
 8001094:	42b4      	cmp	r4, r6
 8001096:	d100      	bne.n	800109a <__aeabi_fsub+0x112>
 8001098:	e0ca      	b.n	8001230 <__aeabi_fsub+0x2a8>
 800109a:	464b      	mov	r3, r9
 800109c:	2b00      	cmp	r3, #0
 800109e:	d02d      	beq.n	80010fc <__aeabi_fsub+0x174>
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d000      	beq.n	80010a6 <__aeabi_fsub+0x11e>
 80010a4:	e13c      	b.n	8001320 <__aeabi_fsub+0x398>
 80010a6:	23ff      	movs	r3, #255	@ 0xff
 80010a8:	4664      	mov	r4, ip
 80010aa:	2c00      	cmp	r4, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x128>
 80010ae:	e15f      	b.n	8001370 <__aeabi_fsub+0x3e8>
 80010b0:	1e5d      	subs	r5, r3, #1
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d100      	bne.n	80010b8 <__aeabi_fsub+0x130>
 80010b6:	e174      	b.n	80013a2 <__aeabi_fsub+0x41a>
 80010b8:	0034      	movs	r4, r6
 80010ba:	2bff      	cmp	r3, #255	@ 0xff
 80010bc:	d074      	beq.n	80011a8 <__aeabi_fsub+0x220>
 80010be:	002b      	movs	r3, r5
 80010c0:	e103      	b.n	80012ca <__aeabi_fsub+0x342>
 80010c2:	42b4      	cmp	r4, r6
 80010c4:	d100      	bne.n	80010c8 <__aeabi_fsub+0x140>
 80010c6:	e09c      	b.n	8001202 <__aeabi_fsub+0x27a>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d017      	beq.n	80010fc <__aeabi_fsub+0x174>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d0ea      	beq.n	80010a6 <__aeabi_fsub+0x11e>
 80010d0:	0007      	movs	r7, r0
 80010d2:	0034      	movs	r4, r6
 80010d4:	e06c      	b.n	80011b0 <__aeabi_fsub+0x228>
 80010d6:	2900      	cmp	r1, #0
 80010d8:	d0cc      	beq.n	8001074 <__aeabi_fsub+0xec>
 80010da:	1e5a      	subs	r2, r3, #1
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d02b      	beq.n	8001138 <__aeabi_fsub+0x1b0>
 80010e0:	2bff      	cmp	r3, #255	@ 0xff
 80010e2:	d062      	beq.n	80011aa <__aeabi_fsub+0x222>
 80010e4:	0013      	movs	r3, r2
 80010e6:	e773      	b.n	8000fd0 <__aeabi_fsub+0x48>
 80010e8:	2900      	cmp	r1, #0
 80010ea:	d0c3      	beq.n	8001074 <__aeabi_fsub+0xec>
 80010ec:	1e5a      	subs	r2, r3, #1
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x16c>
 80010f2:	e11e      	b.n	8001332 <__aeabi_fsub+0x3aa>
 80010f4:	2bff      	cmp	r3, #255	@ 0xff
 80010f6:	d058      	beq.n	80011aa <__aeabi_fsub+0x222>
 80010f8:	0013      	movs	r3, r2
 80010fa:	e7b4      	b.n	8001066 <__aeabi_fsub+0xde>
 80010fc:	22fe      	movs	r2, #254	@ 0xfe
 80010fe:	1c6b      	adds	r3, r5, #1
 8001100:	421a      	tst	r2, r3
 8001102:	d10d      	bne.n	8001120 <__aeabi_fsub+0x198>
 8001104:	2d00      	cmp	r5, #0
 8001106:	d060      	beq.n	80011ca <__aeabi_fsub+0x242>
 8001108:	4663      	mov	r3, ip
 800110a:	2b00      	cmp	r3, #0
 800110c:	d000      	beq.n	8001110 <__aeabi_fsub+0x188>
 800110e:	e120      	b.n	8001352 <__aeabi_fsub+0x3ca>
 8001110:	2900      	cmp	r1, #0
 8001112:	d000      	beq.n	8001116 <__aeabi_fsub+0x18e>
 8001114:	e128      	b.n	8001368 <__aeabi_fsub+0x3e0>
 8001116:	2280      	movs	r2, #128	@ 0x80
 8001118:	2400      	movs	r4, #0
 800111a:	20ff      	movs	r0, #255	@ 0xff
 800111c:	03d2      	lsls	r2, r2, #15
 800111e:	e78f      	b.n	8001040 <__aeabi_fsub+0xb8>
 8001120:	4663      	mov	r3, ip
 8001122:	1a5f      	subs	r7, r3, r1
 8001124:	017b      	lsls	r3, r7, #5
 8001126:	d500      	bpl.n	800112a <__aeabi_fsub+0x1a2>
 8001128:	e0fe      	b.n	8001328 <__aeabi_fsub+0x3a0>
 800112a:	2f00      	cmp	r7, #0
 800112c:	d000      	beq.n	8001130 <__aeabi_fsub+0x1a8>
 800112e:	e765      	b.n	8000ffc <__aeabi_fsub+0x74>
 8001130:	2400      	movs	r4, #0
 8001132:	2000      	movs	r0, #0
 8001134:	2200      	movs	r2, #0
 8001136:	e783      	b.n	8001040 <__aeabi_fsub+0xb8>
 8001138:	4663      	mov	r3, ip
 800113a:	1a59      	subs	r1, r3, r1
 800113c:	014b      	lsls	r3, r1, #5
 800113e:	d400      	bmi.n	8001142 <__aeabi_fsub+0x1ba>
 8001140:	e119      	b.n	8001376 <__aeabi_fsub+0x3ee>
 8001142:	018f      	lsls	r7, r1, #6
 8001144:	09bf      	lsrs	r7, r7, #6
 8001146:	0038      	movs	r0, r7
 8001148:	f002 f9da 	bl	8003500 <__clzsi2>
 800114c:	003b      	movs	r3, r7
 800114e:	3805      	subs	r0, #5
 8001150:	4083      	lsls	r3, r0
 8001152:	2501      	movs	r5, #1
 8001154:	2220      	movs	r2, #32
 8001156:	1b40      	subs	r0, r0, r5
 8001158:	3001      	adds	r0, #1
 800115a:	1a12      	subs	r2, r2, r0
 800115c:	0019      	movs	r1, r3
 800115e:	4093      	lsls	r3, r2
 8001160:	40c1      	lsrs	r1, r0
 8001162:	1e5a      	subs	r2, r3, #1
 8001164:	4193      	sbcs	r3, r2
 8001166:	4319      	orrs	r1, r3
 8001168:	468c      	mov	ip, r1
 800116a:	1e0b      	subs	r3, r1, #0
 800116c:	d0e1      	beq.n	8001132 <__aeabi_fsub+0x1aa>
 800116e:	075b      	lsls	r3, r3, #29
 8001170:	d100      	bne.n	8001174 <__aeabi_fsub+0x1ec>
 8001172:	e152      	b.n	800141a <__aeabi_fsub+0x492>
 8001174:	230f      	movs	r3, #15
 8001176:	2500      	movs	r5, #0
 8001178:	400b      	ands	r3, r1
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fsub+0x1f8>
 800117e:	e752      	b.n	8001026 <__aeabi_fsub+0x9e>
 8001180:	2001      	movs	r0, #1
 8001182:	014a      	lsls	r2, r1, #5
 8001184:	d400      	bmi.n	8001188 <__aeabi_fsub+0x200>
 8001186:	e092      	b.n	80012ae <__aeabi_fsub+0x326>
 8001188:	b2c0      	uxtb	r0, r0
 800118a:	4663      	mov	r3, ip
 800118c:	019a      	lsls	r2, r3, #6
 800118e:	0a52      	lsrs	r2, r2, #9
 8001190:	e756      	b.n	8001040 <__aeabi_fsub+0xb8>
 8001192:	4663      	mov	r3, ip
 8001194:	075b      	lsls	r3, r3, #29
 8001196:	d005      	beq.n	80011a4 <__aeabi_fsub+0x21c>
 8001198:	230f      	movs	r3, #15
 800119a:	4662      	mov	r2, ip
 800119c:	4013      	ands	r3, r2
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d000      	beq.n	80011a4 <__aeabi_fsub+0x21c>
 80011a2:	e740      	b.n	8001026 <__aeabi_fsub+0x9e>
 80011a4:	002b      	movs	r3, r5
 80011a6:	e765      	b.n	8001074 <__aeabi_fsub+0xec>
 80011a8:	0007      	movs	r7, r0
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x228>
 80011ae:	e745      	b.n	800103c <__aeabi_fsub+0xb4>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	433a      	orrs	r2, r7
 80011b6:	0252      	lsls	r2, r2, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a52      	lsrs	r2, r2, #9
 80011bc:	e740      	b.n	8001040 <__aeabi_fsub+0xb8>
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d179      	bne.n	80012b6 <__aeabi_fsub+0x32e>
 80011c2:	22fe      	movs	r2, #254	@ 0xfe
 80011c4:	1c6b      	adds	r3, r5, #1
 80011c6:	421a      	tst	r2, r3
 80011c8:	d1aa      	bne.n	8001120 <__aeabi_fsub+0x198>
 80011ca:	4663      	mov	r3, ip
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d100      	bne.n	80011d2 <__aeabi_fsub+0x24a>
 80011d0:	e0f5      	b.n	80013be <__aeabi_fsub+0x436>
 80011d2:	2900      	cmp	r1, #0
 80011d4:	d100      	bne.n	80011d8 <__aeabi_fsub+0x250>
 80011d6:	e0d1      	b.n	800137c <__aeabi_fsub+0x3f4>
 80011d8:	1a5f      	subs	r7, r3, r1
 80011da:	2380      	movs	r3, #128	@ 0x80
 80011dc:	04db      	lsls	r3, r3, #19
 80011de:	421f      	tst	r7, r3
 80011e0:	d100      	bne.n	80011e4 <__aeabi_fsub+0x25c>
 80011e2:	e10e      	b.n	8001402 <__aeabi_fsub+0x47a>
 80011e4:	4662      	mov	r2, ip
 80011e6:	2401      	movs	r4, #1
 80011e8:	1a8a      	subs	r2, r1, r2
 80011ea:	4694      	mov	ip, r2
 80011ec:	2000      	movs	r0, #0
 80011ee:	4034      	ands	r4, r6
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_fsub+0x26e>
 80011f4:	e724      	b.n	8001040 <__aeabi_fsub+0xb8>
 80011f6:	2001      	movs	r0, #1
 80011f8:	421a      	tst	r2, r3
 80011fa:	d1c6      	bne.n	800118a <__aeabi_fsub+0x202>
 80011fc:	2300      	movs	r3, #0
 80011fe:	08d7      	lsrs	r7, r2, #3
 8001200:	e73d      	b.n	800107e <__aeabi_fsub+0xf6>
 8001202:	2b00      	cmp	r3, #0
 8001204:	d017      	beq.n	8001236 <__aeabi_fsub+0x2ae>
 8001206:	2d00      	cmp	r5, #0
 8001208:	d000      	beq.n	800120c <__aeabi_fsub+0x284>
 800120a:	e0af      	b.n	800136c <__aeabi_fsub+0x3e4>
 800120c:	23ff      	movs	r3, #255	@ 0xff
 800120e:	4665      	mov	r5, ip
 8001210:	2d00      	cmp	r5, #0
 8001212:	d100      	bne.n	8001216 <__aeabi_fsub+0x28e>
 8001214:	e0ad      	b.n	8001372 <__aeabi_fsub+0x3ea>
 8001216:	1e5e      	subs	r6, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	d100      	bne.n	800121e <__aeabi_fsub+0x296>
 800121c:	e089      	b.n	8001332 <__aeabi_fsub+0x3aa>
 800121e:	2bff      	cmp	r3, #255	@ 0xff
 8001220:	d0c2      	beq.n	80011a8 <__aeabi_fsub+0x220>
 8001222:	2e1b      	cmp	r6, #27
 8001224:	dc00      	bgt.n	8001228 <__aeabi_fsub+0x2a0>
 8001226:	e0ab      	b.n	8001380 <__aeabi_fsub+0x3f8>
 8001228:	1d4b      	adds	r3, r1, #5
 800122a:	469c      	mov	ip, r3
 800122c:	0013      	movs	r3, r2
 800122e:	e721      	b.n	8001074 <__aeabi_fsub+0xec>
 8001230:	464b      	mov	r3, r9
 8001232:	2b00      	cmp	r3, #0
 8001234:	d170      	bne.n	8001318 <__aeabi_fsub+0x390>
 8001236:	22fe      	movs	r2, #254	@ 0xfe
 8001238:	1c6b      	adds	r3, r5, #1
 800123a:	421a      	tst	r2, r3
 800123c:	d15e      	bne.n	80012fc <__aeabi_fsub+0x374>
 800123e:	2d00      	cmp	r5, #0
 8001240:	d000      	beq.n	8001244 <__aeabi_fsub+0x2bc>
 8001242:	e0c3      	b.n	80013cc <__aeabi_fsub+0x444>
 8001244:	4663      	mov	r3, ip
 8001246:	2b00      	cmp	r3, #0
 8001248:	d100      	bne.n	800124c <__aeabi_fsub+0x2c4>
 800124a:	e0d0      	b.n	80013ee <__aeabi_fsub+0x466>
 800124c:	2900      	cmp	r1, #0
 800124e:	d100      	bne.n	8001252 <__aeabi_fsub+0x2ca>
 8001250:	e094      	b.n	800137c <__aeabi_fsub+0x3f4>
 8001252:	000a      	movs	r2, r1
 8001254:	4462      	add	r2, ip
 8001256:	0153      	lsls	r3, r2, #5
 8001258:	d400      	bmi.n	800125c <__aeabi_fsub+0x2d4>
 800125a:	e0d8      	b.n	800140e <__aeabi_fsub+0x486>
 800125c:	0192      	lsls	r2, r2, #6
 800125e:	2001      	movs	r0, #1
 8001260:	0a52      	lsrs	r2, r2, #9
 8001262:	e6ed      	b.n	8001040 <__aeabi_fsub+0xb8>
 8001264:	0008      	movs	r0, r1
 8001266:	2220      	movs	r2, #32
 8001268:	40d8      	lsrs	r0, r3
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	4099      	lsls	r1, r3
 800126e:	000b      	movs	r3, r1
 8001270:	1e5a      	subs	r2, r3, #1
 8001272:	4193      	sbcs	r3, r2
 8001274:	4303      	orrs	r3, r0
 8001276:	449c      	add	ip, r3
 8001278:	4663      	mov	r3, ip
 800127a:	015b      	lsls	r3, r3, #5
 800127c:	d589      	bpl.n	8001192 <__aeabi_fsub+0x20a>
 800127e:	3501      	adds	r5, #1
 8001280:	2dff      	cmp	r5, #255	@ 0xff
 8001282:	d100      	bne.n	8001286 <__aeabi_fsub+0x2fe>
 8001284:	e6da      	b.n	800103c <__aeabi_fsub+0xb4>
 8001286:	4662      	mov	r2, ip
 8001288:	2301      	movs	r3, #1
 800128a:	4919      	ldr	r1, [pc, #100]	@ (80012f0 <__aeabi_fsub+0x368>)
 800128c:	4013      	ands	r3, r2
 800128e:	0852      	lsrs	r2, r2, #1
 8001290:	400a      	ands	r2, r1
 8001292:	431a      	orrs	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	4694      	mov	ip, r2
 8001298:	075b      	lsls	r3, r3, #29
 800129a:	d004      	beq.n	80012a6 <__aeabi_fsub+0x31e>
 800129c:	230f      	movs	r3, #15
 800129e:	4013      	ands	r3, r2
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d000      	beq.n	80012a6 <__aeabi_fsub+0x31e>
 80012a4:	e6bf      	b.n	8001026 <__aeabi_fsub+0x9e>
 80012a6:	4663      	mov	r3, ip
 80012a8:	015b      	lsls	r3, r3, #5
 80012aa:	d500      	bpl.n	80012ae <__aeabi_fsub+0x326>
 80012ac:	e6c2      	b.n	8001034 <__aeabi_fsub+0xac>
 80012ae:	4663      	mov	r3, ip
 80012b0:	08df      	lsrs	r7, r3, #3
 80012b2:	002b      	movs	r3, r5
 80012b4:	e6e3      	b.n	800107e <__aeabi_fsub+0xf6>
 80012b6:	1b53      	subs	r3, r2, r5
 80012b8:	2d00      	cmp	r5, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_fsub+0x336>
 80012bc:	e6f4      	b.n	80010a8 <__aeabi_fsub+0x120>
 80012be:	2080      	movs	r0, #128	@ 0x80
 80012c0:	4664      	mov	r4, ip
 80012c2:	04c0      	lsls	r0, r0, #19
 80012c4:	4304      	orrs	r4, r0
 80012c6:	46a4      	mov	ip, r4
 80012c8:	0034      	movs	r4, r6
 80012ca:	2001      	movs	r0, #1
 80012cc:	2b1b      	cmp	r3, #27
 80012ce:	dc09      	bgt.n	80012e4 <__aeabi_fsub+0x35c>
 80012d0:	2520      	movs	r5, #32
 80012d2:	4660      	mov	r0, ip
 80012d4:	40d8      	lsrs	r0, r3
 80012d6:	1aeb      	subs	r3, r5, r3
 80012d8:	4665      	mov	r5, ip
 80012da:	409d      	lsls	r5, r3
 80012dc:	002b      	movs	r3, r5
 80012de:	1e5d      	subs	r5, r3, #1
 80012e0:	41ab      	sbcs	r3, r5
 80012e2:	4318      	orrs	r0, r3
 80012e4:	1a0b      	subs	r3, r1, r0
 80012e6:	469c      	mov	ip, r3
 80012e8:	0015      	movs	r5, r2
 80012ea:	e680      	b.n	8000fee <__aeabi_fsub+0x66>
 80012ec:	fbffffff 	.word	0xfbffffff
 80012f0:	7dffffff 	.word	0x7dffffff
 80012f4:	22fe      	movs	r2, #254	@ 0xfe
 80012f6:	1c6b      	adds	r3, r5, #1
 80012f8:	4213      	tst	r3, r2
 80012fa:	d0a3      	beq.n	8001244 <__aeabi_fsub+0x2bc>
 80012fc:	2bff      	cmp	r3, #255	@ 0xff
 80012fe:	d100      	bne.n	8001302 <__aeabi_fsub+0x37a>
 8001300:	e69c      	b.n	800103c <__aeabi_fsub+0xb4>
 8001302:	4461      	add	r1, ip
 8001304:	0849      	lsrs	r1, r1, #1
 8001306:	074a      	lsls	r2, r1, #29
 8001308:	d049      	beq.n	800139e <__aeabi_fsub+0x416>
 800130a:	220f      	movs	r2, #15
 800130c:	400a      	ands	r2, r1
 800130e:	2a04      	cmp	r2, #4
 8001310:	d045      	beq.n	800139e <__aeabi_fsub+0x416>
 8001312:	1d0a      	adds	r2, r1, #4
 8001314:	4694      	mov	ip, r2
 8001316:	e6ad      	b.n	8001074 <__aeabi_fsub+0xec>
 8001318:	2d00      	cmp	r5, #0
 800131a:	d100      	bne.n	800131e <__aeabi_fsub+0x396>
 800131c:	e776      	b.n	800120c <__aeabi_fsub+0x284>
 800131e:	e68d      	b.n	800103c <__aeabi_fsub+0xb4>
 8001320:	0034      	movs	r4, r6
 8001322:	20ff      	movs	r0, #255	@ 0xff
 8001324:	2200      	movs	r2, #0
 8001326:	e68b      	b.n	8001040 <__aeabi_fsub+0xb8>
 8001328:	4663      	mov	r3, ip
 800132a:	2401      	movs	r4, #1
 800132c:	1acf      	subs	r7, r1, r3
 800132e:	4034      	ands	r4, r6
 8001330:	e664      	b.n	8000ffc <__aeabi_fsub+0x74>
 8001332:	4461      	add	r1, ip
 8001334:	014b      	lsls	r3, r1, #5
 8001336:	d56d      	bpl.n	8001414 <__aeabi_fsub+0x48c>
 8001338:	0848      	lsrs	r0, r1, #1
 800133a:	4944      	ldr	r1, [pc, #272]	@ (800144c <__aeabi_fsub+0x4c4>)
 800133c:	4001      	ands	r1, r0
 800133e:	0743      	lsls	r3, r0, #29
 8001340:	d02c      	beq.n	800139c <__aeabi_fsub+0x414>
 8001342:	230f      	movs	r3, #15
 8001344:	4003      	ands	r3, r0
 8001346:	2b04      	cmp	r3, #4
 8001348:	d028      	beq.n	800139c <__aeabi_fsub+0x414>
 800134a:	1d0b      	adds	r3, r1, #4
 800134c:	469c      	mov	ip, r3
 800134e:	2302      	movs	r3, #2
 8001350:	e690      	b.n	8001074 <__aeabi_fsub+0xec>
 8001352:	2900      	cmp	r1, #0
 8001354:	d100      	bne.n	8001358 <__aeabi_fsub+0x3d0>
 8001356:	e72b      	b.n	80011b0 <__aeabi_fsub+0x228>
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	03db      	lsls	r3, r3, #15
 800135c:	429f      	cmp	r7, r3
 800135e:	d200      	bcs.n	8001362 <__aeabi_fsub+0x3da>
 8001360:	e726      	b.n	80011b0 <__aeabi_fsub+0x228>
 8001362:	4298      	cmp	r0, r3
 8001364:	d300      	bcc.n	8001368 <__aeabi_fsub+0x3e0>
 8001366:	e723      	b.n	80011b0 <__aeabi_fsub+0x228>
 8001368:	2401      	movs	r4, #1
 800136a:	4034      	ands	r4, r6
 800136c:	0007      	movs	r7, r0
 800136e:	e71f      	b.n	80011b0 <__aeabi_fsub+0x228>
 8001370:	0034      	movs	r4, r6
 8001372:	468c      	mov	ip, r1
 8001374:	e67e      	b.n	8001074 <__aeabi_fsub+0xec>
 8001376:	2301      	movs	r3, #1
 8001378:	08cf      	lsrs	r7, r1, #3
 800137a:	e680      	b.n	800107e <__aeabi_fsub+0xf6>
 800137c:	2300      	movs	r3, #0
 800137e:	e67e      	b.n	800107e <__aeabi_fsub+0xf6>
 8001380:	2020      	movs	r0, #32
 8001382:	4665      	mov	r5, ip
 8001384:	1b80      	subs	r0, r0, r6
 8001386:	4085      	lsls	r5, r0
 8001388:	4663      	mov	r3, ip
 800138a:	0028      	movs	r0, r5
 800138c:	40f3      	lsrs	r3, r6
 800138e:	1e45      	subs	r5, r0, #1
 8001390:	41a8      	sbcs	r0, r5
 8001392:	4303      	orrs	r3, r0
 8001394:	469c      	mov	ip, r3
 8001396:	0015      	movs	r5, r2
 8001398:	448c      	add	ip, r1
 800139a:	e76d      	b.n	8001278 <__aeabi_fsub+0x2f0>
 800139c:	2302      	movs	r3, #2
 800139e:	08cf      	lsrs	r7, r1, #3
 80013a0:	e66d      	b.n	800107e <__aeabi_fsub+0xf6>
 80013a2:	1b0f      	subs	r7, r1, r4
 80013a4:	017b      	lsls	r3, r7, #5
 80013a6:	d528      	bpl.n	80013fa <__aeabi_fsub+0x472>
 80013a8:	01bf      	lsls	r7, r7, #6
 80013aa:	09bf      	lsrs	r7, r7, #6
 80013ac:	0038      	movs	r0, r7
 80013ae:	f002 f8a7 	bl	8003500 <__clzsi2>
 80013b2:	003b      	movs	r3, r7
 80013b4:	3805      	subs	r0, #5
 80013b6:	4083      	lsls	r3, r0
 80013b8:	0034      	movs	r4, r6
 80013ba:	2501      	movs	r5, #1
 80013bc:	e6ca      	b.n	8001154 <__aeabi_fsub+0x1cc>
 80013be:	2900      	cmp	r1, #0
 80013c0:	d100      	bne.n	80013c4 <__aeabi_fsub+0x43c>
 80013c2:	e6b5      	b.n	8001130 <__aeabi_fsub+0x1a8>
 80013c4:	2401      	movs	r4, #1
 80013c6:	0007      	movs	r7, r0
 80013c8:	4034      	ands	r4, r6
 80013ca:	e658      	b.n	800107e <__aeabi_fsub+0xf6>
 80013cc:	4663      	mov	r3, ip
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d100      	bne.n	80013d4 <__aeabi_fsub+0x44c>
 80013d2:	e6e9      	b.n	80011a8 <__aeabi_fsub+0x220>
 80013d4:	2900      	cmp	r1, #0
 80013d6:	d100      	bne.n	80013da <__aeabi_fsub+0x452>
 80013d8:	e6ea      	b.n	80011b0 <__aeabi_fsub+0x228>
 80013da:	2380      	movs	r3, #128	@ 0x80
 80013dc:	03db      	lsls	r3, r3, #15
 80013de:	429f      	cmp	r7, r3
 80013e0:	d200      	bcs.n	80013e4 <__aeabi_fsub+0x45c>
 80013e2:	e6e5      	b.n	80011b0 <__aeabi_fsub+0x228>
 80013e4:	4298      	cmp	r0, r3
 80013e6:	d300      	bcc.n	80013ea <__aeabi_fsub+0x462>
 80013e8:	e6e2      	b.n	80011b0 <__aeabi_fsub+0x228>
 80013ea:	0007      	movs	r7, r0
 80013ec:	e6e0      	b.n	80011b0 <__aeabi_fsub+0x228>
 80013ee:	2900      	cmp	r1, #0
 80013f0:	d100      	bne.n	80013f4 <__aeabi_fsub+0x46c>
 80013f2:	e69e      	b.n	8001132 <__aeabi_fsub+0x1aa>
 80013f4:	2300      	movs	r3, #0
 80013f6:	08cf      	lsrs	r7, r1, #3
 80013f8:	e641      	b.n	800107e <__aeabi_fsub+0xf6>
 80013fa:	0034      	movs	r4, r6
 80013fc:	2301      	movs	r3, #1
 80013fe:	08ff      	lsrs	r7, r7, #3
 8001400:	e63d      	b.n	800107e <__aeabi_fsub+0xf6>
 8001402:	2f00      	cmp	r7, #0
 8001404:	d100      	bne.n	8001408 <__aeabi_fsub+0x480>
 8001406:	e693      	b.n	8001130 <__aeabi_fsub+0x1a8>
 8001408:	2300      	movs	r3, #0
 800140a:	08ff      	lsrs	r7, r7, #3
 800140c:	e637      	b.n	800107e <__aeabi_fsub+0xf6>
 800140e:	2300      	movs	r3, #0
 8001410:	08d7      	lsrs	r7, r2, #3
 8001412:	e634      	b.n	800107e <__aeabi_fsub+0xf6>
 8001414:	2301      	movs	r3, #1
 8001416:	08cf      	lsrs	r7, r1, #3
 8001418:	e631      	b.n	800107e <__aeabi_fsub+0xf6>
 800141a:	2280      	movs	r2, #128	@ 0x80
 800141c:	000b      	movs	r3, r1
 800141e:	04d2      	lsls	r2, r2, #19
 8001420:	2001      	movs	r0, #1
 8001422:	4013      	ands	r3, r2
 8001424:	4211      	tst	r1, r2
 8001426:	d000      	beq.n	800142a <__aeabi_fsub+0x4a2>
 8001428:	e6ae      	b.n	8001188 <__aeabi_fsub+0x200>
 800142a:	08cf      	lsrs	r7, r1, #3
 800142c:	e627      	b.n	800107e <__aeabi_fsub+0xf6>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x4ac>
 8001432:	e75f      	b.n	80012f4 <__aeabi_fsub+0x36c>
 8001434:	1b56      	subs	r6, r2, r5
 8001436:	2d00      	cmp	r5, #0
 8001438:	d101      	bne.n	800143e <__aeabi_fsub+0x4b6>
 800143a:	0033      	movs	r3, r6
 800143c:	e6e7      	b.n	800120e <__aeabi_fsub+0x286>
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	4660      	mov	r0, ip
 8001442:	04db      	lsls	r3, r3, #19
 8001444:	4318      	orrs	r0, r3
 8001446:	4684      	mov	ip, r0
 8001448:	e6eb      	b.n	8001222 <__aeabi_fsub+0x29a>
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	7dffffff 	.word	0x7dffffff

08001450 <__aeabi_f2iz>:
 8001450:	0241      	lsls	r1, r0, #9
 8001452:	0042      	lsls	r2, r0, #1
 8001454:	0fc3      	lsrs	r3, r0, #31
 8001456:	0a49      	lsrs	r1, r1, #9
 8001458:	2000      	movs	r0, #0
 800145a:	0e12      	lsrs	r2, r2, #24
 800145c:	2a7e      	cmp	r2, #126	@ 0x7e
 800145e:	dd03      	ble.n	8001468 <__aeabi_f2iz+0x18>
 8001460:	2a9d      	cmp	r2, #157	@ 0x9d
 8001462:	dd02      	ble.n	800146a <__aeabi_f2iz+0x1a>
 8001464:	4a09      	ldr	r2, [pc, #36]	@ (800148c <__aeabi_f2iz+0x3c>)
 8001466:	1898      	adds	r0, r3, r2
 8001468:	4770      	bx	lr
 800146a:	2080      	movs	r0, #128	@ 0x80
 800146c:	0400      	lsls	r0, r0, #16
 800146e:	4301      	orrs	r1, r0
 8001470:	2a95      	cmp	r2, #149	@ 0x95
 8001472:	dc07      	bgt.n	8001484 <__aeabi_f2iz+0x34>
 8001474:	2096      	movs	r0, #150	@ 0x96
 8001476:	1a82      	subs	r2, r0, r2
 8001478:	40d1      	lsrs	r1, r2
 800147a:	4248      	negs	r0, r1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f3      	bne.n	8001468 <__aeabi_f2iz+0x18>
 8001480:	0008      	movs	r0, r1
 8001482:	e7f1      	b.n	8001468 <__aeabi_f2iz+0x18>
 8001484:	3a96      	subs	r2, #150	@ 0x96
 8001486:	4091      	lsls	r1, r2
 8001488:	e7f7      	b.n	800147a <__aeabi_f2iz+0x2a>
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	7fffffff 	.word	0x7fffffff

08001490 <__aeabi_i2f>:
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	2800      	cmp	r0, #0
 8001494:	d012      	beq.n	80014bc <__aeabi_i2f+0x2c>
 8001496:	17c3      	asrs	r3, r0, #31
 8001498:	18c5      	adds	r5, r0, r3
 800149a:	405d      	eors	r5, r3
 800149c:	0fc4      	lsrs	r4, r0, #31
 800149e:	0028      	movs	r0, r5
 80014a0:	f002 f82e 	bl	8003500 <__clzsi2>
 80014a4:	239e      	movs	r3, #158	@ 0x9e
 80014a6:	1a1b      	subs	r3, r3, r0
 80014a8:	2b96      	cmp	r3, #150	@ 0x96
 80014aa:	dc0f      	bgt.n	80014cc <__aeabi_i2f+0x3c>
 80014ac:	2808      	cmp	r0, #8
 80014ae:	d038      	beq.n	8001522 <__aeabi_i2f+0x92>
 80014b0:	3808      	subs	r0, #8
 80014b2:	4085      	lsls	r5, r0
 80014b4:	026d      	lsls	r5, r5, #9
 80014b6:	0a6d      	lsrs	r5, r5, #9
 80014b8:	b2d8      	uxtb	r0, r3
 80014ba:	e002      	b.n	80014c2 <__aeabi_i2f+0x32>
 80014bc:	2400      	movs	r4, #0
 80014be:	2000      	movs	r0, #0
 80014c0:	2500      	movs	r5, #0
 80014c2:	05c0      	lsls	r0, r0, #23
 80014c4:	4328      	orrs	r0, r5
 80014c6:	07e4      	lsls	r4, r4, #31
 80014c8:	4320      	orrs	r0, r4
 80014ca:	bd70      	pop	{r4, r5, r6, pc}
 80014cc:	2b99      	cmp	r3, #153	@ 0x99
 80014ce:	dc14      	bgt.n	80014fa <__aeabi_i2f+0x6a>
 80014d0:	1f42      	subs	r2, r0, #5
 80014d2:	4095      	lsls	r5, r2
 80014d4:	002a      	movs	r2, r5
 80014d6:	4915      	ldr	r1, [pc, #84]	@ (800152c <__aeabi_i2f+0x9c>)
 80014d8:	4011      	ands	r1, r2
 80014da:	0755      	lsls	r5, r2, #29
 80014dc:	d01c      	beq.n	8001518 <__aeabi_i2f+0x88>
 80014de:	250f      	movs	r5, #15
 80014e0:	402a      	ands	r2, r5
 80014e2:	2a04      	cmp	r2, #4
 80014e4:	d018      	beq.n	8001518 <__aeabi_i2f+0x88>
 80014e6:	3104      	adds	r1, #4
 80014e8:	08ca      	lsrs	r2, r1, #3
 80014ea:	0149      	lsls	r1, r1, #5
 80014ec:	d515      	bpl.n	800151a <__aeabi_i2f+0x8a>
 80014ee:	239f      	movs	r3, #159	@ 0x9f
 80014f0:	0252      	lsls	r2, r2, #9
 80014f2:	1a18      	subs	r0, r3, r0
 80014f4:	0a55      	lsrs	r5, r2, #9
 80014f6:	b2c0      	uxtb	r0, r0
 80014f8:	e7e3      	b.n	80014c2 <__aeabi_i2f+0x32>
 80014fa:	2205      	movs	r2, #5
 80014fc:	0029      	movs	r1, r5
 80014fe:	1a12      	subs	r2, r2, r0
 8001500:	40d1      	lsrs	r1, r2
 8001502:	0002      	movs	r2, r0
 8001504:	321b      	adds	r2, #27
 8001506:	4095      	lsls	r5, r2
 8001508:	002a      	movs	r2, r5
 800150a:	1e55      	subs	r5, r2, #1
 800150c:	41aa      	sbcs	r2, r5
 800150e:	430a      	orrs	r2, r1
 8001510:	4906      	ldr	r1, [pc, #24]	@ (800152c <__aeabi_i2f+0x9c>)
 8001512:	4011      	ands	r1, r2
 8001514:	0755      	lsls	r5, r2, #29
 8001516:	d1e2      	bne.n	80014de <__aeabi_i2f+0x4e>
 8001518:	08ca      	lsrs	r2, r1, #3
 800151a:	0252      	lsls	r2, r2, #9
 800151c:	0a55      	lsrs	r5, r2, #9
 800151e:	b2d8      	uxtb	r0, r3
 8001520:	e7cf      	b.n	80014c2 <__aeabi_i2f+0x32>
 8001522:	026d      	lsls	r5, r5, #9
 8001524:	0a6d      	lsrs	r5, r5, #9
 8001526:	308e      	adds	r0, #142	@ 0x8e
 8001528:	e7cb      	b.n	80014c2 <__aeabi_i2f+0x32>
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	fbffffff 	.word	0xfbffffff

08001530 <__aeabi_dadd>:
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	464f      	mov	r7, r9
 8001534:	4646      	mov	r6, r8
 8001536:	46d6      	mov	lr, sl
 8001538:	b5c0      	push	{r6, r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	9000      	str	r0, [sp, #0]
 800153e:	9101      	str	r1, [sp, #4]
 8001540:	030e      	lsls	r6, r1, #12
 8001542:	004c      	lsls	r4, r1, #1
 8001544:	0fcd      	lsrs	r5, r1, #31
 8001546:	0a71      	lsrs	r1, r6, #9
 8001548:	9e00      	ldr	r6, [sp, #0]
 800154a:	005f      	lsls	r7, r3, #1
 800154c:	0f76      	lsrs	r6, r6, #29
 800154e:	430e      	orrs	r6, r1
 8001550:	9900      	ldr	r1, [sp, #0]
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	00c9      	lsls	r1, r1, #3
 8001558:	4689      	mov	r9, r1
 800155a:	0319      	lsls	r1, r3, #12
 800155c:	0d7b      	lsrs	r3, r7, #21
 800155e:	4698      	mov	r8, r3
 8001560:	9b01      	ldr	r3, [sp, #4]
 8001562:	0a49      	lsrs	r1, r1, #9
 8001564:	0fdb      	lsrs	r3, r3, #31
 8001566:	469c      	mov	ip, r3
 8001568:	9b00      	ldr	r3, [sp, #0]
 800156a:	9a00      	ldr	r2, [sp, #0]
 800156c:	0f5b      	lsrs	r3, r3, #29
 800156e:	430b      	orrs	r3, r1
 8001570:	4641      	mov	r1, r8
 8001572:	0d64      	lsrs	r4, r4, #21
 8001574:	00d2      	lsls	r2, r2, #3
 8001576:	1a61      	subs	r1, r4, r1
 8001578:	4565      	cmp	r5, ip
 800157a:	d100      	bne.n	800157e <__aeabi_dadd+0x4e>
 800157c:	e0a6      	b.n	80016cc <__aeabi_dadd+0x19c>
 800157e:	2900      	cmp	r1, #0
 8001580:	dd72      	ble.n	8001668 <__aeabi_dadd+0x138>
 8001582:	4647      	mov	r7, r8
 8001584:	2f00      	cmp	r7, #0
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x5a>
 8001588:	e0dd      	b.n	8001746 <__aeabi_dadd+0x216>
 800158a:	4fcc      	ldr	r7, [pc, #816]	@ (80018bc <__aeabi_dadd+0x38c>)
 800158c:	42bc      	cmp	r4, r7
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x62>
 8001590:	e19a      	b.n	80018c8 <__aeabi_dadd+0x398>
 8001592:	2701      	movs	r7, #1
 8001594:	2938      	cmp	r1, #56	@ 0x38
 8001596:	dc17      	bgt.n	80015c8 <__aeabi_dadd+0x98>
 8001598:	2780      	movs	r7, #128	@ 0x80
 800159a:	043f      	lsls	r7, r7, #16
 800159c:	433b      	orrs	r3, r7
 800159e:	291f      	cmp	r1, #31
 80015a0:	dd00      	ble.n	80015a4 <__aeabi_dadd+0x74>
 80015a2:	e1dd      	b.n	8001960 <__aeabi_dadd+0x430>
 80015a4:	2720      	movs	r7, #32
 80015a6:	1a78      	subs	r0, r7, r1
 80015a8:	001f      	movs	r7, r3
 80015aa:	4087      	lsls	r7, r0
 80015ac:	46ba      	mov	sl, r7
 80015ae:	0017      	movs	r7, r2
 80015b0:	40cf      	lsrs	r7, r1
 80015b2:	4684      	mov	ip, r0
 80015b4:	0038      	movs	r0, r7
 80015b6:	4657      	mov	r7, sl
 80015b8:	4307      	orrs	r7, r0
 80015ba:	4660      	mov	r0, ip
 80015bc:	4082      	lsls	r2, r0
 80015be:	40cb      	lsrs	r3, r1
 80015c0:	1e50      	subs	r0, r2, #1
 80015c2:	4182      	sbcs	r2, r0
 80015c4:	1af6      	subs	r6, r6, r3
 80015c6:	4317      	orrs	r7, r2
 80015c8:	464b      	mov	r3, r9
 80015ca:	1bdf      	subs	r7, r3, r7
 80015cc:	45b9      	cmp	r9, r7
 80015ce:	4180      	sbcs	r0, r0
 80015d0:	4240      	negs	r0, r0
 80015d2:	1a36      	subs	r6, r6, r0
 80015d4:	0233      	lsls	r3, r6, #8
 80015d6:	d400      	bmi.n	80015da <__aeabi_dadd+0xaa>
 80015d8:	e0ff      	b.n	80017da <__aeabi_dadd+0x2aa>
 80015da:	0276      	lsls	r6, r6, #9
 80015dc:	0a76      	lsrs	r6, r6, #9
 80015de:	2e00      	cmp	r6, #0
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dadd+0xb4>
 80015e2:	e13c      	b.n	800185e <__aeabi_dadd+0x32e>
 80015e4:	0030      	movs	r0, r6
 80015e6:	f001 ff8b 	bl	8003500 <__clzsi2>
 80015ea:	0003      	movs	r3, r0
 80015ec:	3b08      	subs	r3, #8
 80015ee:	2120      	movs	r1, #32
 80015f0:	0038      	movs	r0, r7
 80015f2:	1aca      	subs	r2, r1, r3
 80015f4:	40d0      	lsrs	r0, r2
 80015f6:	409e      	lsls	r6, r3
 80015f8:	0002      	movs	r2, r0
 80015fa:	409f      	lsls	r7, r3
 80015fc:	4332      	orrs	r2, r6
 80015fe:	429c      	cmp	r4, r3
 8001600:	dd00      	ble.n	8001604 <__aeabi_dadd+0xd4>
 8001602:	e1a6      	b.n	8001952 <__aeabi_dadd+0x422>
 8001604:	1b18      	subs	r0, r3, r4
 8001606:	3001      	adds	r0, #1
 8001608:	1a09      	subs	r1, r1, r0
 800160a:	003e      	movs	r6, r7
 800160c:	408f      	lsls	r7, r1
 800160e:	40c6      	lsrs	r6, r0
 8001610:	1e7b      	subs	r3, r7, #1
 8001612:	419f      	sbcs	r7, r3
 8001614:	0013      	movs	r3, r2
 8001616:	408b      	lsls	r3, r1
 8001618:	4337      	orrs	r7, r6
 800161a:	431f      	orrs	r7, r3
 800161c:	40c2      	lsrs	r2, r0
 800161e:	003b      	movs	r3, r7
 8001620:	0016      	movs	r6, r2
 8001622:	2400      	movs	r4, #0
 8001624:	4313      	orrs	r3, r2
 8001626:	d100      	bne.n	800162a <__aeabi_dadd+0xfa>
 8001628:	e1df      	b.n	80019ea <__aeabi_dadd+0x4ba>
 800162a:	077b      	lsls	r3, r7, #29
 800162c:	d100      	bne.n	8001630 <__aeabi_dadd+0x100>
 800162e:	e332      	b.n	8001c96 <__aeabi_dadd+0x766>
 8001630:	230f      	movs	r3, #15
 8001632:	003a      	movs	r2, r7
 8001634:	403b      	ands	r3, r7
 8001636:	2b04      	cmp	r3, #4
 8001638:	d004      	beq.n	8001644 <__aeabi_dadd+0x114>
 800163a:	1d3a      	adds	r2, r7, #4
 800163c:	42ba      	cmp	r2, r7
 800163e:	41bf      	sbcs	r7, r7
 8001640:	427f      	negs	r7, r7
 8001642:	19f6      	adds	r6, r6, r7
 8001644:	0233      	lsls	r3, r6, #8
 8001646:	d400      	bmi.n	800164a <__aeabi_dadd+0x11a>
 8001648:	e323      	b.n	8001c92 <__aeabi_dadd+0x762>
 800164a:	4b9c      	ldr	r3, [pc, #624]	@ (80018bc <__aeabi_dadd+0x38c>)
 800164c:	3401      	adds	r4, #1
 800164e:	429c      	cmp	r4, r3
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x124>
 8001652:	e0b4      	b.n	80017be <__aeabi_dadd+0x28e>
 8001654:	4b9a      	ldr	r3, [pc, #616]	@ (80018c0 <__aeabi_dadd+0x390>)
 8001656:	0564      	lsls	r4, r4, #21
 8001658:	401e      	ands	r6, r3
 800165a:	0d64      	lsrs	r4, r4, #21
 800165c:	0777      	lsls	r7, r6, #29
 800165e:	08d2      	lsrs	r2, r2, #3
 8001660:	0276      	lsls	r6, r6, #9
 8001662:	4317      	orrs	r7, r2
 8001664:	0b36      	lsrs	r6, r6, #12
 8001666:	e0ac      	b.n	80017c2 <__aeabi_dadd+0x292>
 8001668:	2900      	cmp	r1, #0
 800166a:	d100      	bne.n	800166e <__aeabi_dadd+0x13e>
 800166c:	e07e      	b.n	800176c <__aeabi_dadd+0x23c>
 800166e:	4641      	mov	r1, r8
 8001670:	1b09      	subs	r1, r1, r4
 8001672:	2c00      	cmp	r4, #0
 8001674:	d000      	beq.n	8001678 <__aeabi_dadd+0x148>
 8001676:	e160      	b.n	800193a <__aeabi_dadd+0x40a>
 8001678:	0034      	movs	r4, r6
 800167a:	4648      	mov	r0, r9
 800167c:	4304      	orrs	r4, r0
 800167e:	d100      	bne.n	8001682 <__aeabi_dadd+0x152>
 8001680:	e1c9      	b.n	8001a16 <__aeabi_dadd+0x4e6>
 8001682:	1e4c      	subs	r4, r1, #1
 8001684:	2901      	cmp	r1, #1
 8001686:	d100      	bne.n	800168a <__aeabi_dadd+0x15a>
 8001688:	e22e      	b.n	8001ae8 <__aeabi_dadd+0x5b8>
 800168a:	4d8c      	ldr	r5, [pc, #560]	@ (80018bc <__aeabi_dadd+0x38c>)
 800168c:	42a9      	cmp	r1, r5
 800168e:	d100      	bne.n	8001692 <__aeabi_dadd+0x162>
 8001690:	e224      	b.n	8001adc <__aeabi_dadd+0x5ac>
 8001692:	2701      	movs	r7, #1
 8001694:	2c38      	cmp	r4, #56	@ 0x38
 8001696:	dc11      	bgt.n	80016bc <__aeabi_dadd+0x18c>
 8001698:	0021      	movs	r1, r4
 800169a:	291f      	cmp	r1, #31
 800169c:	dd00      	ble.n	80016a0 <__aeabi_dadd+0x170>
 800169e:	e20b      	b.n	8001ab8 <__aeabi_dadd+0x588>
 80016a0:	2420      	movs	r4, #32
 80016a2:	0037      	movs	r7, r6
 80016a4:	4648      	mov	r0, r9
 80016a6:	1a64      	subs	r4, r4, r1
 80016a8:	40a7      	lsls	r7, r4
 80016aa:	40c8      	lsrs	r0, r1
 80016ac:	4307      	orrs	r7, r0
 80016ae:	4648      	mov	r0, r9
 80016b0:	40a0      	lsls	r0, r4
 80016b2:	40ce      	lsrs	r6, r1
 80016b4:	1e44      	subs	r4, r0, #1
 80016b6:	41a0      	sbcs	r0, r4
 80016b8:	1b9b      	subs	r3, r3, r6
 80016ba:	4307      	orrs	r7, r0
 80016bc:	1bd7      	subs	r7, r2, r7
 80016be:	42ba      	cmp	r2, r7
 80016c0:	4192      	sbcs	r2, r2
 80016c2:	4252      	negs	r2, r2
 80016c4:	4665      	mov	r5, ip
 80016c6:	4644      	mov	r4, r8
 80016c8:	1a9e      	subs	r6, r3, r2
 80016ca:	e783      	b.n	80015d4 <__aeabi_dadd+0xa4>
 80016cc:	2900      	cmp	r1, #0
 80016ce:	dc00      	bgt.n	80016d2 <__aeabi_dadd+0x1a2>
 80016d0:	e09c      	b.n	800180c <__aeabi_dadd+0x2dc>
 80016d2:	4647      	mov	r7, r8
 80016d4:	2f00      	cmp	r7, #0
 80016d6:	d167      	bne.n	80017a8 <__aeabi_dadd+0x278>
 80016d8:	001f      	movs	r7, r3
 80016da:	4317      	orrs	r7, r2
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dadd+0x1b0>
 80016de:	e0e4      	b.n	80018aa <__aeabi_dadd+0x37a>
 80016e0:	1e48      	subs	r0, r1, #1
 80016e2:	2901      	cmp	r1, #1
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dadd+0x1b8>
 80016e6:	e19b      	b.n	8001a20 <__aeabi_dadd+0x4f0>
 80016e8:	4f74      	ldr	r7, [pc, #464]	@ (80018bc <__aeabi_dadd+0x38c>)
 80016ea:	42b9      	cmp	r1, r7
 80016ec:	d100      	bne.n	80016f0 <__aeabi_dadd+0x1c0>
 80016ee:	e0eb      	b.n	80018c8 <__aeabi_dadd+0x398>
 80016f0:	2701      	movs	r7, #1
 80016f2:	0001      	movs	r1, r0
 80016f4:	2838      	cmp	r0, #56	@ 0x38
 80016f6:	dc11      	bgt.n	800171c <__aeabi_dadd+0x1ec>
 80016f8:	291f      	cmp	r1, #31
 80016fa:	dd00      	ble.n	80016fe <__aeabi_dadd+0x1ce>
 80016fc:	e1c7      	b.n	8001a8e <__aeabi_dadd+0x55e>
 80016fe:	2720      	movs	r7, #32
 8001700:	1a78      	subs	r0, r7, r1
 8001702:	001f      	movs	r7, r3
 8001704:	4684      	mov	ip, r0
 8001706:	4087      	lsls	r7, r0
 8001708:	0010      	movs	r0, r2
 800170a:	40c8      	lsrs	r0, r1
 800170c:	4307      	orrs	r7, r0
 800170e:	4660      	mov	r0, ip
 8001710:	4082      	lsls	r2, r0
 8001712:	40cb      	lsrs	r3, r1
 8001714:	1e50      	subs	r0, r2, #1
 8001716:	4182      	sbcs	r2, r0
 8001718:	18f6      	adds	r6, r6, r3
 800171a:	4317      	orrs	r7, r2
 800171c:	444f      	add	r7, r9
 800171e:	454f      	cmp	r7, r9
 8001720:	4180      	sbcs	r0, r0
 8001722:	4240      	negs	r0, r0
 8001724:	1836      	adds	r6, r6, r0
 8001726:	0233      	lsls	r3, r6, #8
 8001728:	d557      	bpl.n	80017da <__aeabi_dadd+0x2aa>
 800172a:	4b64      	ldr	r3, [pc, #400]	@ (80018bc <__aeabi_dadd+0x38c>)
 800172c:	3401      	adds	r4, #1
 800172e:	429c      	cmp	r4, r3
 8001730:	d045      	beq.n	80017be <__aeabi_dadd+0x28e>
 8001732:	2101      	movs	r1, #1
 8001734:	4b62      	ldr	r3, [pc, #392]	@ (80018c0 <__aeabi_dadd+0x390>)
 8001736:	087a      	lsrs	r2, r7, #1
 8001738:	401e      	ands	r6, r3
 800173a:	4039      	ands	r1, r7
 800173c:	430a      	orrs	r2, r1
 800173e:	07f7      	lsls	r7, r6, #31
 8001740:	4317      	orrs	r7, r2
 8001742:	0876      	lsrs	r6, r6, #1
 8001744:	e771      	b.n	800162a <__aeabi_dadd+0xfa>
 8001746:	001f      	movs	r7, r3
 8001748:	4317      	orrs	r7, r2
 800174a:	d100      	bne.n	800174e <__aeabi_dadd+0x21e>
 800174c:	e0ad      	b.n	80018aa <__aeabi_dadd+0x37a>
 800174e:	1e4f      	subs	r7, r1, #1
 8001750:	46bc      	mov	ip, r7
 8001752:	2901      	cmp	r1, #1
 8001754:	d100      	bne.n	8001758 <__aeabi_dadd+0x228>
 8001756:	e182      	b.n	8001a5e <__aeabi_dadd+0x52e>
 8001758:	4f58      	ldr	r7, [pc, #352]	@ (80018bc <__aeabi_dadd+0x38c>)
 800175a:	42b9      	cmp	r1, r7
 800175c:	d100      	bne.n	8001760 <__aeabi_dadd+0x230>
 800175e:	e190      	b.n	8001a82 <__aeabi_dadd+0x552>
 8001760:	4661      	mov	r1, ip
 8001762:	2701      	movs	r7, #1
 8001764:	2938      	cmp	r1, #56	@ 0x38
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x23a>
 8001768:	e72e      	b.n	80015c8 <__aeabi_dadd+0x98>
 800176a:	e718      	b.n	800159e <__aeabi_dadd+0x6e>
 800176c:	4f55      	ldr	r7, [pc, #340]	@ (80018c4 <__aeabi_dadd+0x394>)
 800176e:	1c61      	adds	r1, r4, #1
 8001770:	4239      	tst	r1, r7
 8001772:	d000      	beq.n	8001776 <__aeabi_dadd+0x246>
 8001774:	e0d0      	b.n	8001918 <__aeabi_dadd+0x3e8>
 8001776:	0031      	movs	r1, r6
 8001778:	4648      	mov	r0, r9
 800177a:	001f      	movs	r7, r3
 800177c:	4301      	orrs	r1, r0
 800177e:	4317      	orrs	r7, r2
 8001780:	2c00      	cmp	r4, #0
 8001782:	d000      	beq.n	8001786 <__aeabi_dadd+0x256>
 8001784:	e13d      	b.n	8001a02 <__aeabi_dadd+0x4d2>
 8001786:	2900      	cmp	r1, #0
 8001788:	d100      	bne.n	800178c <__aeabi_dadd+0x25c>
 800178a:	e1bc      	b.n	8001b06 <__aeabi_dadd+0x5d6>
 800178c:	2f00      	cmp	r7, #0
 800178e:	d000      	beq.n	8001792 <__aeabi_dadd+0x262>
 8001790:	e1bf      	b.n	8001b12 <__aeabi_dadd+0x5e2>
 8001792:	464b      	mov	r3, r9
 8001794:	2100      	movs	r1, #0
 8001796:	08d8      	lsrs	r0, r3, #3
 8001798:	0777      	lsls	r7, r6, #29
 800179a:	4307      	orrs	r7, r0
 800179c:	08f0      	lsrs	r0, r6, #3
 800179e:	0306      	lsls	r6, r0, #12
 80017a0:	054c      	lsls	r4, r1, #21
 80017a2:	0b36      	lsrs	r6, r6, #12
 80017a4:	0d64      	lsrs	r4, r4, #21
 80017a6:	e00c      	b.n	80017c2 <__aeabi_dadd+0x292>
 80017a8:	4f44      	ldr	r7, [pc, #272]	@ (80018bc <__aeabi_dadd+0x38c>)
 80017aa:	42bc      	cmp	r4, r7
 80017ac:	d100      	bne.n	80017b0 <__aeabi_dadd+0x280>
 80017ae:	e08b      	b.n	80018c8 <__aeabi_dadd+0x398>
 80017b0:	2701      	movs	r7, #1
 80017b2:	2938      	cmp	r1, #56	@ 0x38
 80017b4:	dcb2      	bgt.n	800171c <__aeabi_dadd+0x1ec>
 80017b6:	2780      	movs	r7, #128	@ 0x80
 80017b8:	043f      	lsls	r7, r7, #16
 80017ba:	433b      	orrs	r3, r7
 80017bc:	e79c      	b.n	80016f8 <__aeabi_dadd+0x1c8>
 80017be:	2600      	movs	r6, #0
 80017c0:	2700      	movs	r7, #0
 80017c2:	0524      	lsls	r4, r4, #20
 80017c4:	4334      	orrs	r4, r6
 80017c6:	07ed      	lsls	r5, r5, #31
 80017c8:	432c      	orrs	r4, r5
 80017ca:	0038      	movs	r0, r7
 80017cc:	0021      	movs	r1, r4
 80017ce:	b002      	add	sp, #8
 80017d0:	bce0      	pop	{r5, r6, r7}
 80017d2:	46ba      	mov	sl, r7
 80017d4:	46b1      	mov	r9, r6
 80017d6:	46a8      	mov	r8, r5
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017da:	077b      	lsls	r3, r7, #29
 80017dc:	d004      	beq.n	80017e8 <__aeabi_dadd+0x2b8>
 80017de:	230f      	movs	r3, #15
 80017e0:	403b      	ands	r3, r7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d000      	beq.n	80017e8 <__aeabi_dadd+0x2b8>
 80017e6:	e728      	b.n	800163a <__aeabi_dadd+0x10a>
 80017e8:	08f8      	lsrs	r0, r7, #3
 80017ea:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <__aeabi_dadd+0x38c>)
 80017ec:	0777      	lsls	r7, r6, #29
 80017ee:	4307      	orrs	r7, r0
 80017f0:	08f0      	lsrs	r0, r6, #3
 80017f2:	429c      	cmp	r4, r3
 80017f4:	d000      	beq.n	80017f8 <__aeabi_dadd+0x2c8>
 80017f6:	e24a      	b.n	8001c8e <__aeabi_dadd+0x75e>
 80017f8:	003b      	movs	r3, r7
 80017fa:	4303      	orrs	r3, r0
 80017fc:	d059      	beq.n	80018b2 <__aeabi_dadd+0x382>
 80017fe:	2680      	movs	r6, #128	@ 0x80
 8001800:	0336      	lsls	r6, r6, #12
 8001802:	4306      	orrs	r6, r0
 8001804:	0336      	lsls	r6, r6, #12
 8001806:	4c2d      	ldr	r4, [pc, #180]	@ (80018bc <__aeabi_dadd+0x38c>)
 8001808:	0b36      	lsrs	r6, r6, #12
 800180a:	e7da      	b.n	80017c2 <__aeabi_dadd+0x292>
 800180c:	2900      	cmp	r1, #0
 800180e:	d061      	beq.n	80018d4 <__aeabi_dadd+0x3a4>
 8001810:	4641      	mov	r1, r8
 8001812:	1b09      	subs	r1, r1, r4
 8001814:	2c00      	cmp	r4, #0
 8001816:	d100      	bne.n	800181a <__aeabi_dadd+0x2ea>
 8001818:	e0b9      	b.n	800198e <__aeabi_dadd+0x45e>
 800181a:	4c28      	ldr	r4, [pc, #160]	@ (80018bc <__aeabi_dadd+0x38c>)
 800181c:	45a0      	cmp	r8, r4
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x2f2>
 8001820:	e1a5      	b.n	8001b6e <__aeabi_dadd+0x63e>
 8001822:	2701      	movs	r7, #1
 8001824:	2938      	cmp	r1, #56	@ 0x38
 8001826:	dc13      	bgt.n	8001850 <__aeabi_dadd+0x320>
 8001828:	2480      	movs	r4, #128	@ 0x80
 800182a:	0424      	lsls	r4, r4, #16
 800182c:	4326      	orrs	r6, r4
 800182e:	291f      	cmp	r1, #31
 8001830:	dd00      	ble.n	8001834 <__aeabi_dadd+0x304>
 8001832:	e1c8      	b.n	8001bc6 <__aeabi_dadd+0x696>
 8001834:	2420      	movs	r4, #32
 8001836:	0037      	movs	r7, r6
 8001838:	4648      	mov	r0, r9
 800183a:	1a64      	subs	r4, r4, r1
 800183c:	40a7      	lsls	r7, r4
 800183e:	40c8      	lsrs	r0, r1
 8001840:	4307      	orrs	r7, r0
 8001842:	4648      	mov	r0, r9
 8001844:	40a0      	lsls	r0, r4
 8001846:	40ce      	lsrs	r6, r1
 8001848:	1e44      	subs	r4, r0, #1
 800184a:	41a0      	sbcs	r0, r4
 800184c:	199b      	adds	r3, r3, r6
 800184e:	4307      	orrs	r7, r0
 8001850:	18bf      	adds	r7, r7, r2
 8001852:	4297      	cmp	r7, r2
 8001854:	4192      	sbcs	r2, r2
 8001856:	4252      	negs	r2, r2
 8001858:	4644      	mov	r4, r8
 800185a:	18d6      	adds	r6, r2, r3
 800185c:	e763      	b.n	8001726 <__aeabi_dadd+0x1f6>
 800185e:	0038      	movs	r0, r7
 8001860:	f001 fe4e 	bl	8003500 <__clzsi2>
 8001864:	0003      	movs	r3, r0
 8001866:	3318      	adds	r3, #24
 8001868:	2b1f      	cmp	r3, #31
 800186a:	dc00      	bgt.n	800186e <__aeabi_dadd+0x33e>
 800186c:	e6bf      	b.n	80015ee <__aeabi_dadd+0xbe>
 800186e:	003a      	movs	r2, r7
 8001870:	3808      	subs	r0, #8
 8001872:	4082      	lsls	r2, r0
 8001874:	429c      	cmp	r4, r3
 8001876:	dd00      	ble.n	800187a <__aeabi_dadd+0x34a>
 8001878:	e083      	b.n	8001982 <__aeabi_dadd+0x452>
 800187a:	1b1b      	subs	r3, r3, r4
 800187c:	1c58      	adds	r0, r3, #1
 800187e:	281f      	cmp	r0, #31
 8001880:	dc00      	bgt.n	8001884 <__aeabi_dadd+0x354>
 8001882:	e1b4      	b.n	8001bee <__aeabi_dadd+0x6be>
 8001884:	0017      	movs	r7, r2
 8001886:	3b1f      	subs	r3, #31
 8001888:	40df      	lsrs	r7, r3
 800188a:	2820      	cmp	r0, #32
 800188c:	d005      	beq.n	800189a <__aeabi_dadd+0x36a>
 800188e:	2340      	movs	r3, #64	@ 0x40
 8001890:	1a1b      	subs	r3, r3, r0
 8001892:	409a      	lsls	r2, r3
 8001894:	1e53      	subs	r3, r2, #1
 8001896:	419a      	sbcs	r2, r3
 8001898:	4317      	orrs	r7, r2
 800189a:	2400      	movs	r4, #0
 800189c:	2f00      	cmp	r7, #0
 800189e:	d00a      	beq.n	80018b6 <__aeabi_dadd+0x386>
 80018a0:	077b      	lsls	r3, r7, #29
 80018a2:	d000      	beq.n	80018a6 <__aeabi_dadd+0x376>
 80018a4:	e6c4      	b.n	8001630 <__aeabi_dadd+0x100>
 80018a6:	0026      	movs	r6, r4
 80018a8:	e79e      	b.n	80017e8 <__aeabi_dadd+0x2b8>
 80018aa:	464b      	mov	r3, r9
 80018ac:	000c      	movs	r4, r1
 80018ae:	08d8      	lsrs	r0, r3, #3
 80018b0:	e79b      	b.n	80017ea <__aeabi_dadd+0x2ba>
 80018b2:	2700      	movs	r7, #0
 80018b4:	4c01      	ldr	r4, [pc, #4]	@ (80018bc <__aeabi_dadd+0x38c>)
 80018b6:	2600      	movs	r6, #0
 80018b8:	e783      	b.n	80017c2 <__aeabi_dadd+0x292>
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	000007ff 	.word	0x000007ff
 80018c0:	ff7fffff 	.word	0xff7fffff
 80018c4:	000007fe 	.word	0x000007fe
 80018c8:	464b      	mov	r3, r9
 80018ca:	0777      	lsls	r7, r6, #29
 80018cc:	08d8      	lsrs	r0, r3, #3
 80018ce:	4307      	orrs	r7, r0
 80018d0:	08f0      	lsrs	r0, r6, #3
 80018d2:	e791      	b.n	80017f8 <__aeabi_dadd+0x2c8>
 80018d4:	4fcd      	ldr	r7, [pc, #820]	@ (8001c0c <__aeabi_dadd+0x6dc>)
 80018d6:	1c61      	adds	r1, r4, #1
 80018d8:	4239      	tst	r1, r7
 80018da:	d16b      	bne.n	80019b4 <__aeabi_dadd+0x484>
 80018dc:	0031      	movs	r1, r6
 80018de:	4648      	mov	r0, r9
 80018e0:	4301      	orrs	r1, r0
 80018e2:	2c00      	cmp	r4, #0
 80018e4:	d000      	beq.n	80018e8 <__aeabi_dadd+0x3b8>
 80018e6:	e14b      	b.n	8001b80 <__aeabi_dadd+0x650>
 80018e8:	001f      	movs	r7, r3
 80018ea:	4317      	orrs	r7, r2
 80018ec:	2900      	cmp	r1, #0
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dadd+0x3c2>
 80018f0:	e181      	b.n	8001bf6 <__aeabi_dadd+0x6c6>
 80018f2:	2f00      	cmp	r7, #0
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dadd+0x3c8>
 80018f6:	e74c      	b.n	8001792 <__aeabi_dadd+0x262>
 80018f8:	444a      	add	r2, r9
 80018fa:	454a      	cmp	r2, r9
 80018fc:	4180      	sbcs	r0, r0
 80018fe:	18f6      	adds	r6, r6, r3
 8001900:	4240      	negs	r0, r0
 8001902:	1836      	adds	r6, r6, r0
 8001904:	0233      	lsls	r3, r6, #8
 8001906:	d500      	bpl.n	800190a <__aeabi_dadd+0x3da>
 8001908:	e1b0      	b.n	8001c6c <__aeabi_dadd+0x73c>
 800190a:	0017      	movs	r7, r2
 800190c:	4691      	mov	r9, r2
 800190e:	4337      	orrs	r7, r6
 8001910:	d000      	beq.n	8001914 <__aeabi_dadd+0x3e4>
 8001912:	e73e      	b.n	8001792 <__aeabi_dadd+0x262>
 8001914:	2600      	movs	r6, #0
 8001916:	e754      	b.n	80017c2 <__aeabi_dadd+0x292>
 8001918:	4649      	mov	r1, r9
 800191a:	1a89      	subs	r1, r1, r2
 800191c:	4688      	mov	r8, r1
 800191e:	45c1      	cmp	r9, r8
 8001920:	41bf      	sbcs	r7, r7
 8001922:	1af1      	subs	r1, r6, r3
 8001924:	427f      	negs	r7, r7
 8001926:	1bc9      	subs	r1, r1, r7
 8001928:	020f      	lsls	r7, r1, #8
 800192a:	d461      	bmi.n	80019f0 <__aeabi_dadd+0x4c0>
 800192c:	4647      	mov	r7, r8
 800192e:	430f      	orrs	r7, r1
 8001930:	d100      	bne.n	8001934 <__aeabi_dadd+0x404>
 8001932:	e0bd      	b.n	8001ab0 <__aeabi_dadd+0x580>
 8001934:	000e      	movs	r6, r1
 8001936:	4647      	mov	r7, r8
 8001938:	e651      	b.n	80015de <__aeabi_dadd+0xae>
 800193a:	4cb5      	ldr	r4, [pc, #724]	@ (8001c10 <__aeabi_dadd+0x6e0>)
 800193c:	45a0      	cmp	r8, r4
 800193e:	d100      	bne.n	8001942 <__aeabi_dadd+0x412>
 8001940:	e100      	b.n	8001b44 <__aeabi_dadd+0x614>
 8001942:	2701      	movs	r7, #1
 8001944:	2938      	cmp	r1, #56	@ 0x38
 8001946:	dd00      	ble.n	800194a <__aeabi_dadd+0x41a>
 8001948:	e6b8      	b.n	80016bc <__aeabi_dadd+0x18c>
 800194a:	2480      	movs	r4, #128	@ 0x80
 800194c:	0424      	lsls	r4, r4, #16
 800194e:	4326      	orrs	r6, r4
 8001950:	e6a3      	b.n	800169a <__aeabi_dadd+0x16a>
 8001952:	4eb0      	ldr	r6, [pc, #704]	@ (8001c14 <__aeabi_dadd+0x6e4>)
 8001954:	1ae4      	subs	r4, r4, r3
 8001956:	4016      	ands	r6, r2
 8001958:	077b      	lsls	r3, r7, #29
 800195a:	d000      	beq.n	800195e <__aeabi_dadd+0x42e>
 800195c:	e73f      	b.n	80017de <__aeabi_dadd+0x2ae>
 800195e:	e743      	b.n	80017e8 <__aeabi_dadd+0x2b8>
 8001960:	000f      	movs	r7, r1
 8001962:	0018      	movs	r0, r3
 8001964:	3f20      	subs	r7, #32
 8001966:	40f8      	lsrs	r0, r7
 8001968:	4684      	mov	ip, r0
 800196a:	2920      	cmp	r1, #32
 800196c:	d003      	beq.n	8001976 <__aeabi_dadd+0x446>
 800196e:	2740      	movs	r7, #64	@ 0x40
 8001970:	1a79      	subs	r1, r7, r1
 8001972:	408b      	lsls	r3, r1
 8001974:	431a      	orrs	r2, r3
 8001976:	1e53      	subs	r3, r2, #1
 8001978:	419a      	sbcs	r2, r3
 800197a:	4663      	mov	r3, ip
 800197c:	0017      	movs	r7, r2
 800197e:	431f      	orrs	r7, r3
 8001980:	e622      	b.n	80015c8 <__aeabi_dadd+0x98>
 8001982:	48a4      	ldr	r0, [pc, #656]	@ (8001c14 <__aeabi_dadd+0x6e4>)
 8001984:	1ae1      	subs	r1, r4, r3
 8001986:	4010      	ands	r0, r2
 8001988:	0747      	lsls	r7, r0, #29
 800198a:	08c0      	lsrs	r0, r0, #3
 800198c:	e707      	b.n	800179e <__aeabi_dadd+0x26e>
 800198e:	0034      	movs	r4, r6
 8001990:	4648      	mov	r0, r9
 8001992:	4304      	orrs	r4, r0
 8001994:	d100      	bne.n	8001998 <__aeabi_dadd+0x468>
 8001996:	e0fa      	b.n	8001b8e <__aeabi_dadd+0x65e>
 8001998:	1e4c      	subs	r4, r1, #1
 800199a:	2901      	cmp	r1, #1
 800199c:	d100      	bne.n	80019a0 <__aeabi_dadd+0x470>
 800199e:	e0d7      	b.n	8001b50 <__aeabi_dadd+0x620>
 80019a0:	4f9b      	ldr	r7, [pc, #620]	@ (8001c10 <__aeabi_dadd+0x6e0>)
 80019a2:	42b9      	cmp	r1, r7
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dadd+0x478>
 80019a6:	e0e2      	b.n	8001b6e <__aeabi_dadd+0x63e>
 80019a8:	2701      	movs	r7, #1
 80019aa:	2c38      	cmp	r4, #56	@ 0x38
 80019ac:	dd00      	ble.n	80019b0 <__aeabi_dadd+0x480>
 80019ae:	e74f      	b.n	8001850 <__aeabi_dadd+0x320>
 80019b0:	0021      	movs	r1, r4
 80019b2:	e73c      	b.n	800182e <__aeabi_dadd+0x2fe>
 80019b4:	4c96      	ldr	r4, [pc, #600]	@ (8001c10 <__aeabi_dadd+0x6e0>)
 80019b6:	42a1      	cmp	r1, r4
 80019b8:	d100      	bne.n	80019bc <__aeabi_dadd+0x48c>
 80019ba:	e0dd      	b.n	8001b78 <__aeabi_dadd+0x648>
 80019bc:	444a      	add	r2, r9
 80019be:	454a      	cmp	r2, r9
 80019c0:	4180      	sbcs	r0, r0
 80019c2:	18f3      	adds	r3, r6, r3
 80019c4:	4240      	negs	r0, r0
 80019c6:	1818      	adds	r0, r3, r0
 80019c8:	07c7      	lsls	r7, r0, #31
 80019ca:	0852      	lsrs	r2, r2, #1
 80019cc:	4317      	orrs	r7, r2
 80019ce:	0846      	lsrs	r6, r0, #1
 80019d0:	0752      	lsls	r2, r2, #29
 80019d2:	d005      	beq.n	80019e0 <__aeabi_dadd+0x4b0>
 80019d4:	220f      	movs	r2, #15
 80019d6:	000c      	movs	r4, r1
 80019d8:	403a      	ands	r2, r7
 80019da:	2a04      	cmp	r2, #4
 80019dc:	d000      	beq.n	80019e0 <__aeabi_dadd+0x4b0>
 80019de:	e62c      	b.n	800163a <__aeabi_dadd+0x10a>
 80019e0:	0776      	lsls	r6, r6, #29
 80019e2:	08ff      	lsrs	r7, r7, #3
 80019e4:	4337      	orrs	r7, r6
 80019e6:	0900      	lsrs	r0, r0, #4
 80019e8:	e6d9      	b.n	800179e <__aeabi_dadd+0x26e>
 80019ea:	2700      	movs	r7, #0
 80019ec:	2600      	movs	r6, #0
 80019ee:	e6e8      	b.n	80017c2 <__aeabi_dadd+0x292>
 80019f0:	4649      	mov	r1, r9
 80019f2:	1a57      	subs	r7, r2, r1
 80019f4:	42ba      	cmp	r2, r7
 80019f6:	4192      	sbcs	r2, r2
 80019f8:	1b9e      	subs	r6, r3, r6
 80019fa:	4252      	negs	r2, r2
 80019fc:	4665      	mov	r5, ip
 80019fe:	1ab6      	subs	r6, r6, r2
 8001a00:	e5ed      	b.n	80015de <__aeabi_dadd+0xae>
 8001a02:	2900      	cmp	r1, #0
 8001a04:	d000      	beq.n	8001a08 <__aeabi_dadd+0x4d8>
 8001a06:	e0c6      	b.n	8001b96 <__aeabi_dadd+0x666>
 8001a08:	2f00      	cmp	r7, #0
 8001a0a:	d167      	bne.n	8001adc <__aeabi_dadd+0x5ac>
 8001a0c:	2680      	movs	r6, #128	@ 0x80
 8001a0e:	2500      	movs	r5, #0
 8001a10:	4c7f      	ldr	r4, [pc, #508]	@ (8001c10 <__aeabi_dadd+0x6e0>)
 8001a12:	0336      	lsls	r6, r6, #12
 8001a14:	e6d5      	b.n	80017c2 <__aeabi_dadd+0x292>
 8001a16:	4665      	mov	r5, ip
 8001a18:	000c      	movs	r4, r1
 8001a1a:	001e      	movs	r6, r3
 8001a1c:	08d0      	lsrs	r0, r2, #3
 8001a1e:	e6e4      	b.n	80017ea <__aeabi_dadd+0x2ba>
 8001a20:	444a      	add	r2, r9
 8001a22:	454a      	cmp	r2, r9
 8001a24:	4180      	sbcs	r0, r0
 8001a26:	18f3      	adds	r3, r6, r3
 8001a28:	4240      	negs	r0, r0
 8001a2a:	1818      	adds	r0, r3, r0
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	0203      	lsls	r3, r0, #8
 8001a30:	d400      	bmi.n	8001a34 <__aeabi_dadd+0x504>
 8001a32:	e096      	b.n	8001b62 <__aeabi_dadd+0x632>
 8001a34:	4b77      	ldr	r3, [pc, #476]	@ (8001c14 <__aeabi_dadd+0x6e4>)
 8001a36:	0849      	lsrs	r1, r1, #1
 8001a38:	4018      	ands	r0, r3
 8001a3a:	07c3      	lsls	r3, r0, #31
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	0844      	lsrs	r4, r0, #1
 8001a40:	0749      	lsls	r1, r1, #29
 8001a42:	d100      	bne.n	8001a46 <__aeabi_dadd+0x516>
 8001a44:	e129      	b.n	8001c9a <__aeabi_dadd+0x76a>
 8001a46:	220f      	movs	r2, #15
 8001a48:	401a      	ands	r2, r3
 8001a4a:	2a04      	cmp	r2, #4
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dadd+0x520>
 8001a4e:	e0ea      	b.n	8001c26 <__aeabi_dadd+0x6f6>
 8001a50:	1d1f      	adds	r7, r3, #4
 8001a52:	429f      	cmp	r7, r3
 8001a54:	41b6      	sbcs	r6, r6
 8001a56:	4276      	negs	r6, r6
 8001a58:	1936      	adds	r6, r6, r4
 8001a5a:	2402      	movs	r4, #2
 8001a5c:	e6c4      	b.n	80017e8 <__aeabi_dadd+0x2b8>
 8001a5e:	4649      	mov	r1, r9
 8001a60:	1a8f      	subs	r7, r1, r2
 8001a62:	45b9      	cmp	r9, r7
 8001a64:	4180      	sbcs	r0, r0
 8001a66:	1af6      	subs	r6, r6, r3
 8001a68:	4240      	negs	r0, r0
 8001a6a:	1a36      	subs	r6, r6, r0
 8001a6c:	0233      	lsls	r3, r6, #8
 8001a6e:	d406      	bmi.n	8001a7e <__aeabi_dadd+0x54e>
 8001a70:	0773      	lsls	r3, r6, #29
 8001a72:	08ff      	lsrs	r7, r7, #3
 8001a74:	2101      	movs	r1, #1
 8001a76:	431f      	orrs	r7, r3
 8001a78:	08f0      	lsrs	r0, r6, #3
 8001a7a:	e690      	b.n	800179e <__aeabi_dadd+0x26e>
 8001a7c:	4665      	mov	r5, ip
 8001a7e:	2401      	movs	r4, #1
 8001a80:	e5ab      	b.n	80015da <__aeabi_dadd+0xaa>
 8001a82:	464b      	mov	r3, r9
 8001a84:	0777      	lsls	r7, r6, #29
 8001a86:	08d8      	lsrs	r0, r3, #3
 8001a88:	4307      	orrs	r7, r0
 8001a8a:	08f0      	lsrs	r0, r6, #3
 8001a8c:	e6b4      	b.n	80017f8 <__aeabi_dadd+0x2c8>
 8001a8e:	000f      	movs	r7, r1
 8001a90:	0018      	movs	r0, r3
 8001a92:	3f20      	subs	r7, #32
 8001a94:	40f8      	lsrs	r0, r7
 8001a96:	4684      	mov	ip, r0
 8001a98:	2920      	cmp	r1, #32
 8001a9a:	d003      	beq.n	8001aa4 <__aeabi_dadd+0x574>
 8001a9c:	2740      	movs	r7, #64	@ 0x40
 8001a9e:	1a79      	subs	r1, r7, r1
 8001aa0:	408b      	lsls	r3, r1
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	1e53      	subs	r3, r2, #1
 8001aa6:	419a      	sbcs	r2, r3
 8001aa8:	4663      	mov	r3, ip
 8001aaa:	0017      	movs	r7, r2
 8001aac:	431f      	orrs	r7, r3
 8001aae:	e635      	b.n	800171c <__aeabi_dadd+0x1ec>
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	2400      	movs	r4, #0
 8001ab4:	2600      	movs	r6, #0
 8001ab6:	e684      	b.n	80017c2 <__aeabi_dadd+0x292>
 8001ab8:	000c      	movs	r4, r1
 8001aba:	0035      	movs	r5, r6
 8001abc:	3c20      	subs	r4, #32
 8001abe:	40e5      	lsrs	r5, r4
 8001ac0:	2920      	cmp	r1, #32
 8001ac2:	d005      	beq.n	8001ad0 <__aeabi_dadd+0x5a0>
 8001ac4:	2440      	movs	r4, #64	@ 0x40
 8001ac6:	1a61      	subs	r1, r4, r1
 8001ac8:	408e      	lsls	r6, r1
 8001aca:	4649      	mov	r1, r9
 8001acc:	4331      	orrs	r1, r6
 8001ace:	4689      	mov	r9, r1
 8001ad0:	4648      	mov	r0, r9
 8001ad2:	1e41      	subs	r1, r0, #1
 8001ad4:	4188      	sbcs	r0, r1
 8001ad6:	0007      	movs	r7, r0
 8001ad8:	432f      	orrs	r7, r5
 8001ada:	e5ef      	b.n	80016bc <__aeabi_dadd+0x18c>
 8001adc:	08d2      	lsrs	r2, r2, #3
 8001ade:	075f      	lsls	r7, r3, #29
 8001ae0:	4665      	mov	r5, ip
 8001ae2:	4317      	orrs	r7, r2
 8001ae4:	08d8      	lsrs	r0, r3, #3
 8001ae6:	e687      	b.n	80017f8 <__aeabi_dadd+0x2c8>
 8001ae8:	1a17      	subs	r7, r2, r0
 8001aea:	42ba      	cmp	r2, r7
 8001aec:	4192      	sbcs	r2, r2
 8001aee:	1b9e      	subs	r6, r3, r6
 8001af0:	4252      	negs	r2, r2
 8001af2:	1ab6      	subs	r6, r6, r2
 8001af4:	0233      	lsls	r3, r6, #8
 8001af6:	d4c1      	bmi.n	8001a7c <__aeabi_dadd+0x54c>
 8001af8:	0773      	lsls	r3, r6, #29
 8001afa:	08ff      	lsrs	r7, r7, #3
 8001afc:	4665      	mov	r5, ip
 8001afe:	2101      	movs	r1, #1
 8001b00:	431f      	orrs	r7, r3
 8001b02:	08f0      	lsrs	r0, r6, #3
 8001b04:	e64b      	b.n	800179e <__aeabi_dadd+0x26e>
 8001b06:	2f00      	cmp	r7, #0
 8001b08:	d07b      	beq.n	8001c02 <__aeabi_dadd+0x6d2>
 8001b0a:	4665      	mov	r5, ip
 8001b0c:	001e      	movs	r6, r3
 8001b0e:	4691      	mov	r9, r2
 8001b10:	e63f      	b.n	8001792 <__aeabi_dadd+0x262>
 8001b12:	1a81      	subs	r1, r0, r2
 8001b14:	4688      	mov	r8, r1
 8001b16:	45c1      	cmp	r9, r8
 8001b18:	41a4      	sbcs	r4, r4
 8001b1a:	1af1      	subs	r1, r6, r3
 8001b1c:	4264      	negs	r4, r4
 8001b1e:	1b09      	subs	r1, r1, r4
 8001b20:	2480      	movs	r4, #128	@ 0x80
 8001b22:	0424      	lsls	r4, r4, #16
 8001b24:	4221      	tst	r1, r4
 8001b26:	d077      	beq.n	8001c18 <__aeabi_dadd+0x6e8>
 8001b28:	1a10      	subs	r0, r2, r0
 8001b2a:	4282      	cmp	r2, r0
 8001b2c:	4192      	sbcs	r2, r2
 8001b2e:	0007      	movs	r7, r0
 8001b30:	1b9e      	subs	r6, r3, r6
 8001b32:	4252      	negs	r2, r2
 8001b34:	1ab6      	subs	r6, r6, r2
 8001b36:	4337      	orrs	r7, r6
 8001b38:	d000      	beq.n	8001b3c <__aeabi_dadd+0x60c>
 8001b3a:	e0a0      	b.n	8001c7e <__aeabi_dadd+0x74e>
 8001b3c:	4665      	mov	r5, ip
 8001b3e:	2400      	movs	r4, #0
 8001b40:	2600      	movs	r6, #0
 8001b42:	e63e      	b.n	80017c2 <__aeabi_dadd+0x292>
 8001b44:	075f      	lsls	r7, r3, #29
 8001b46:	08d2      	lsrs	r2, r2, #3
 8001b48:	4665      	mov	r5, ip
 8001b4a:	4317      	orrs	r7, r2
 8001b4c:	08d8      	lsrs	r0, r3, #3
 8001b4e:	e653      	b.n	80017f8 <__aeabi_dadd+0x2c8>
 8001b50:	1881      	adds	r1, r0, r2
 8001b52:	4291      	cmp	r1, r2
 8001b54:	4192      	sbcs	r2, r2
 8001b56:	18f0      	adds	r0, r6, r3
 8001b58:	4252      	negs	r2, r2
 8001b5a:	1880      	adds	r0, r0, r2
 8001b5c:	0203      	lsls	r3, r0, #8
 8001b5e:	d500      	bpl.n	8001b62 <__aeabi_dadd+0x632>
 8001b60:	e768      	b.n	8001a34 <__aeabi_dadd+0x504>
 8001b62:	0747      	lsls	r7, r0, #29
 8001b64:	08c9      	lsrs	r1, r1, #3
 8001b66:	430f      	orrs	r7, r1
 8001b68:	08c0      	lsrs	r0, r0, #3
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	e617      	b.n	800179e <__aeabi_dadd+0x26e>
 8001b6e:	08d2      	lsrs	r2, r2, #3
 8001b70:	075f      	lsls	r7, r3, #29
 8001b72:	4317      	orrs	r7, r2
 8001b74:	08d8      	lsrs	r0, r3, #3
 8001b76:	e63f      	b.n	80017f8 <__aeabi_dadd+0x2c8>
 8001b78:	000c      	movs	r4, r1
 8001b7a:	2600      	movs	r6, #0
 8001b7c:	2700      	movs	r7, #0
 8001b7e:	e620      	b.n	80017c2 <__aeabi_dadd+0x292>
 8001b80:	2900      	cmp	r1, #0
 8001b82:	d156      	bne.n	8001c32 <__aeabi_dadd+0x702>
 8001b84:	075f      	lsls	r7, r3, #29
 8001b86:	08d2      	lsrs	r2, r2, #3
 8001b88:	4317      	orrs	r7, r2
 8001b8a:	08d8      	lsrs	r0, r3, #3
 8001b8c:	e634      	b.n	80017f8 <__aeabi_dadd+0x2c8>
 8001b8e:	000c      	movs	r4, r1
 8001b90:	001e      	movs	r6, r3
 8001b92:	08d0      	lsrs	r0, r2, #3
 8001b94:	e629      	b.n	80017ea <__aeabi_dadd+0x2ba>
 8001b96:	08c1      	lsrs	r1, r0, #3
 8001b98:	0770      	lsls	r0, r6, #29
 8001b9a:	4301      	orrs	r1, r0
 8001b9c:	08f0      	lsrs	r0, r6, #3
 8001b9e:	2f00      	cmp	r7, #0
 8001ba0:	d062      	beq.n	8001c68 <__aeabi_dadd+0x738>
 8001ba2:	2480      	movs	r4, #128	@ 0x80
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	4220      	tst	r0, r4
 8001ba8:	d007      	beq.n	8001bba <__aeabi_dadd+0x68a>
 8001baa:	08de      	lsrs	r6, r3, #3
 8001bac:	4226      	tst	r6, r4
 8001bae:	d104      	bne.n	8001bba <__aeabi_dadd+0x68a>
 8001bb0:	4665      	mov	r5, ip
 8001bb2:	0030      	movs	r0, r6
 8001bb4:	08d1      	lsrs	r1, r2, #3
 8001bb6:	075b      	lsls	r3, r3, #29
 8001bb8:	4319      	orrs	r1, r3
 8001bba:	0f4f      	lsrs	r7, r1, #29
 8001bbc:	00c9      	lsls	r1, r1, #3
 8001bbe:	08c9      	lsrs	r1, r1, #3
 8001bc0:	077f      	lsls	r7, r7, #29
 8001bc2:	430f      	orrs	r7, r1
 8001bc4:	e618      	b.n	80017f8 <__aeabi_dadd+0x2c8>
 8001bc6:	000c      	movs	r4, r1
 8001bc8:	0030      	movs	r0, r6
 8001bca:	3c20      	subs	r4, #32
 8001bcc:	40e0      	lsrs	r0, r4
 8001bce:	4684      	mov	ip, r0
 8001bd0:	2920      	cmp	r1, #32
 8001bd2:	d005      	beq.n	8001be0 <__aeabi_dadd+0x6b0>
 8001bd4:	2440      	movs	r4, #64	@ 0x40
 8001bd6:	1a61      	subs	r1, r4, r1
 8001bd8:	408e      	lsls	r6, r1
 8001bda:	4649      	mov	r1, r9
 8001bdc:	4331      	orrs	r1, r6
 8001bde:	4689      	mov	r9, r1
 8001be0:	4648      	mov	r0, r9
 8001be2:	1e41      	subs	r1, r0, #1
 8001be4:	4188      	sbcs	r0, r1
 8001be6:	4661      	mov	r1, ip
 8001be8:	0007      	movs	r7, r0
 8001bea:	430f      	orrs	r7, r1
 8001bec:	e630      	b.n	8001850 <__aeabi_dadd+0x320>
 8001bee:	2120      	movs	r1, #32
 8001bf0:	2700      	movs	r7, #0
 8001bf2:	1a09      	subs	r1, r1, r0
 8001bf4:	e50e      	b.n	8001614 <__aeabi_dadd+0xe4>
 8001bf6:	001e      	movs	r6, r3
 8001bf8:	2f00      	cmp	r7, #0
 8001bfa:	d000      	beq.n	8001bfe <__aeabi_dadd+0x6ce>
 8001bfc:	e522      	b.n	8001644 <__aeabi_dadd+0x114>
 8001bfe:	2400      	movs	r4, #0
 8001c00:	e758      	b.n	8001ab4 <__aeabi_dadd+0x584>
 8001c02:	2500      	movs	r5, #0
 8001c04:	2400      	movs	r4, #0
 8001c06:	2600      	movs	r6, #0
 8001c08:	e5db      	b.n	80017c2 <__aeabi_dadd+0x292>
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	000007fe 	.word	0x000007fe
 8001c10:	000007ff 	.word	0x000007ff
 8001c14:	ff7fffff 	.word	0xff7fffff
 8001c18:	4647      	mov	r7, r8
 8001c1a:	430f      	orrs	r7, r1
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dadd+0x6f0>
 8001c1e:	e747      	b.n	8001ab0 <__aeabi_dadd+0x580>
 8001c20:	000e      	movs	r6, r1
 8001c22:	46c1      	mov	r9, r8
 8001c24:	e5b5      	b.n	8001792 <__aeabi_dadd+0x262>
 8001c26:	08df      	lsrs	r7, r3, #3
 8001c28:	0764      	lsls	r4, r4, #29
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	4327      	orrs	r7, r4
 8001c2e:	0900      	lsrs	r0, r0, #4
 8001c30:	e5b5      	b.n	800179e <__aeabi_dadd+0x26e>
 8001c32:	0019      	movs	r1, r3
 8001c34:	08c0      	lsrs	r0, r0, #3
 8001c36:	0777      	lsls	r7, r6, #29
 8001c38:	4307      	orrs	r7, r0
 8001c3a:	4311      	orrs	r1, r2
 8001c3c:	08f0      	lsrs	r0, r6, #3
 8001c3e:	2900      	cmp	r1, #0
 8001c40:	d100      	bne.n	8001c44 <__aeabi_dadd+0x714>
 8001c42:	e5d9      	b.n	80017f8 <__aeabi_dadd+0x2c8>
 8001c44:	2180      	movs	r1, #128	@ 0x80
 8001c46:	0309      	lsls	r1, r1, #12
 8001c48:	4208      	tst	r0, r1
 8001c4a:	d007      	beq.n	8001c5c <__aeabi_dadd+0x72c>
 8001c4c:	08dc      	lsrs	r4, r3, #3
 8001c4e:	420c      	tst	r4, r1
 8001c50:	d104      	bne.n	8001c5c <__aeabi_dadd+0x72c>
 8001c52:	08d2      	lsrs	r2, r2, #3
 8001c54:	075b      	lsls	r3, r3, #29
 8001c56:	431a      	orrs	r2, r3
 8001c58:	0017      	movs	r7, r2
 8001c5a:	0020      	movs	r0, r4
 8001c5c:	0f7b      	lsrs	r3, r7, #29
 8001c5e:	00ff      	lsls	r7, r7, #3
 8001c60:	08ff      	lsrs	r7, r7, #3
 8001c62:	075b      	lsls	r3, r3, #29
 8001c64:	431f      	orrs	r7, r3
 8001c66:	e5c7      	b.n	80017f8 <__aeabi_dadd+0x2c8>
 8001c68:	000f      	movs	r7, r1
 8001c6a:	e5c5      	b.n	80017f8 <__aeabi_dadd+0x2c8>
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <__aeabi_dadd+0x788>)
 8001c6e:	08d2      	lsrs	r2, r2, #3
 8001c70:	4033      	ands	r3, r6
 8001c72:	075f      	lsls	r7, r3, #29
 8001c74:	025b      	lsls	r3, r3, #9
 8001c76:	2401      	movs	r4, #1
 8001c78:	4317      	orrs	r7, r2
 8001c7a:	0b1e      	lsrs	r6, r3, #12
 8001c7c:	e5a1      	b.n	80017c2 <__aeabi_dadd+0x292>
 8001c7e:	4226      	tst	r6, r4
 8001c80:	d012      	beq.n	8001ca8 <__aeabi_dadd+0x778>
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <__aeabi_dadd+0x788>)
 8001c84:	4665      	mov	r5, ip
 8001c86:	0002      	movs	r2, r0
 8001c88:	2401      	movs	r4, #1
 8001c8a:	401e      	ands	r6, r3
 8001c8c:	e4e6      	b.n	800165c <__aeabi_dadd+0x12c>
 8001c8e:	0021      	movs	r1, r4
 8001c90:	e585      	b.n	800179e <__aeabi_dadd+0x26e>
 8001c92:	0017      	movs	r7, r2
 8001c94:	e5a8      	b.n	80017e8 <__aeabi_dadd+0x2b8>
 8001c96:	003a      	movs	r2, r7
 8001c98:	e4d4      	b.n	8001644 <__aeabi_dadd+0x114>
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	0764      	lsls	r4, r4, #29
 8001c9e:	431c      	orrs	r4, r3
 8001ca0:	0027      	movs	r7, r4
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	0900      	lsrs	r0, r0, #4
 8001ca6:	e57a      	b.n	800179e <__aeabi_dadd+0x26e>
 8001ca8:	08c0      	lsrs	r0, r0, #3
 8001caa:	0777      	lsls	r7, r6, #29
 8001cac:	4307      	orrs	r7, r0
 8001cae:	4665      	mov	r5, ip
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	08f0      	lsrs	r0, r6, #3
 8001cb4:	e573      	b.n	800179e <__aeabi_dadd+0x26e>
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	ff7fffff 	.word	0xff7fffff

08001cbc <__aeabi_ddiv>:
 8001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cbe:	46de      	mov	lr, fp
 8001cc0:	4645      	mov	r5, r8
 8001cc2:	4657      	mov	r7, sl
 8001cc4:	464e      	mov	r6, r9
 8001cc6:	b5e0      	push	{r5, r6, r7, lr}
 8001cc8:	b087      	sub	sp, #28
 8001cca:	9200      	str	r2, [sp, #0]
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	030b      	lsls	r3, r1, #12
 8001cd0:	0b1b      	lsrs	r3, r3, #12
 8001cd2:	469b      	mov	fp, r3
 8001cd4:	0fca      	lsrs	r2, r1, #31
 8001cd6:	004b      	lsls	r3, r1, #1
 8001cd8:	0004      	movs	r4, r0
 8001cda:	4680      	mov	r8, r0
 8001cdc:	0d5b      	lsrs	r3, r3, #21
 8001cde:	9202      	str	r2, [sp, #8]
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_ddiv+0x28>
 8001ce2:	e098      	b.n	8001e16 <__aeabi_ddiv+0x15a>
 8001ce4:	4a7c      	ldr	r2, [pc, #496]	@ (8001ed8 <__aeabi_ddiv+0x21c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d037      	beq.n	8001d5a <__aeabi_ddiv+0x9e>
 8001cea:	4659      	mov	r1, fp
 8001cec:	0f42      	lsrs	r2, r0, #29
 8001cee:	00c9      	lsls	r1, r1, #3
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	2180      	movs	r1, #128	@ 0x80
 8001cf4:	0409      	lsls	r1, r1, #16
 8001cf6:	4311      	orrs	r1, r2
 8001cf8:	00c2      	lsls	r2, r0, #3
 8001cfa:	4690      	mov	r8, r2
 8001cfc:	4a77      	ldr	r2, [pc, #476]	@ (8001edc <__aeabi_ddiv+0x220>)
 8001cfe:	4689      	mov	r9, r1
 8001d00:	4692      	mov	sl, r2
 8001d02:	449a      	add	sl, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	2400      	movs	r4, #0
 8001d08:	9303      	str	r3, [sp, #12]
 8001d0a:	9e00      	ldr	r6, [sp, #0]
 8001d0c:	9f01      	ldr	r7, [sp, #4]
 8001d0e:	033b      	lsls	r3, r7, #12
 8001d10:	0b1b      	lsrs	r3, r3, #12
 8001d12:	469b      	mov	fp, r3
 8001d14:	007b      	lsls	r3, r7, #1
 8001d16:	0030      	movs	r0, r6
 8001d18:	0d5b      	lsrs	r3, r3, #21
 8001d1a:	0ffd      	lsrs	r5, r7, #31
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d059      	beq.n	8001dd4 <__aeabi_ddiv+0x118>
 8001d20:	4a6d      	ldr	r2, [pc, #436]	@ (8001ed8 <__aeabi_ddiv+0x21c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d048      	beq.n	8001db8 <__aeabi_ddiv+0xfc>
 8001d26:	4659      	mov	r1, fp
 8001d28:	0f72      	lsrs	r2, r6, #29
 8001d2a:	00c9      	lsls	r1, r1, #3
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	2180      	movs	r1, #128	@ 0x80
 8001d30:	0409      	lsls	r1, r1, #16
 8001d32:	4311      	orrs	r1, r2
 8001d34:	468b      	mov	fp, r1
 8001d36:	4969      	ldr	r1, [pc, #420]	@ (8001edc <__aeabi_ddiv+0x220>)
 8001d38:	00f2      	lsls	r2, r6, #3
 8001d3a:	468c      	mov	ip, r1
 8001d3c:	4651      	mov	r1, sl
 8001d3e:	4463      	add	r3, ip
 8001d40:	1acb      	subs	r3, r1, r3
 8001d42:	469a      	mov	sl, r3
 8001d44:	2100      	movs	r1, #0
 8001d46:	9e02      	ldr	r6, [sp, #8]
 8001d48:	406e      	eors	r6, r5
 8001d4a:	b2f6      	uxtb	r6, r6
 8001d4c:	2c0f      	cmp	r4, #15
 8001d4e:	d900      	bls.n	8001d52 <__aeabi_ddiv+0x96>
 8001d50:	e0ce      	b.n	8001ef0 <__aeabi_ddiv+0x234>
 8001d52:	4b63      	ldr	r3, [pc, #396]	@ (8001ee0 <__aeabi_ddiv+0x224>)
 8001d54:	00a4      	lsls	r4, r4, #2
 8001d56:	591b      	ldr	r3, [r3, r4]
 8001d58:	469f      	mov	pc, r3
 8001d5a:	465a      	mov	r2, fp
 8001d5c:	4302      	orrs	r2, r0
 8001d5e:	4691      	mov	r9, r2
 8001d60:	d000      	beq.n	8001d64 <__aeabi_ddiv+0xa8>
 8001d62:	e090      	b.n	8001e86 <__aeabi_ddiv+0x1ca>
 8001d64:	469a      	mov	sl, r3
 8001d66:	2302      	movs	r3, #2
 8001d68:	4690      	mov	r8, r2
 8001d6a:	2408      	movs	r4, #8
 8001d6c:	9303      	str	r3, [sp, #12]
 8001d6e:	e7cc      	b.n	8001d0a <__aeabi_ddiv+0x4e>
 8001d70:	46cb      	mov	fp, r9
 8001d72:	4642      	mov	r2, r8
 8001d74:	9d02      	ldr	r5, [sp, #8]
 8001d76:	9903      	ldr	r1, [sp, #12]
 8001d78:	2902      	cmp	r1, #2
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_ddiv+0xc2>
 8001d7c:	e1de      	b.n	800213c <__aeabi_ddiv+0x480>
 8001d7e:	2903      	cmp	r1, #3
 8001d80:	d100      	bne.n	8001d84 <__aeabi_ddiv+0xc8>
 8001d82:	e08d      	b.n	8001ea0 <__aeabi_ddiv+0x1e4>
 8001d84:	2901      	cmp	r1, #1
 8001d86:	d000      	beq.n	8001d8a <__aeabi_ddiv+0xce>
 8001d88:	e179      	b.n	800207e <__aeabi_ddiv+0x3c2>
 8001d8a:	002e      	movs	r6, r5
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2400      	movs	r4, #0
 8001d92:	4690      	mov	r8, r2
 8001d94:	051b      	lsls	r3, r3, #20
 8001d96:	4323      	orrs	r3, r4
 8001d98:	07f6      	lsls	r6, r6, #31
 8001d9a:	4333      	orrs	r3, r6
 8001d9c:	4640      	mov	r0, r8
 8001d9e:	0019      	movs	r1, r3
 8001da0:	b007      	add	sp, #28
 8001da2:	bcf0      	pop	{r4, r5, r6, r7}
 8001da4:	46bb      	mov	fp, r7
 8001da6:	46b2      	mov	sl, r6
 8001da8:	46a9      	mov	r9, r5
 8001daa:	46a0      	mov	r8, r4
 8001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dae:	2200      	movs	r2, #0
 8001db0:	2400      	movs	r4, #0
 8001db2:	4690      	mov	r8, r2
 8001db4:	4b48      	ldr	r3, [pc, #288]	@ (8001ed8 <__aeabi_ddiv+0x21c>)
 8001db6:	e7ed      	b.n	8001d94 <__aeabi_ddiv+0xd8>
 8001db8:	465a      	mov	r2, fp
 8001dba:	9b00      	ldr	r3, [sp, #0]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	4b49      	ldr	r3, [pc, #292]	@ (8001ee4 <__aeabi_ddiv+0x228>)
 8001dc0:	469c      	mov	ip, r3
 8001dc2:	44e2      	add	sl, ip
 8001dc4:	2a00      	cmp	r2, #0
 8001dc6:	d159      	bne.n	8001e7c <__aeabi_ddiv+0x1c0>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	431c      	orrs	r4, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2102      	movs	r1, #2
 8001dd0:	469b      	mov	fp, r3
 8001dd2:	e7b8      	b.n	8001d46 <__aeabi_ddiv+0x8a>
 8001dd4:	465a      	mov	r2, fp
 8001dd6:	9b00      	ldr	r3, [sp, #0]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	d049      	beq.n	8001e70 <__aeabi_ddiv+0x1b4>
 8001ddc:	465b      	mov	r3, fp
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x128>
 8001de2:	e19c      	b.n	800211e <__aeabi_ddiv+0x462>
 8001de4:	4658      	mov	r0, fp
 8001de6:	f001 fb8b 	bl	8003500 <__clzsi2>
 8001dea:	0002      	movs	r2, r0
 8001dec:	0003      	movs	r3, r0
 8001dee:	3a0b      	subs	r2, #11
 8001df0:	271d      	movs	r7, #29
 8001df2:	9e00      	ldr	r6, [sp, #0]
 8001df4:	1aba      	subs	r2, r7, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	4658      	mov	r0, fp
 8001dfa:	40d6      	lsrs	r6, r2
 8001dfc:	3908      	subs	r1, #8
 8001dfe:	4088      	lsls	r0, r1
 8001e00:	0032      	movs	r2, r6
 8001e02:	4302      	orrs	r2, r0
 8001e04:	4693      	mov	fp, r2
 8001e06:	9a00      	ldr	r2, [sp, #0]
 8001e08:	408a      	lsls	r2, r1
 8001e0a:	4937      	ldr	r1, [pc, #220]	@ (8001ee8 <__aeabi_ddiv+0x22c>)
 8001e0c:	4453      	add	r3, sl
 8001e0e:	468a      	mov	sl, r1
 8001e10:	2100      	movs	r1, #0
 8001e12:	449a      	add	sl, r3
 8001e14:	e797      	b.n	8001d46 <__aeabi_ddiv+0x8a>
 8001e16:	465b      	mov	r3, fp
 8001e18:	4303      	orrs	r3, r0
 8001e1a:	4699      	mov	r9, r3
 8001e1c:	d021      	beq.n	8001e62 <__aeabi_ddiv+0x1a6>
 8001e1e:	465b      	mov	r3, fp
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0x16a>
 8001e24:	e169      	b.n	80020fa <__aeabi_ddiv+0x43e>
 8001e26:	4658      	mov	r0, fp
 8001e28:	f001 fb6a 	bl	8003500 <__clzsi2>
 8001e2c:	230b      	movs	r3, #11
 8001e2e:	425b      	negs	r3, r3
 8001e30:	469c      	mov	ip, r3
 8001e32:	0002      	movs	r2, r0
 8001e34:	4484      	add	ip, r0
 8001e36:	4666      	mov	r6, ip
 8001e38:	231d      	movs	r3, #29
 8001e3a:	1b9b      	subs	r3, r3, r6
 8001e3c:	0026      	movs	r6, r4
 8001e3e:	0011      	movs	r1, r2
 8001e40:	4658      	mov	r0, fp
 8001e42:	40de      	lsrs	r6, r3
 8001e44:	3908      	subs	r1, #8
 8001e46:	4088      	lsls	r0, r1
 8001e48:	0033      	movs	r3, r6
 8001e4a:	4303      	orrs	r3, r0
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	0023      	movs	r3, r4
 8001e50:	408b      	lsls	r3, r1
 8001e52:	4698      	mov	r8, r3
 8001e54:	4b25      	ldr	r3, [pc, #148]	@ (8001eec <__aeabi_ddiv+0x230>)
 8001e56:	2400      	movs	r4, #0
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	469a      	mov	sl, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9303      	str	r3, [sp, #12]
 8001e60:	e753      	b.n	8001d0a <__aeabi_ddiv+0x4e>
 8001e62:	2300      	movs	r3, #0
 8001e64:	4698      	mov	r8, r3
 8001e66:	469a      	mov	sl, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	2404      	movs	r4, #4
 8001e6c:	9303      	str	r3, [sp, #12]
 8001e6e:	e74c      	b.n	8001d0a <__aeabi_ddiv+0x4e>
 8001e70:	2301      	movs	r3, #1
 8001e72:	431c      	orrs	r4, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	2101      	movs	r1, #1
 8001e78:	469b      	mov	fp, r3
 8001e7a:	e764      	b.n	8001d46 <__aeabi_ddiv+0x8a>
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	0032      	movs	r2, r6
 8001e80:	2103      	movs	r1, #3
 8001e82:	431c      	orrs	r4, r3
 8001e84:	e75f      	b.n	8001d46 <__aeabi_ddiv+0x8a>
 8001e86:	469a      	mov	sl, r3
 8001e88:	2303      	movs	r3, #3
 8001e8a:	46d9      	mov	r9, fp
 8001e8c:	240c      	movs	r4, #12
 8001e8e:	9303      	str	r3, [sp, #12]
 8001e90:	e73b      	b.n	8001d0a <__aeabi_ddiv+0x4e>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2480      	movs	r4, #128	@ 0x80
 8001e96:	4698      	mov	r8, r3
 8001e98:	2600      	movs	r6, #0
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <__aeabi_ddiv+0x21c>)
 8001e9c:	0324      	lsls	r4, r4, #12
 8001e9e:	e779      	b.n	8001d94 <__aeabi_ddiv+0xd8>
 8001ea0:	2480      	movs	r4, #128	@ 0x80
 8001ea2:	465b      	mov	r3, fp
 8001ea4:	0324      	lsls	r4, r4, #12
 8001ea6:	431c      	orrs	r4, r3
 8001ea8:	0324      	lsls	r4, r4, #12
 8001eaa:	002e      	movs	r6, r5
 8001eac:	4690      	mov	r8, r2
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <__aeabi_ddiv+0x21c>)
 8001eb0:	0b24      	lsrs	r4, r4, #12
 8001eb2:	e76f      	b.n	8001d94 <__aeabi_ddiv+0xd8>
 8001eb4:	2480      	movs	r4, #128	@ 0x80
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	0324      	lsls	r4, r4, #12
 8001eba:	4223      	tst	r3, r4
 8001ebc:	d002      	beq.n	8001ec4 <__aeabi_ddiv+0x208>
 8001ebe:	465b      	mov	r3, fp
 8001ec0:	4223      	tst	r3, r4
 8001ec2:	d0f0      	beq.n	8001ea6 <__aeabi_ddiv+0x1ea>
 8001ec4:	2480      	movs	r4, #128	@ 0x80
 8001ec6:	464b      	mov	r3, r9
 8001ec8:	0324      	lsls	r4, r4, #12
 8001eca:	431c      	orrs	r4, r3
 8001ecc:	0324      	lsls	r4, r4, #12
 8001ece:	9e02      	ldr	r6, [sp, #8]
 8001ed0:	4b01      	ldr	r3, [pc, #4]	@ (8001ed8 <__aeabi_ddiv+0x21c>)
 8001ed2:	0b24      	lsrs	r4, r4, #12
 8001ed4:	e75e      	b.n	8001d94 <__aeabi_ddiv+0xd8>
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	000007ff 	.word	0x000007ff
 8001edc:	fffffc01 	.word	0xfffffc01
 8001ee0:	0800c524 	.word	0x0800c524
 8001ee4:	fffff801 	.word	0xfffff801
 8001ee8:	000003f3 	.word	0x000003f3
 8001eec:	fffffc0d 	.word	0xfffffc0d
 8001ef0:	45cb      	cmp	fp, r9
 8001ef2:	d200      	bcs.n	8001ef6 <__aeabi_ddiv+0x23a>
 8001ef4:	e0f8      	b.n	80020e8 <__aeabi_ddiv+0x42c>
 8001ef6:	d100      	bne.n	8001efa <__aeabi_ddiv+0x23e>
 8001ef8:	e0f3      	b.n	80020e2 <__aeabi_ddiv+0x426>
 8001efa:	2301      	movs	r3, #1
 8001efc:	425b      	negs	r3, r3
 8001efe:	469c      	mov	ip, r3
 8001f00:	4644      	mov	r4, r8
 8001f02:	4648      	mov	r0, r9
 8001f04:	2500      	movs	r5, #0
 8001f06:	44e2      	add	sl, ip
 8001f08:	465b      	mov	r3, fp
 8001f0a:	0e17      	lsrs	r7, r2, #24
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	431f      	orrs	r7, r3
 8001f10:	0c19      	lsrs	r1, r3, #16
 8001f12:	043b      	lsls	r3, r7, #16
 8001f14:	0212      	lsls	r2, r2, #8
 8001f16:	9700      	str	r7, [sp, #0]
 8001f18:	0c1f      	lsrs	r7, r3, #16
 8001f1a:	4691      	mov	r9, r2
 8001f1c:	9102      	str	r1, [sp, #8]
 8001f1e:	9703      	str	r7, [sp, #12]
 8001f20:	f7fe f992 	bl	8000248 <__aeabi_uidivmod>
 8001f24:	0002      	movs	r2, r0
 8001f26:	437a      	muls	r2, r7
 8001f28:	040b      	lsls	r3, r1, #16
 8001f2a:	0c21      	lsrs	r1, r4, #16
 8001f2c:	4680      	mov	r8, r0
 8001f2e:	4319      	orrs	r1, r3
 8001f30:	428a      	cmp	r2, r1
 8001f32:	d909      	bls.n	8001f48 <__aeabi_ddiv+0x28c>
 8001f34:	9f00      	ldr	r7, [sp, #0]
 8001f36:	2301      	movs	r3, #1
 8001f38:	46bc      	mov	ip, r7
 8001f3a:	425b      	negs	r3, r3
 8001f3c:	4461      	add	r1, ip
 8001f3e:	469c      	mov	ip, r3
 8001f40:	44e0      	add	r8, ip
 8001f42:	428f      	cmp	r7, r1
 8001f44:	d800      	bhi.n	8001f48 <__aeabi_ddiv+0x28c>
 8001f46:	e15c      	b.n	8002202 <__aeabi_ddiv+0x546>
 8001f48:	1a88      	subs	r0, r1, r2
 8001f4a:	9902      	ldr	r1, [sp, #8]
 8001f4c:	f7fe f97c 	bl	8000248 <__aeabi_uidivmod>
 8001f50:	9a03      	ldr	r2, [sp, #12]
 8001f52:	0424      	lsls	r4, r4, #16
 8001f54:	4342      	muls	r2, r0
 8001f56:	0409      	lsls	r1, r1, #16
 8001f58:	0c24      	lsrs	r4, r4, #16
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	430c      	orrs	r4, r1
 8001f5e:	42a2      	cmp	r2, r4
 8001f60:	d906      	bls.n	8001f70 <__aeabi_ddiv+0x2b4>
 8001f62:	9900      	ldr	r1, [sp, #0]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	468c      	mov	ip, r1
 8001f68:	4464      	add	r4, ip
 8001f6a:	42a1      	cmp	r1, r4
 8001f6c:	d800      	bhi.n	8001f70 <__aeabi_ddiv+0x2b4>
 8001f6e:	e142      	b.n	80021f6 <__aeabi_ddiv+0x53a>
 8001f70:	1aa0      	subs	r0, r4, r2
 8001f72:	4642      	mov	r2, r8
 8001f74:	0412      	lsls	r2, r2, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	4693      	mov	fp, r2
 8001f7a:	464b      	mov	r3, r9
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	001f      	movs	r7, r3
 8001f82:	9304      	str	r3, [sp, #16]
 8001f84:	040b      	lsls	r3, r1, #16
 8001f86:	4649      	mov	r1, r9
 8001f88:	0409      	lsls	r1, r1, #16
 8001f8a:	0c09      	lsrs	r1, r1, #16
 8001f8c:	000c      	movs	r4, r1
 8001f8e:	0c1b      	lsrs	r3, r3, #16
 8001f90:	435c      	muls	r4, r3
 8001f92:	0c12      	lsrs	r2, r2, #16
 8001f94:	437b      	muls	r3, r7
 8001f96:	4688      	mov	r8, r1
 8001f98:	4351      	muls	r1, r2
 8001f9a:	437a      	muls	r2, r7
 8001f9c:	0c27      	lsrs	r7, r4, #16
 8001f9e:	46bc      	mov	ip, r7
 8001fa0:	185b      	adds	r3, r3, r1
 8001fa2:	4463      	add	r3, ip
 8001fa4:	4299      	cmp	r1, r3
 8001fa6:	d903      	bls.n	8001fb0 <__aeabi_ddiv+0x2f4>
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	0249      	lsls	r1, r1, #9
 8001fac:	468c      	mov	ip, r1
 8001fae:	4462      	add	r2, ip
 8001fb0:	0c19      	lsrs	r1, r3, #16
 8001fb2:	0424      	lsls	r4, r4, #16
 8001fb4:	041b      	lsls	r3, r3, #16
 8001fb6:	0c24      	lsrs	r4, r4, #16
 8001fb8:	188a      	adds	r2, r1, r2
 8001fba:	191c      	adds	r4, r3, r4
 8001fbc:	4290      	cmp	r0, r2
 8001fbe:	d302      	bcc.n	8001fc6 <__aeabi_ddiv+0x30a>
 8001fc0:	d116      	bne.n	8001ff0 <__aeabi_ddiv+0x334>
 8001fc2:	42a5      	cmp	r5, r4
 8001fc4:	d214      	bcs.n	8001ff0 <__aeabi_ddiv+0x334>
 8001fc6:	465b      	mov	r3, fp
 8001fc8:	9f00      	ldr	r7, [sp, #0]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	444d      	add	r5, r9
 8001fce:	9305      	str	r3, [sp, #20]
 8001fd0:	454d      	cmp	r5, r9
 8001fd2:	419b      	sbcs	r3, r3
 8001fd4:	46bc      	mov	ip, r7
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	4463      	add	r3, ip
 8001fda:	18c0      	adds	r0, r0, r3
 8001fdc:	4287      	cmp	r7, r0
 8001fde:	d300      	bcc.n	8001fe2 <__aeabi_ddiv+0x326>
 8001fe0:	e102      	b.n	80021e8 <__aeabi_ddiv+0x52c>
 8001fe2:	4282      	cmp	r2, r0
 8001fe4:	d900      	bls.n	8001fe8 <__aeabi_ddiv+0x32c>
 8001fe6:	e129      	b.n	800223c <__aeabi_ddiv+0x580>
 8001fe8:	d100      	bne.n	8001fec <__aeabi_ddiv+0x330>
 8001fea:	e124      	b.n	8002236 <__aeabi_ddiv+0x57a>
 8001fec:	9b05      	ldr	r3, [sp, #20]
 8001fee:	469b      	mov	fp, r3
 8001ff0:	1b2c      	subs	r4, r5, r4
 8001ff2:	42a5      	cmp	r5, r4
 8001ff4:	41ad      	sbcs	r5, r5
 8001ff6:	9b00      	ldr	r3, [sp, #0]
 8001ff8:	1a80      	subs	r0, r0, r2
 8001ffa:	426d      	negs	r5, r5
 8001ffc:	1b40      	subs	r0, r0, r5
 8001ffe:	4283      	cmp	r3, r0
 8002000:	d100      	bne.n	8002004 <__aeabi_ddiv+0x348>
 8002002:	e10f      	b.n	8002224 <__aeabi_ddiv+0x568>
 8002004:	9902      	ldr	r1, [sp, #8]
 8002006:	f7fe f91f 	bl	8000248 <__aeabi_uidivmod>
 800200a:	9a03      	ldr	r2, [sp, #12]
 800200c:	040b      	lsls	r3, r1, #16
 800200e:	4342      	muls	r2, r0
 8002010:	0c21      	lsrs	r1, r4, #16
 8002012:	0005      	movs	r5, r0
 8002014:	4319      	orrs	r1, r3
 8002016:	428a      	cmp	r2, r1
 8002018:	d900      	bls.n	800201c <__aeabi_ddiv+0x360>
 800201a:	e0cb      	b.n	80021b4 <__aeabi_ddiv+0x4f8>
 800201c:	1a88      	subs	r0, r1, r2
 800201e:	9902      	ldr	r1, [sp, #8]
 8002020:	f7fe f912 	bl	8000248 <__aeabi_uidivmod>
 8002024:	9a03      	ldr	r2, [sp, #12]
 8002026:	0424      	lsls	r4, r4, #16
 8002028:	4342      	muls	r2, r0
 800202a:	0409      	lsls	r1, r1, #16
 800202c:	0c24      	lsrs	r4, r4, #16
 800202e:	0003      	movs	r3, r0
 8002030:	430c      	orrs	r4, r1
 8002032:	42a2      	cmp	r2, r4
 8002034:	d900      	bls.n	8002038 <__aeabi_ddiv+0x37c>
 8002036:	e0ca      	b.n	80021ce <__aeabi_ddiv+0x512>
 8002038:	4641      	mov	r1, r8
 800203a:	1aa4      	subs	r4, r4, r2
 800203c:	042a      	lsls	r2, r5, #16
 800203e:	431a      	orrs	r2, r3
 8002040:	9f04      	ldr	r7, [sp, #16]
 8002042:	0413      	lsls	r3, r2, #16
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	4359      	muls	r1, r3
 8002048:	4640      	mov	r0, r8
 800204a:	437b      	muls	r3, r7
 800204c:	469c      	mov	ip, r3
 800204e:	0c15      	lsrs	r5, r2, #16
 8002050:	4368      	muls	r0, r5
 8002052:	0c0b      	lsrs	r3, r1, #16
 8002054:	4484      	add	ip, r0
 8002056:	4463      	add	r3, ip
 8002058:	437d      	muls	r5, r7
 800205a:	4298      	cmp	r0, r3
 800205c:	d903      	bls.n	8002066 <__aeabi_ddiv+0x3aa>
 800205e:	2080      	movs	r0, #128	@ 0x80
 8002060:	0240      	lsls	r0, r0, #9
 8002062:	4684      	mov	ip, r0
 8002064:	4465      	add	r5, ip
 8002066:	0c18      	lsrs	r0, r3, #16
 8002068:	0409      	lsls	r1, r1, #16
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	0c09      	lsrs	r1, r1, #16
 800206e:	1940      	adds	r0, r0, r5
 8002070:	185b      	adds	r3, r3, r1
 8002072:	4284      	cmp	r4, r0
 8002074:	d327      	bcc.n	80020c6 <__aeabi_ddiv+0x40a>
 8002076:	d023      	beq.n	80020c0 <__aeabi_ddiv+0x404>
 8002078:	2301      	movs	r3, #1
 800207a:	0035      	movs	r5, r6
 800207c:	431a      	orrs	r2, r3
 800207e:	4b94      	ldr	r3, [pc, #592]	@ (80022d0 <__aeabi_ddiv+0x614>)
 8002080:	4453      	add	r3, sl
 8002082:	2b00      	cmp	r3, #0
 8002084:	dd60      	ble.n	8002148 <__aeabi_ddiv+0x48c>
 8002086:	0751      	lsls	r1, r2, #29
 8002088:	d000      	beq.n	800208c <__aeabi_ddiv+0x3d0>
 800208a:	e086      	b.n	800219a <__aeabi_ddiv+0x4de>
 800208c:	002e      	movs	r6, r5
 800208e:	08d1      	lsrs	r1, r2, #3
 8002090:	465a      	mov	r2, fp
 8002092:	01d2      	lsls	r2, r2, #7
 8002094:	d506      	bpl.n	80020a4 <__aeabi_ddiv+0x3e8>
 8002096:	465a      	mov	r2, fp
 8002098:	4b8e      	ldr	r3, [pc, #568]	@ (80022d4 <__aeabi_ddiv+0x618>)
 800209a:	401a      	ands	r2, r3
 800209c:	2380      	movs	r3, #128	@ 0x80
 800209e:	4693      	mov	fp, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4453      	add	r3, sl
 80020a4:	4a8c      	ldr	r2, [pc, #560]	@ (80022d8 <__aeabi_ddiv+0x61c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	dd00      	ble.n	80020ac <__aeabi_ddiv+0x3f0>
 80020aa:	e680      	b.n	8001dae <__aeabi_ddiv+0xf2>
 80020ac:	465a      	mov	r2, fp
 80020ae:	0752      	lsls	r2, r2, #29
 80020b0:	430a      	orrs	r2, r1
 80020b2:	4690      	mov	r8, r2
 80020b4:	465a      	mov	r2, fp
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	0254      	lsls	r4, r2, #9
 80020ba:	0b24      	lsrs	r4, r4, #12
 80020bc:	0d5b      	lsrs	r3, r3, #21
 80020be:	e669      	b.n	8001d94 <__aeabi_ddiv+0xd8>
 80020c0:	0035      	movs	r5, r6
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0db      	beq.n	800207e <__aeabi_ddiv+0x3c2>
 80020c6:	9d00      	ldr	r5, [sp, #0]
 80020c8:	1e51      	subs	r1, r2, #1
 80020ca:	46ac      	mov	ip, r5
 80020cc:	4464      	add	r4, ip
 80020ce:	42ac      	cmp	r4, r5
 80020d0:	d200      	bcs.n	80020d4 <__aeabi_ddiv+0x418>
 80020d2:	e09e      	b.n	8002212 <__aeabi_ddiv+0x556>
 80020d4:	4284      	cmp	r4, r0
 80020d6:	d200      	bcs.n	80020da <__aeabi_ddiv+0x41e>
 80020d8:	e0e1      	b.n	800229e <__aeabi_ddiv+0x5e2>
 80020da:	d100      	bne.n	80020de <__aeabi_ddiv+0x422>
 80020dc:	e0ee      	b.n	80022bc <__aeabi_ddiv+0x600>
 80020de:	000a      	movs	r2, r1
 80020e0:	e7ca      	b.n	8002078 <__aeabi_ddiv+0x3bc>
 80020e2:	4542      	cmp	r2, r8
 80020e4:	d900      	bls.n	80020e8 <__aeabi_ddiv+0x42c>
 80020e6:	e708      	b.n	8001efa <__aeabi_ddiv+0x23e>
 80020e8:	464b      	mov	r3, r9
 80020ea:	07dc      	lsls	r4, r3, #31
 80020ec:	0858      	lsrs	r0, r3, #1
 80020ee:	4643      	mov	r3, r8
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	431c      	orrs	r4, r3
 80020f4:	4643      	mov	r3, r8
 80020f6:	07dd      	lsls	r5, r3, #31
 80020f8:	e706      	b.n	8001f08 <__aeabi_ddiv+0x24c>
 80020fa:	f001 fa01 	bl	8003500 <__clzsi2>
 80020fe:	2315      	movs	r3, #21
 8002100:	469c      	mov	ip, r3
 8002102:	4484      	add	ip, r0
 8002104:	0002      	movs	r2, r0
 8002106:	4663      	mov	r3, ip
 8002108:	3220      	adds	r2, #32
 800210a:	2b1c      	cmp	r3, #28
 800210c:	dc00      	bgt.n	8002110 <__aeabi_ddiv+0x454>
 800210e:	e692      	b.n	8001e36 <__aeabi_ddiv+0x17a>
 8002110:	0023      	movs	r3, r4
 8002112:	3808      	subs	r0, #8
 8002114:	4083      	lsls	r3, r0
 8002116:	4699      	mov	r9, r3
 8002118:	2300      	movs	r3, #0
 800211a:	4698      	mov	r8, r3
 800211c:	e69a      	b.n	8001e54 <__aeabi_ddiv+0x198>
 800211e:	f001 f9ef 	bl	8003500 <__clzsi2>
 8002122:	0002      	movs	r2, r0
 8002124:	0003      	movs	r3, r0
 8002126:	3215      	adds	r2, #21
 8002128:	3320      	adds	r3, #32
 800212a:	2a1c      	cmp	r2, #28
 800212c:	dc00      	bgt.n	8002130 <__aeabi_ddiv+0x474>
 800212e:	e65f      	b.n	8001df0 <__aeabi_ddiv+0x134>
 8002130:	9900      	ldr	r1, [sp, #0]
 8002132:	3808      	subs	r0, #8
 8002134:	4081      	lsls	r1, r0
 8002136:	2200      	movs	r2, #0
 8002138:	468b      	mov	fp, r1
 800213a:	e666      	b.n	8001e0a <__aeabi_ddiv+0x14e>
 800213c:	2200      	movs	r2, #0
 800213e:	002e      	movs	r6, r5
 8002140:	2400      	movs	r4, #0
 8002142:	4690      	mov	r8, r2
 8002144:	4b65      	ldr	r3, [pc, #404]	@ (80022dc <__aeabi_ddiv+0x620>)
 8002146:	e625      	b.n	8001d94 <__aeabi_ddiv+0xd8>
 8002148:	002e      	movs	r6, r5
 800214a:	2101      	movs	r1, #1
 800214c:	1ac9      	subs	r1, r1, r3
 800214e:	2938      	cmp	r1, #56	@ 0x38
 8002150:	dd00      	ble.n	8002154 <__aeabi_ddiv+0x498>
 8002152:	e61b      	b.n	8001d8c <__aeabi_ddiv+0xd0>
 8002154:	291f      	cmp	r1, #31
 8002156:	dc7e      	bgt.n	8002256 <__aeabi_ddiv+0x59a>
 8002158:	4861      	ldr	r0, [pc, #388]	@ (80022e0 <__aeabi_ddiv+0x624>)
 800215a:	0014      	movs	r4, r2
 800215c:	4450      	add	r0, sl
 800215e:	465b      	mov	r3, fp
 8002160:	4082      	lsls	r2, r0
 8002162:	4083      	lsls	r3, r0
 8002164:	40cc      	lsrs	r4, r1
 8002166:	1e50      	subs	r0, r2, #1
 8002168:	4182      	sbcs	r2, r0
 800216a:	4323      	orrs	r3, r4
 800216c:	431a      	orrs	r2, r3
 800216e:	465b      	mov	r3, fp
 8002170:	40cb      	lsrs	r3, r1
 8002172:	0751      	lsls	r1, r2, #29
 8002174:	d009      	beq.n	800218a <__aeabi_ddiv+0x4ce>
 8002176:	210f      	movs	r1, #15
 8002178:	4011      	ands	r1, r2
 800217a:	2904      	cmp	r1, #4
 800217c:	d005      	beq.n	800218a <__aeabi_ddiv+0x4ce>
 800217e:	1d11      	adds	r1, r2, #4
 8002180:	4291      	cmp	r1, r2
 8002182:	4192      	sbcs	r2, r2
 8002184:	4252      	negs	r2, r2
 8002186:	189b      	adds	r3, r3, r2
 8002188:	000a      	movs	r2, r1
 800218a:	0219      	lsls	r1, r3, #8
 800218c:	d400      	bmi.n	8002190 <__aeabi_ddiv+0x4d4>
 800218e:	e09b      	b.n	80022c8 <__aeabi_ddiv+0x60c>
 8002190:	2200      	movs	r2, #0
 8002192:	2301      	movs	r3, #1
 8002194:	2400      	movs	r4, #0
 8002196:	4690      	mov	r8, r2
 8002198:	e5fc      	b.n	8001d94 <__aeabi_ddiv+0xd8>
 800219a:	210f      	movs	r1, #15
 800219c:	4011      	ands	r1, r2
 800219e:	2904      	cmp	r1, #4
 80021a0:	d100      	bne.n	80021a4 <__aeabi_ddiv+0x4e8>
 80021a2:	e773      	b.n	800208c <__aeabi_ddiv+0x3d0>
 80021a4:	1d11      	adds	r1, r2, #4
 80021a6:	4291      	cmp	r1, r2
 80021a8:	4192      	sbcs	r2, r2
 80021aa:	4252      	negs	r2, r2
 80021ac:	002e      	movs	r6, r5
 80021ae:	08c9      	lsrs	r1, r1, #3
 80021b0:	4493      	add	fp, r2
 80021b2:	e76d      	b.n	8002090 <__aeabi_ddiv+0x3d4>
 80021b4:	9b00      	ldr	r3, [sp, #0]
 80021b6:	3d01      	subs	r5, #1
 80021b8:	469c      	mov	ip, r3
 80021ba:	4461      	add	r1, ip
 80021bc:	428b      	cmp	r3, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x506>
 80021c0:	e72c      	b.n	800201c <__aeabi_ddiv+0x360>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x50c>
 80021c6:	e729      	b.n	800201c <__aeabi_ddiv+0x360>
 80021c8:	1e85      	subs	r5, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e726      	b.n	800201c <__aeabi_ddiv+0x360>
 80021ce:	9900      	ldr	r1, [sp, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	468c      	mov	ip, r1
 80021d4:	4464      	add	r4, ip
 80021d6:	42a1      	cmp	r1, r4
 80021d8:	d900      	bls.n	80021dc <__aeabi_ddiv+0x520>
 80021da:	e72d      	b.n	8002038 <__aeabi_ddiv+0x37c>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x526>
 80021e0:	e72a      	b.n	8002038 <__aeabi_ddiv+0x37c>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e727      	b.n	8002038 <__aeabi_ddiv+0x37c>
 80021e8:	4287      	cmp	r7, r0
 80021ea:	d000      	beq.n	80021ee <__aeabi_ddiv+0x532>
 80021ec:	e6fe      	b.n	8001fec <__aeabi_ddiv+0x330>
 80021ee:	45a9      	cmp	r9, r5
 80021f0:	d900      	bls.n	80021f4 <__aeabi_ddiv+0x538>
 80021f2:	e6fb      	b.n	8001fec <__aeabi_ddiv+0x330>
 80021f4:	e6f5      	b.n	8001fe2 <__aeabi_ddiv+0x326>
 80021f6:	42a2      	cmp	r2, r4
 80021f8:	d800      	bhi.n	80021fc <__aeabi_ddiv+0x540>
 80021fa:	e6b9      	b.n	8001f70 <__aeabi_ddiv+0x2b4>
 80021fc:	1e83      	subs	r3, r0, #2
 80021fe:	4464      	add	r4, ip
 8002200:	e6b6      	b.n	8001f70 <__aeabi_ddiv+0x2b4>
 8002202:	428a      	cmp	r2, r1
 8002204:	d800      	bhi.n	8002208 <__aeabi_ddiv+0x54c>
 8002206:	e69f      	b.n	8001f48 <__aeabi_ddiv+0x28c>
 8002208:	46bc      	mov	ip, r7
 800220a:	1e83      	subs	r3, r0, #2
 800220c:	4698      	mov	r8, r3
 800220e:	4461      	add	r1, ip
 8002210:	e69a      	b.n	8001f48 <__aeabi_ddiv+0x28c>
 8002212:	000a      	movs	r2, r1
 8002214:	4284      	cmp	r4, r0
 8002216:	d000      	beq.n	800221a <__aeabi_ddiv+0x55e>
 8002218:	e72e      	b.n	8002078 <__aeabi_ddiv+0x3bc>
 800221a:	454b      	cmp	r3, r9
 800221c:	d000      	beq.n	8002220 <__aeabi_ddiv+0x564>
 800221e:	e72b      	b.n	8002078 <__aeabi_ddiv+0x3bc>
 8002220:	0035      	movs	r5, r6
 8002222:	e72c      	b.n	800207e <__aeabi_ddiv+0x3c2>
 8002224:	4b2a      	ldr	r3, [pc, #168]	@ (80022d0 <__aeabi_ddiv+0x614>)
 8002226:	4a2f      	ldr	r2, [pc, #188]	@ (80022e4 <__aeabi_ddiv+0x628>)
 8002228:	4453      	add	r3, sl
 800222a:	4592      	cmp	sl, r2
 800222c:	db43      	blt.n	80022b6 <__aeabi_ddiv+0x5fa>
 800222e:	2201      	movs	r2, #1
 8002230:	2100      	movs	r1, #0
 8002232:	4493      	add	fp, r2
 8002234:	e72c      	b.n	8002090 <__aeabi_ddiv+0x3d4>
 8002236:	42ac      	cmp	r4, r5
 8002238:	d800      	bhi.n	800223c <__aeabi_ddiv+0x580>
 800223a:	e6d7      	b.n	8001fec <__aeabi_ddiv+0x330>
 800223c:	2302      	movs	r3, #2
 800223e:	425b      	negs	r3, r3
 8002240:	469c      	mov	ip, r3
 8002242:	9900      	ldr	r1, [sp, #0]
 8002244:	444d      	add	r5, r9
 8002246:	454d      	cmp	r5, r9
 8002248:	419b      	sbcs	r3, r3
 800224a:	44e3      	add	fp, ip
 800224c:	468c      	mov	ip, r1
 800224e:	425b      	negs	r3, r3
 8002250:	4463      	add	r3, ip
 8002252:	18c0      	adds	r0, r0, r3
 8002254:	e6cc      	b.n	8001ff0 <__aeabi_ddiv+0x334>
 8002256:	201f      	movs	r0, #31
 8002258:	4240      	negs	r0, r0
 800225a:	1ac3      	subs	r3, r0, r3
 800225c:	4658      	mov	r0, fp
 800225e:	40d8      	lsrs	r0, r3
 8002260:	2920      	cmp	r1, #32
 8002262:	d004      	beq.n	800226e <__aeabi_ddiv+0x5b2>
 8002264:	4659      	mov	r1, fp
 8002266:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <__aeabi_ddiv+0x62c>)
 8002268:	4453      	add	r3, sl
 800226a:	4099      	lsls	r1, r3
 800226c:	430a      	orrs	r2, r1
 800226e:	1e53      	subs	r3, r2, #1
 8002270:	419a      	sbcs	r2, r3
 8002272:	2307      	movs	r3, #7
 8002274:	0019      	movs	r1, r3
 8002276:	4302      	orrs	r2, r0
 8002278:	2400      	movs	r4, #0
 800227a:	4011      	ands	r1, r2
 800227c:	4213      	tst	r3, r2
 800227e:	d009      	beq.n	8002294 <__aeabi_ddiv+0x5d8>
 8002280:	3308      	adds	r3, #8
 8002282:	4013      	ands	r3, r2
 8002284:	2b04      	cmp	r3, #4
 8002286:	d01d      	beq.n	80022c4 <__aeabi_ddiv+0x608>
 8002288:	1d13      	adds	r3, r2, #4
 800228a:	4293      	cmp	r3, r2
 800228c:	4189      	sbcs	r1, r1
 800228e:	001a      	movs	r2, r3
 8002290:	4249      	negs	r1, r1
 8002292:	0749      	lsls	r1, r1, #29
 8002294:	08d2      	lsrs	r2, r2, #3
 8002296:	430a      	orrs	r2, r1
 8002298:	4690      	mov	r8, r2
 800229a:	2300      	movs	r3, #0
 800229c:	e57a      	b.n	8001d94 <__aeabi_ddiv+0xd8>
 800229e:	4649      	mov	r1, r9
 80022a0:	9f00      	ldr	r7, [sp, #0]
 80022a2:	004d      	lsls	r5, r1, #1
 80022a4:	454d      	cmp	r5, r9
 80022a6:	4189      	sbcs	r1, r1
 80022a8:	46bc      	mov	ip, r7
 80022aa:	4249      	negs	r1, r1
 80022ac:	4461      	add	r1, ip
 80022ae:	46a9      	mov	r9, r5
 80022b0:	3a02      	subs	r2, #2
 80022b2:	1864      	adds	r4, r4, r1
 80022b4:	e7ae      	b.n	8002214 <__aeabi_ddiv+0x558>
 80022b6:	2201      	movs	r2, #1
 80022b8:	4252      	negs	r2, r2
 80022ba:	e746      	b.n	800214a <__aeabi_ddiv+0x48e>
 80022bc:	4599      	cmp	r9, r3
 80022be:	d3ee      	bcc.n	800229e <__aeabi_ddiv+0x5e2>
 80022c0:	000a      	movs	r2, r1
 80022c2:	e7aa      	b.n	800221a <__aeabi_ddiv+0x55e>
 80022c4:	2100      	movs	r1, #0
 80022c6:	e7e5      	b.n	8002294 <__aeabi_ddiv+0x5d8>
 80022c8:	0759      	lsls	r1, r3, #29
 80022ca:	025b      	lsls	r3, r3, #9
 80022cc:	0b1c      	lsrs	r4, r3, #12
 80022ce:	e7e1      	b.n	8002294 <__aeabi_ddiv+0x5d8>
 80022d0:	000003ff 	.word	0x000003ff
 80022d4:	feffffff 	.word	0xfeffffff
 80022d8:	000007fe 	.word	0x000007fe
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	0000041e 	.word	0x0000041e
 80022e4:	fffffc02 	.word	0xfffffc02
 80022e8:	0000043e 	.word	0x0000043e

080022ec <__eqdf2>:
 80022ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ee:	4657      	mov	r7, sl
 80022f0:	46de      	mov	lr, fp
 80022f2:	464e      	mov	r6, r9
 80022f4:	4645      	mov	r5, r8
 80022f6:	b5e0      	push	{r5, r6, r7, lr}
 80022f8:	000d      	movs	r5, r1
 80022fa:	0004      	movs	r4, r0
 80022fc:	0fe8      	lsrs	r0, r5, #31
 80022fe:	4683      	mov	fp, r0
 8002300:	0309      	lsls	r1, r1, #12
 8002302:	0fd8      	lsrs	r0, r3, #31
 8002304:	0b09      	lsrs	r1, r1, #12
 8002306:	4682      	mov	sl, r0
 8002308:	4819      	ldr	r0, [pc, #100]	@ (8002370 <__eqdf2+0x84>)
 800230a:	468c      	mov	ip, r1
 800230c:	031f      	lsls	r7, r3, #12
 800230e:	0069      	lsls	r1, r5, #1
 8002310:	005e      	lsls	r6, r3, #1
 8002312:	0d49      	lsrs	r1, r1, #21
 8002314:	0b3f      	lsrs	r7, r7, #12
 8002316:	0d76      	lsrs	r6, r6, #21
 8002318:	4281      	cmp	r1, r0
 800231a:	d018      	beq.n	800234e <__eqdf2+0x62>
 800231c:	4286      	cmp	r6, r0
 800231e:	d00f      	beq.n	8002340 <__eqdf2+0x54>
 8002320:	2001      	movs	r0, #1
 8002322:	42b1      	cmp	r1, r6
 8002324:	d10d      	bne.n	8002342 <__eqdf2+0x56>
 8002326:	45bc      	cmp	ip, r7
 8002328:	d10b      	bne.n	8002342 <__eqdf2+0x56>
 800232a:	4294      	cmp	r4, r2
 800232c:	d109      	bne.n	8002342 <__eqdf2+0x56>
 800232e:	45d3      	cmp	fp, sl
 8002330:	d01c      	beq.n	800236c <__eqdf2+0x80>
 8002332:	2900      	cmp	r1, #0
 8002334:	d105      	bne.n	8002342 <__eqdf2+0x56>
 8002336:	4660      	mov	r0, ip
 8002338:	4320      	orrs	r0, r4
 800233a:	1e43      	subs	r3, r0, #1
 800233c:	4198      	sbcs	r0, r3
 800233e:	e000      	b.n	8002342 <__eqdf2+0x56>
 8002340:	2001      	movs	r0, #1
 8002342:	bcf0      	pop	{r4, r5, r6, r7}
 8002344:	46bb      	mov	fp, r7
 8002346:	46b2      	mov	sl, r6
 8002348:	46a9      	mov	r9, r5
 800234a:	46a0      	mov	r8, r4
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234e:	2001      	movs	r0, #1
 8002350:	428e      	cmp	r6, r1
 8002352:	d1f6      	bne.n	8002342 <__eqdf2+0x56>
 8002354:	4661      	mov	r1, ip
 8002356:	4339      	orrs	r1, r7
 8002358:	000f      	movs	r7, r1
 800235a:	4317      	orrs	r7, r2
 800235c:	4327      	orrs	r7, r4
 800235e:	d1f0      	bne.n	8002342 <__eqdf2+0x56>
 8002360:	465b      	mov	r3, fp
 8002362:	4652      	mov	r2, sl
 8002364:	1a98      	subs	r0, r3, r2
 8002366:	1e43      	subs	r3, r0, #1
 8002368:	4198      	sbcs	r0, r3
 800236a:	e7ea      	b.n	8002342 <__eqdf2+0x56>
 800236c:	2000      	movs	r0, #0
 800236e:	e7e8      	b.n	8002342 <__eqdf2+0x56>
 8002370:	000007ff 	.word	0x000007ff

08002374 <__gedf2>:
 8002374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002376:	4657      	mov	r7, sl
 8002378:	464e      	mov	r6, r9
 800237a:	4645      	mov	r5, r8
 800237c:	46de      	mov	lr, fp
 800237e:	b5e0      	push	{r5, r6, r7, lr}
 8002380:	000d      	movs	r5, r1
 8002382:	030e      	lsls	r6, r1, #12
 8002384:	0049      	lsls	r1, r1, #1
 8002386:	0d49      	lsrs	r1, r1, #21
 8002388:	468a      	mov	sl, r1
 800238a:	0fdf      	lsrs	r7, r3, #31
 800238c:	0fe9      	lsrs	r1, r5, #31
 800238e:	46bc      	mov	ip, r7
 8002390:	b083      	sub	sp, #12
 8002392:	4f2f      	ldr	r7, [pc, #188]	@ (8002450 <__gedf2+0xdc>)
 8002394:	0004      	movs	r4, r0
 8002396:	4680      	mov	r8, r0
 8002398:	9101      	str	r1, [sp, #4]
 800239a:	0058      	lsls	r0, r3, #1
 800239c:	0319      	lsls	r1, r3, #12
 800239e:	4691      	mov	r9, r2
 80023a0:	0b36      	lsrs	r6, r6, #12
 80023a2:	0b09      	lsrs	r1, r1, #12
 80023a4:	0d40      	lsrs	r0, r0, #21
 80023a6:	45ba      	cmp	sl, r7
 80023a8:	d01d      	beq.n	80023e6 <__gedf2+0x72>
 80023aa:	42b8      	cmp	r0, r7
 80023ac:	d00d      	beq.n	80023ca <__gedf2+0x56>
 80023ae:	4657      	mov	r7, sl
 80023b0:	2f00      	cmp	r7, #0
 80023b2:	d12a      	bne.n	800240a <__gedf2+0x96>
 80023b4:	4334      	orrs	r4, r6
 80023b6:	2800      	cmp	r0, #0
 80023b8:	d124      	bne.n	8002404 <__gedf2+0x90>
 80023ba:	430a      	orrs	r2, r1
 80023bc:	d036      	beq.n	800242c <__gedf2+0xb8>
 80023be:	2c00      	cmp	r4, #0
 80023c0:	d141      	bne.n	8002446 <__gedf2+0xd2>
 80023c2:	4663      	mov	r3, ip
 80023c4:	0058      	lsls	r0, r3, #1
 80023c6:	3801      	subs	r0, #1
 80023c8:	e015      	b.n	80023f6 <__gedf2+0x82>
 80023ca:	4311      	orrs	r1, r2
 80023cc:	d138      	bne.n	8002440 <__gedf2+0xcc>
 80023ce:	4653      	mov	r3, sl
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <__gedf2+0x64>
 80023d4:	4326      	orrs	r6, r4
 80023d6:	d0f4      	beq.n	80023c2 <__gedf2+0x4e>
 80023d8:	9b01      	ldr	r3, [sp, #4]
 80023da:	4563      	cmp	r3, ip
 80023dc:	d107      	bne.n	80023ee <__gedf2+0x7a>
 80023de:	9b01      	ldr	r3, [sp, #4]
 80023e0:	0058      	lsls	r0, r3, #1
 80023e2:	3801      	subs	r0, #1
 80023e4:	e007      	b.n	80023f6 <__gedf2+0x82>
 80023e6:	4326      	orrs	r6, r4
 80023e8:	d12a      	bne.n	8002440 <__gedf2+0xcc>
 80023ea:	4550      	cmp	r0, sl
 80023ec:	d021      	beq.n	8002432 <__gedf2+0xbe>
 80023ee:	2001      	movs	r0, #1
 80023f0:	9b01      	ldr	r3, [sp, #4]
 80023f2:	425f      	negs	r7, r3
 80023f4:	4338      	orrs	r0, r7
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0dc      	beq.n	80023c2 <__gedf2+0x4e>
 8002408:	e7e6      	b.n	80023d8 <__gedf2+0x64>
 800240a:	2800      	cmp	r0, #0
 800240c:	d0ef      	beq.n	80023ee <__gedf2+0x7a>
 800240e:	9b01      	ldr	r3, [sp, #4]
 8002410:	4563      	cmp	r3, ip
 8002412:	d1ec      	bne.n	80023ee <__gedf2+0x7a>
 8002414:	4582      	cmp	sl, r0
 8002416:	dcea      	bgt.n	80023ee <__gedf2+0x7a>
 8002418:	dbe1      	blt.n	80023de <__gedf2+0x6a>
 800241a:	428e      	cmp	r6, r1
 800241c:	d8e7      	bhi.n	80023ee <__gedf2+0x7a>
 800241e:	d1de      	bne.n	80023de <__gedf2+0x6a>
 8002420:	45c8      	cmp	r8, r9
 8002422:	d8e4      	bhi.n	80023ee <__gedf2+0x7a>
 8002424:	2000      	movs	r0, #0
 8002426:	45c8      	cmp	r8, r9
 8002428:	d2e5      	bcs.n	80023f6 <__gedf2+0x82>
 800242a:	e7d8      	b.n	80023de <__gedf2+0x6a>
 800242c:	2c00      	cmp	r4, #0
 800242e:	d0e2      	beq.n	80023f6 <__gedf2+0x82>
 8002430:	e7dd      	b.n	80023ee <__gedf2+0x7a>
 8002432:	4311      	orrs	r1, r2
 8002434:	d104      	bne.n	8002440 <__gedf2+0xcc>
 8002436:	9b01      	ldr	r3, [sp, #4]
 8002438:	4563      	cmp	r3, ip
 800243a:	d1d8      	bne.n	80023ee <__gedf2+0x7a>
 800243c:	2000      	movs	r0, #0
 800243e:	e7da      	b.n	80023f6 <__gedf2+0x82>
 8002440:	2002      	movs	r0, #2
 8002442:	4240      	negs	r0, r0
 8002444:	e7d7      	b.n	80023f6 <__gedf2+0x82>
 8002446:	9b01      	ldr	r3, [sp, #4]
 8002448:	4563      	cmp	r3, ip
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xa6>
 800244c:	e7cf      	b.n	80023ee <__gedf2+0x7a>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030e      	lsls	r6, r1, #12
 8002464:	0049      	lsls	r1, r1, #1
 8002466:	0d49      	lsrs	r1, r1, #21
 8002468:	468a      	mov	sl, r1
 800246a:	0fdf      	lsrs	r7, r3, #31
 800246c:	0fe9      	lsrs	r1, r5, #31
 800246e:	46bc      	mov	ip, r7
 8002470:	b083      	sub	sp, #12
 8002472:	4f2e      	ldr	r7, [pc, #184]	@ (800252c <__ledf2+0xd8>)
 8002474:	0004      	movs	r4, r0
 8002476:	4680      	mov	r8, r0
 8002478:	9101      	str	r1, [sp, #4]
 800247a:	0058      	lsls	r0, r3, #1
 800247c:	0319      	lsls	r1, r3, #12
 800247e:	4691      	mov	r9, r2
 8002480:	0b36      	lsrs	r6, r6, #12
 8002482:	0b09      	lsrs	r1, r1, #12
 8002484:	0d40      	lsrs	r0, r0, #21
 8002486:	45ba      	cmp	sl, r7
 8002488:	d01e      	beq.n	80024c8 <__ledf2+0x74>
 800248a:	42b8      	cmp	r0, r7
 800248c:	d00d      	beq.n	80024aa <__ledf2+0x56>
 800248e:	4657      	mov	r7, sl
 8002490:	2f00      	cmp	r7, #0
 8002492:	d127      	bne.n	80024e4 <__ledf2+0x90>
 8002494:	4334      	orrs	r4, r6
 8002496:	2800      	cmp	r0, #0
 8002498:	d133      	bne.n	8002502 <__ledf2+0xae>
 800249a:	430a      	orrs	r2, r1
 800249c:	d034      	beq.n	8002508 <__ledf2+0xb4>
 800249e:	2c00      	cmp	r4, #0
 80024a0:	d140      	bne.n	8002524 <__ledf2+0xd0>
 80024a2:	4663      	mov	r3, ip
 80024a4:	0058      	lsls	r0, r3, #1
 80024a6:	3801      	subs	r0, #1
 80024a8:	e015      	b.n	80024d6 <__ledf2+0x82>
 80024aa:	4311      	orrs	r1, r2
 80024ac:	d112      	bne.n	80024d4 <__ledf2+0x80>
 80024ae:	4653      	mov	r3, sl
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <__ledf2+0x64>
 80024b4:	4326      	orrs	r6, r4
 80024b6:	d0f4      	beq.n	80024a2 <__ledf2+0x4e>
 80024b8:	9b01      	ldr	r3, [sp, #4]
 80024ba:	4563      	cmp	r3, ip
 80024bc:	d01d      	beq.n	80024fa <__ledf2+0xa6>
 80024be:	2001      	movs	r0, #1
 80024c0:	9b01      	ldr	r3, [sp, #4]
 80024c2:	425f      	negs	r7, r3
 80024c4:	4338      	orrs	r0, r7
 80024c6:	e006      	b.n	80024d6 <__ledf2+0x82>
 80024c8:	4326      	orrs	r6, r4
 80024ca:	d103      	bne.n	80024d4 <__ledf2+0x80>
 80024cc:	4550      	cmp	r0, sl
 80024ce:	d1f6      	bne.n	80024be <__ledf2+0x6a>
 80024d0:	4311      	orrs	r1, r2
 80024d2:	d01c      	beq.n	800250e <__ledf2+0xba>
 80024d4:	2002      	movs	r0, #2
 80024d6:	b003      	add	sp, #12
 80024d8:	bcf0      	pop	{r4, r5, r6, r7}
 80024da:	46bb      	mov	fp, r7
 80024dc:	46b2      	mov	sl, r6
 80024de:	46a9      	mov	r9, r5
 80024e0:	46a0      	mov	r8, r4
 80024e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d0ea      	beq.n	80024be <__ledf2+0x6a>
 80024e8:	9b01      	ldr	r3, [sp, #4]
 80024ea:	4563      	cmp	r3, ip
 80024ec:	d1e7      	bne.n	80024be <__ledf2+0x6a>
 80024ee:	4582      	cmp	sl, r0
 80024f0:	dce5      	bgt.n	80024be <__ledf2+0x6a>
 80024f2:	db02      	blt.n	80024fa <__ledf2+0xa6>
 80024f4:	428e      	cmp	r6, r1
 80024f6:	d8e2      	bhi.n	80024be <__ledf2+0x6a>
 80024f8:	d00e      	beq.n	8002518 <__ledf2+0xc4>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	0058      	lsls	r0, r3, #1
 80024fe:	3801      	subs	r0, #1
 8002500:	e7e9      	b.n	80024d6 <__ledf2+0x82>
 8002502:	2c00      	cmp	r4, #0
 8002504:	d0cd      	beq.n	80024a2 <__ledf2+0x4e>
 8002506:	e7d7      	b.n	80024b8 <__ledf2+0x64>
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0e4      	beq.n	80024d6 <__ledf2+0x82>
 800250c:	e7d7      	b.n	80024be <__ledf2+0x6a>
 800250e:	9b01      	ldr	r3, [sp, #4]
 8002510:	2000      	movs	r0, #0
 8002512:	4563      	cmp	r3, ip
 8002514:	d0df      	beq.n	80024d6 <__ledf2+0x82>
 8002516:	e7d2      	b.n	80024be <__ledf2+0x6a>
 8002518:	45c8      	cmp	r8, r9
 800251a:	d8d0      	bhi.n	80024be <__ledf2+0x6a>
 800251c:	2000      	movs	r0, #0
 800251e:	45c8      	cmp	r8, r9
 8002520:	d2d9      	bcs.n	80024d6 <__ledf2+0x82>
 8002522:	e7ea      	b.n	80024fa <__ledf2+0xa6>
 8002524:	9b01      	ldr	r3, [sp, #4]
 8002526:	4563      	cmp	r3, ip
 8002528:	d0e4      	beq.n	80024f4 <__ledf2+0xa0>
 800252a:	e7c8      	b.n	80024be <__ledf2+0x6a>
 800252c:	000007ff 	.word	0x000007ff

08002530 <__aeabi_dmul>:
 8002530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002532:	4657      	mov	r7, sl
 8002534:	464e      	mov	r6, r9
 8002536:	46de      	mov	lr, fp
 8002538:	4645      	mov	r5, r8
 800253a:	b5e0      	push	{r5, r6, r7, lr}
 800253c:	001f      	movs	r7, r3
 800253e:	030b      	lsls	r3, r1, #12
 8002540:	0b1b      	lsrs	r3, r3, #12
 8002542:	0016      	movs	r6, r2
 8002544:	469a      	mov	sl, r3
 8002546:	0fca      	lsrs	r2, r1, #31
 8002548:	004b      	lsls	r3, r1, #1
 800254a:	0004      	movs	r4, r0
 800254c:	4691      	mov	r9, r2
 800254e:	b085      	sub	sp, #20
 8002550:	0d5b      	lsrs	r3, r3, #21
 8002552:	d100      	bne.n	8002556 <__aeabi_dmul+0x26>
 8002554:	e1cf      	b.n	80028f6 <__aeabi_dmul+0x3c6>
 8002556:	4acd      	ldr	r2, [pc, #820]	@ (800288c <__aeabi_dmul+0x35c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d055      	beq.n	8002608 <__aeabi_dmul+0xd8>
 800255c:	4651      	mov	r1, sl
 800255e:	0f42      	lsrs	r2, r0, #29
 8002560:	00c9      	lsls	r1, r1, #3
 8002562:	430a      	orrs	r2, r1
 8002564:	2180      	movs	r1, #128	@ 0x80
 8002566:	0409      	lsls	r1, r1, #16
 8002568:	4311      	orrs	r1, r2
 800256a:	00c2      	lsls	r2, r0, #3
 800256c:	4690      	mov	r8, r2
 800256e:	4ac8      	ldr	r2, [pc, #800]	@ (8002890 <__aeabi_dmul+0x360>)
 8002570:	468a      	mov	sl, r1
 8002572:	4693      	mov	fp, r2
 8002574:	449b      	add	fp, r3
 8002576:	2300      	movs	r3, #0
 8002578:	2500      	movs	r5, #0
 800257a:	9302      	str	r3, [sp, #8]
 800257c:	033c      	lsls	r4, r7, #12
 800257e:	007b      	lsls	r3, r7, #1
 8002580:	0ffa      	lsrs	r2, r7, #31
 8002582:	9601      	str	r6, [sp, #4]
 8002584:	0b24      	lsrs	r4, r4, #12
 8002586:	0d5b      	lsrs	r3, r3, #21
 8002588:	9200      	str	r2, [sp, #0]
 800258a:	d100      	bne.n	800258e <__aeabi_dmul+0x5e>
 800258c:	e188      	b.n	80028a0 <__aeabi_dmul+0x370>
 800258e:	4abf      	ldr	r2, [pc, #764]	@ (800288c <__aeabi_dmul+0x35c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x66>
 8002594:	e092      	b.n	80026bc <__aeabi_dmul+0x18c>
 8002596:	4abe      	ldr	r2, [pc, #760]	@ (8002890 <__aeabi_dmul+0x360>)
 8002598:	4694      	mov	ip, r2
 800259a:	4463      	add	r3, ip
 800259c:	449b      	add	fp, r3
 800259e:	2d0a      	cmp	r5, #10
 80025a0:	dc42      	bgt.n	8002628 <__aeabi_dmul+0xf8>
 80025a2:	00e4      	lsls	r4, r4, #3
 80025a4:	0f73      	lsrs	r3, r6, #29
 80025a6:	4323      	orrs	r3, r4
 80025a8:	2480      	movs	r4, #128	@ 0x80
 80025aa:	4649      	mov	r1, r9
 80025ac:	0424      	lsls	r4, r4, #16
 80025ae:	431c      	orrs	r4, r3
 80025b0:	00f3      	lsls	r3, r6, #3
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	9b00      	ldr	r3, [sp, #0]
 80025b6:	2000      	movs	r0, #0
 80025b8:	4059      	eors	r1, r3
 80025ba:	b2cb      	uxtb	r3, r1
 80025bc:	9303      	str	r3, [sp, #12]
 80025be:	2d02      	cmp	r5, #2
 80025c0:	dc00      	bgt.n	80025c4 <__aeabi_dmul+0x94>
 80025c2:	e094      	b.n	80026ee <__aeabi_dmul+0x1be>
 80025c4:	2301      	movs	r3, #1
 80025c6:	40ab      	lsls	r3, r5
 80025c8:	001d      	movs	r5, r3
 80025ca:	23a6      	movs	r3, #166	@ 0xa6
 80025cc:	002a      	movs	r2, r5
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	401a      	ands	r2, r3
 80025d2:	421d      	tst	r5, r3
 80025d4:	d000      	beq.n	80025d8 <__aeabi_dmul+0xa8>
 80025d6:	e229      	b.n	8002a2c <__aeabi_dmul+0x4fc>
 80025d8:	2390      	movs	r3, #144	@ 0x90
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	421d      	tst	r5, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dmul+0xb2>
 80025e0:	e24d      	b.n	8002a7e <__aeabi_dmul+0x54e>
 80025e2:	2300      	movs	r3, #0
 80025e4:	2480      	movs	r4, #128	@ 0x80
 80025e6:	4699      	mov	r9, r3
 80025e8:	0324      	lsls	r4, r4, #12
 80025ea:	4ba8      	ldr	r3, [pc, #672]	@ (800288c <__aeabi_dmul+0x35c>)
 80025ec:	0010      	movs	r0, r2
 80025ee:	464a      	mov	r2, r9
 80025f0:	051b      	lsls	r3, r3, #20
 80025f2:	4323      	orrs	r3, r4
 80025f4:	07d2      	lsls	r2, r2, #31
 80025f6:	4313      	orrs	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	b005      	add	sp, #20
 80025fc:	bcf0      	pop	{r4, r5, r6, r7}
 80025fe:	46bb      	mov	fp, r7
 8002600:	46b2      	mov	sl, r6
 8002602:	46a9      	mov	r9, r5
 8002604:	46a0      	mov	r8, r4
 8002606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002608:	4652      	mov	r2, sl
 800260a:	4302      	orrs	r2, r0
 800260c:	4690      	mov	r8, r2
 800260e:	d000      	beq.n	8002612 <__aeabi_dmul+0xe2>
 8002610:	e1ac      	b.n	800296c <__aeabi_dmul+0x43c>
 8002612:	469b      	mov	fp, r3
 8002614:	2302      	movs	r3, #2
 8002616:	4692      	mov	sl, r2
 8002618:	2508      	movs	r5, #8
 800261a:	9302      	str	r3, [sp, #8]
 800261c:	e7ae      	b.n	800257c <__aeabi_dmul+0x4c>
 800261e:	9b00      	ldr	r3, [sp, #0]
 8002620:	46a2      	mov	sl, r4
 8002622:	4699      	mov	r9, r3
 8002624:	9b01      	ldr	r3, [sp, #4]
 8002626:	4698      	mov	r8, r3
 8002628:	9b02      	ldr	r3, [sp, #8]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d100      	bne.n	8002630 <__aeabi_dmul+0x100>
 800262e:	e1ca      	b.n	80029c6 <__aeabi_dmul+0x496>
 8002630:	2b03      	cmp	r3, #3
 8002632:	d100      	bne.n	8002636 <__aeabi_dmul+0x106>
 8002634:	e192      	b.n	800295c <__aeabi_dmul+0x42c>
 8002636:	2b01      	cmp	r3, #1
 8002638:	d110      	bne.n	800265c <__aeabi_dmul+0x12c>
 800263a:	2300      	movs	r3, #0
 800263c:	2400      	movs	r4, #0
 800263e:	2200      	movs	r2, #0
 8002640:	e7d4      	b.n	80025ec <__aeabi_dmul+0xbc>
 8002642:	2201      	movs	r2, #1
 8002644:	087b      	lsrs	r3, r7, #1
 8002646:	403a      	ands	r2, r7
 8002648:	4313      	orrs	r3, r2
 800264a:	4652      	mov	r2, sl
 800264c:	07d2      	lsls	r2, r2, #31
 800264e:	4313      	orrs	r3, r2
 8002650:	4698      	mov	r8, r3
 8002652:	4653      	mov	r3, sl
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	469a      	mov	sl, r3
 8002658:	9b03      	ldr	r3, [sp, #12]
 800265a:	4699      	mov	r9, r3
 800265c:	465b      	mov	r3, fp
 800265e:	1c58      	adds	r0, r3, #1
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	445b      	add	r3, fp
 8002666:	2b00      	cmp	r3, #0
 8002668:	dc00      	bgt.n	800266c <__aeabi_dmul+0x13c>
 800266a:	e1b1      	b.n	80029d0 <__aeabi_dmul+0x4a0>
 800266c:	4642      	mov	r2, r8
 800266e:	0752      	lsls	r2, r2, #29
 8002670:	d00b      	beq.n	800268a <__aeabi_dmul+0x15a>
 8002672:	220f      	movs	r2, #15
 8002674:	4641      	mov	r1, r8
 8002676:	400a      	ands	r2, r1
 8002678:	2a04      	cmp	r2, #4
 800267a:	d006      	beq.n	800268a <__aeabi_dmul+0x15a>
 800267c:	4642      	mov	r2, r8
 800267e:	1d11      	adds	r1, r2, #4
 8002680:	4541      	cmp	r1, r8
 8002682:	4192      	sbcs	r2, r2
 8002684:	4688      	mov	r8, r1
 8002686:	4252      	negs	r2, r2
 8002688:	4492      	add	sl, r2
 800268a:	4652      	mov	r2, sl
 800268c:	01d2      	lsls	r2, r2, #7
 800268e:	d506      	bpl.n	800269e <__aeabi_dmul+0x16e>
 8002690:	4652      	mov	r2, sl
 8002692:	4b80      	ldr	r3, [pc, #512]	@ (8002894 <__aeabi_dmul+0x364>)
 8002694:	401a      	ands	r2, r3
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	4692      	mov	sl, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	18c3      	adds	r3, r0, r3
 800269e:	4a7e      	ldr	r2, [pc, #504]	@ (8002898 <__aeabi_dmul+0x368>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	dd00      	ble.n	80026a6 <__aeabi_dmul+0x176>
 80026a4:	e18f      	b.n	80029c6 <__aeabi_dmul+0x496>
 80026a6:	4642      	mov	r2, r8
 80026a8:	08d1      	lsrs	r1, r2, #3
 80026aa:	4652      	mov	r2, sl
 80026ac:	0752      	lsls	r2, r2, #29
 80026ae:	430a      	orrs	r2, r1
 80026b0:	4651      	mov	r1, sl
 80026b2:	055b      	lsls	r3, r3, #21
 80026b4:	024c      	lsls	r4, r1, #9
 80026b6:	0b24      	lsrs	r4, r4, #12
 80026b8:	0d5b      	lsrs	r3, r3, #21
 80026ba:	e797      	b.n	80025ec <__aeabi_dmul+0xbc>
 80026bc:	4b73      	ldr	r3, [pc, #460]	@ (800288c <__aeabi_dmul+0x35c>)
 80026be:	4326      	orrs	r6, r4
 80026c0:	469c      	mov	ip, r3
 80026c2:	44e3      	add	fp, ip
 80026c4:	2e00      	cmp	r6, #0
 80026c6:	d100      	bne.n	80026ca <__aeabi_dmul+0x19a>
 80026c8:	e16f      	b.n	80029aa <__aeabi_dmul+0x47a>
 80026ca:	2303      	movs	r3, #3
 80026cc:	4649      	mov	r1, r9
 80026ce:	431d      	orrs	r5, r3
 80026d0:	9b00      	ldr	r3, [sp, #0]
 80026d2:	4059      	eors	r1, r3
 80026d4:	b2cb      	uxtb	r3, r1
 80026d6:	9303      	str	r3, [sp, #12]
 80026d8:	2d0a      	cmp	r5, #10
 80026da:	dd00      	ble.n	80026de <__aeabi_dmul+0x1ae>
 80026dc:	e133      	b.n	8002946 <__aeabi_dmul+0x416>
 80026de:	2301      	movs	r3, #1
 80026e0:	40ab      	lsls	r3, r5
 80026e2:	001d      	movs	r5, r3
 80026e4:	2303      	movs	r3, #3
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	2288      	movs	r2, #136	@ 0x88
 80026ea:	422a      	tst	r2, r5
 80026ec:	d197      	bne.n	800261e <__aeabi_dmul+0xee>
 80026ee:	4642      	mov	r2, r8
 80026f0:	4643      	mov	r3, r8
 80026f2:	0412      	lsls	r2, r2, #16
 80026f4:	0c12      	lsrs	r2, r2, #16
 80026f6:	0016      	movs	r6, r2
 80026f8:	9801      	ldr	r0, [sp, #4]
 80026fa:	0c1d      	lsrs	r5, r3, #16
 80026fc:	0c03      	lsrs	r3, r0, #16
 80026fe:	0400      	lsls	r0, r0, #16
 8002700:	0c00      	lsrs	r0, r0, #16
 8002702:	4346      	muls	r6, r0
 8002704:	46b4      	mov	ip, r6
 8002706:	001e      	movs	r6, r3
 8002708:	436e      	muls	r6, r5
 800270a:	9600      	str	r6, [sp, #0]
 800270c:	0016      	movs	r6, r2
 800270e:	0007      	movs	r7, r0
 8002710:	435e      	muls	r6, r3
 8002712:	4661      	mov	r1, ip
 8002714:	46b0      	mov	r8, r6
 8002716:	436f      	muls	r7, r5
 8002718:	0c0e      	lsrs	r6, r1, #16
 800271a:	44b8      	add	r8, r7
 800271c:	4446      	add	r6, r8
 800271e:	42b7      	cmp	r7, r6
 8002720:	d905      	bls.n	800272e <__aeabi_dmul+0x1fe>
 8002722:	2180      	movs	r1, #128	@ 0x80
 8002724:	0249      	lsls	r1, r1, #9
 8002726:	4688      	mov	r8, r1
 8002728:	9f00      	ldr	r7, [sp, #0]
 800272a:	4447      	add	r7, r8
 800272c:	9700      	str	r7, [sp, #0]
 800272e:	4661      	mov	r1, ip
 8002730:	0409      	lsls	r1, r1, #16
 8002732:	0c09      	lsrs	r1, r1, #16
 8002734:	0c37      	lsrs	r7, r6, #16
 8002736:	0436      	lsls	r6, r6, #16
 8002738:	468c      	mov	ip, r1
 800273a:	0031      	movs	r1, r6
 800273c:	4461      	add	r1, ip
 800273e:	9101      	str	r1, [sp, #4]
 8002740:	0011      	movs	r1, r2
 8002742:	0c26      	lsrs	r6, r4, #16
 8002744:	0424      	lsls	r4, r4, #16
 8002746:	0c24      	lsrs	r4, r4, #16
 8002748:	4361      	muls	r1, r4
 800274a:	468c      	mov	ip, r1
 800274c:	0021      	movs	r1, r4
 800274e:	4369      	muls	r1, r5
 8002750:	4689      	mov	r9, r1
 8002752:	4661      	mov	r1, ip
 8002754:	0c09      	lsrs	r1, r1, #16
 8002756:	4688      	mov	r8, r1
 8002758:	4372      	muls	r2, r6
 800275a:	444a      	add	r2, r9
 800275c:	4442      	add	r2, r8
 800275e:	4375      	muls	r5, r6
 8002760:	4591      	cmp	r9, r2
 8002762:	d903      	bls.n	800276c <__aeabi_dmul+0x23c>
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	0249      	lsls	r1, r1, #9
 8002768:	4688      	mov	r8, r1
 800276a:	4445      	add	r5, r8
 800276c:	0c11      	lsrs	r1, r2, #16
 800276e:	4688      	mov	r8, r1
 8002770:	4661      	mov	r1, ip
 8002772:	0409      	lsls	r1, r1, #16
 8002774:	0c09      	lsrs	r1, r1, #16
 8002776:	468c      	mov	ip, r1
 8002778:	0412      	lsls	r2, r2, #16
 800277a:	4462      	add	r2, ip
 800277c:	18b9      	adds	r1, r7, r2
 800277e:	9102      	str	r1, [sp, #8]
 8002780:	4651      	mov	r1, sl
 8002782:	0c09      	lsrs	r1, r1, #16
 8002784:	468c      	mov	ip, r1
 8002786:	4651      	mov	r1, sl
 8002788:	040f      	lsls	r7, r1, #16
 800278a:	0c3f      	lsrs	r7, r7, #16
 800278c:	0039      	movs	r1, r7
 800278e:	4341      	muls	r1, r0
 8002790:	4445      	add	r5, r8
 8002792:	4688      	mov	r8, r1
 8002794:	4661      	mov	r1, ip
 8002796:	4341      	muls	r1, r0
 8002798:	468a      	mov	sl, r1
 800279a:	4641      	mov	r1, r8
 800279c:	4660      	mov	r0, ip
 800279e:	0c09      	lsrs	r1, r1, #16
 80027a0:	4689      	mov	r9, r1
 80027a2:	4358      	muls	r0, r3
 80027a4:	437b      	muls	r3, r7
 80027a6:	4453      	add	r3, sl
 80027a8:	444b      	add	r3, r9
 80027aa:	459a      	cmp	sl, r3
 80027ac:	d903      	bls.n	80027b6 <__aeabi_dmul+0x286>
 80027ae:	2180      	movs	r1, #128	@ 0x80
 80027b0:	0249      	lsls	r1, r1, #9
 80027b2:	4689      	mov	r9, r1
 80027b4:	4448      	add	r0, r9
 80027b6:	0c19      	lsrs	r1, r3, #16
 80027b8:	4689      	mov	r9, r1
 80027ba:	4641      	mov	r1, r8
 80027bc:	0409      	lsls	r1, r1, #16
 80027be:	0c09      	lsrs	r1, r1, #16
 80027c0:	4688      	mov	r8, r1
 80027c2:	0039      	movs	r1, r7
 80027c4:	4361      	muls	r1, r4
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	4443      	add	r3, r8
 80027ca:	4688      	mov	r8, r1
 80027cc:	4661      	mov	r1, ip
 80027ce:	434c      	muls	r4, r1
 80027d0:	4371      	muls	r1, r6
 80027d2:	468c      	mov	ip, r1
 80027d4:	4641      	mov	r1, r8
 80027d6:	4377      	muls	r7, r6
 80027d8:	0c0e      	lsrs	r6, r1, #16
 80027da:	193f      	adds	r7, r7, r4
 80027dc:	19f6      	adds	r6, r6, r7
 80027de:	4448      	add	r0, r9
 80027e0:	42b4      	cmp	r4, r6
 80027e2:	d903      	bls.n	80027ec <__aeabi_dmul+0x2bc>
 80027e4:	2180      	movs	r1, #128	@ 0x80
 80027e6:	0249      	lsls	r1, r1, #9
 80027e8:	4689      	mov	r9, r1
 80027ea:	44cc      	add	ip, r9
 80027ec:	9902      	ldr	r1, [sp, #8]
 80027ee:	9f00      	ldr	r7, [sp, #0]
 80027f0:	4689      	mov	r9, r1
 80027f2:	0431      	lsls	r1, r6, #16
 80027f4:	444f      	add	r7, r9
 80027f6:	4689      	mov	r9, r1
 80027f8:	4641      	mov	r1, r8
 80027fa:	4297      	cmp	r7, r2
 80027fc:	4192      	sbcs	r2, r2
 80027fe:	040c      	lsls	r4, r1, #16
 8002800:	0c24      	lsrs	r4, r4, #16
 8002802:	444c      	add	r4, r9
 8002804:	18ff      	adds	r7, r7, r3
 8002806:	4252      	negs	r2, r2
 8002808:	1964      	adds	r4, r4, r5
 800280a:	18a1      	adds	r1, r4, r2
 800280c:	429f      	cmp	r7, r3
 800280e:	419b      	sbcs	r3, r3
 8002810:	4688      	mov	r8, r1
 8002812:	4682      	mov	sl, r0
 8002814:	425b      	negs	r3, r3
 8002816:	4699      	mov	r9, r3
 8002818:	4590      	cmp	r8, r2
 800281a:	4192      	sbcs	r2, r2
 800281c:	42ac      	cmp	r4, r5
 800281e:	41a4      	sbcs	r4, r4
 8002820:	44c2      	add	sl, r8
 8002822:	44d1      	add	r9, sl
 8002824:	4252      	negs	r2, r2
 8002826:	4264      	negs	r4, r4
 8002828:	4314      	orrs	r4, r2
 800282a:	4599      	cmp	r9, r3
 800282c:	419b      	sbcs	r3, r3
 800282e:	4582      	cmp	sl, r0
 8002830:	4192      	sbcs	r2, r2
 8002832:	425b      	negs	r3, r3
 8002834:	4252      	negs	r2, r2
 8002836:	4313      	orrs	r3, r2
 8002838:	464a      	mov	r2, r9
 800283a:	0c36      	lsrs	r6, r6, #16
 800283c:	19a4      	adds	r4, r4, r6
 800283e:	18e3      	adds	r3, r4, r3
 8002840:	4463      	add	r3, ip
 8002842:	025b      	lsls	r3, r3, #9
 8002844:	0dd2      	lsrs	r2, r2, #23
 8002846:	431a      	orrs	r2, r3
 8002848:	9901      	ldr	r1, [sp, #4]
 800284a:	4692      	mov	sl, r2
 800284c:	027a      	lsls	r2, r7, #9
 800284e:	430a      	orrs	r2, r1
 8002850:	1e50      	subs	r0, r2, #1
 8002852:	4182      	sbcs	r2, r0
 8002854:	0dff      	lsrs	r7, r7, #23
 8002856:	4317      	orrs	r7, r2
 8002858:	464a      	mov	r2, r9
 800285a:	0252      	lsls	r2, r2, #9
 800285c:	4317      	orrs	r7, r2
 800285e:	46b8      	mov	r8, r7
 8002860:	01db      	lsls	r3, r3, #7
 8002862:	d500      	bpl.n	8002866 <__aeabi_dmul+0x336>
 8002864:	e6ed      	b.n	8002642 <__aeabi_dmul+0x112>
 8002866:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <__aeabi_dmul+0x36c>)
 8002868:	9a03      	ldr	r2, [sp, #12]
 800286a:	445b      	add	r3, fp
 800286c:	4691      	mov	r9, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	dc00      	bgt.n	8002874 <__aeabi_dmul+0x344>
 8002872:	e0ac      	b.n	80029ce <__aeabi_dmul+0x49e>
 8002874:	003a      	movs	r2, r7
 8002876:	0752      	lsls	r2, r2, #29
 8002878:	d100      	bne.n	800287c <__aeabi_dmul+0x34c>
 800287a:	e710      	b.n	800269e <__aeabi_dmul+0x16e>
 800287c:	220f      	movs	r2, #15
 800287e:	4658      	mov	r0, fp
 8002880:	403a      	ands	r2, r7
 8002882:	2a04      	cmp	r2, #4
 8002884:	d000      	beq.n	8002888 <__aeabi_dmul+0x358>
 8002886:	e6f9      	b.n	800267c <__aeabi_dmul+0x14c>
 8002888:	e709      	b.n	800269e <__aeabi_dmul+0x16e>
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	000007ff 	.word	0x000007ff
 8002890:	fffffc01 	.word	0xfffffc01
 8002894:	feffffff 	.word	0xfeffffff
 8002898:	000007fe 	.word	0x000007fe
 800289c:	000003ff 	.word	0x000003ff
 80028a0:	0022      	movs	r2, r4
 80028a2:	4332      	orrs	r2, r6
 80028a4:	d06f      	beq.n	8002986 <__aeabi_dmul+0x456>
 80028a6:	2c00      	cmp	r4, #0
 80028a8:	d100      	bne.n	80028ac <__aeabi_dmul+0x37c>
 80028aa:	e0c2      	b.n	8002a32 <__aeabi_dmul+0x502>
 80028ac:	0020      	movs	r0, r4
 80028ae:	f000 fe27 	bl	8003500 <__clzsi2>
 80028b2:	0002      	movs	r2, r0
 80028b4:	0003      	movs	r3, r0
 80028b6:	3a0b      	subs	r2, #11
 80028b8:	201d      	movs	r0, #29
 80028ba:	1a82      	subs	r2, r0, r2
 80028bc:	0030      	movs	r0, r6
 80028be:	0019      	movs	r1, r3
 80028c0:	40d0      	lsrs	r0, r2
 80028c2:	3908      	subs	r1, #8
 80028c4:	408c      	lsls	r4, r1
 80028c6:	0002      	movs	r2, r0
 80028c8:	4322      	orrs	r2, r4
 80028ca:	0034      	movs	r4, r6
 80028cc:	408c      	lsls	r4, r1
 80028ce:	4659      	mov	r1, fp
 80028d0:	1acb      	subs	r3, r1, r3
 80028d2:	4986      	ldr	r1, [pc, #536]	@ (8002aec <__aeabi_dmul+0x5bc>)
 80028d4:	468b      	mov	fp, r1
 80028d6:	449b      	add	fp, r3
 80028d8:	2d0a      	cmp	r5, #10
 80028da:	dd00      	ble.n	80028de <__aeabi_dmul+0x3ae>
 80028dc:	e6a4      	b.n	8002628 <__aeabi_dmul+0xf8>
 80028de:	4649      	mov	r1, r9
 80028e0:	9b00      	ldr	r3, [sp, #0]
 80028e2:	9401      	str	r4, [sp, #4]
 80028e4:	4059      	eors	r1, r3
 80028e6:	b2cb      	uxtb	r3, r1
 80028e8:	0014      	movs	r4, r2
 80028ea:	2000      	movs	r0, #0
 80028ec:	9303      	str	r3, [sp, #12]
 80028ee:	2d02      	cmp	r5, #2
 80028f0:	dd00      	ble.n	80028f4 <__aeabi_dmul+0x3c4>
 80028f2:	e667      	b.n	80025c4 <__aeabi_dmul+0x94>
 80028f4:	e6fb      	b.n	80026ee <__aeabi_dmul+0x1be>
 80028f6:	4653      	mov	r3, sl
 80028f8:	4303      	orrs	r3, r0
 80028fa:	4698      	mov	r8, r3
 80028fc:	d03c      	beq.n	8002978 <__aeabi_dmul+0x448>
 80028fe:	4653      	mov	r3, sl
 8002900:	2b00      	cmp	r3, #0
 8002902:	d100      	bne.n	8002906 <__aeabi_dmul+0x3d6>
 8002904:	e0a3      	b.n	8002a4e <__aeabi_dmul+0x51e>
 8002906:	4650      	mov	r0, sl
 8002908:	f000 fdfa 	bl	8003500 <__clzsi2>
 800290c:	230b      	movs	r3, #11
 800290e:	425b      	negs	r3, r3
 8002910:	469c      	mov	ip, r3
 8002912:	0002      	movs	r2, r0
 8002914:	4484      	add	ip, r0
 8002916:	0011      	movs	r1, r2
 8002918:	4650      	mov	r0, sl
 800291a:	3908      	subs	r1, #8
 800291c:	4088      	lsls	r0, r1
 800291e:	231d      	movs	r3, #29
 8002920:	4680      	mov	r8, r0
 8002922:	4660      	mov	r0, ip
 8002924:	1a1b      	subs	r3, r3, r0
 8002926:	0020      	movs	r0, r4
 8002928:	40d8      	lsrs	r0, r3
 800292a:	0003      	movs	r3, r0
 800292c:	4640      	mov	r0, r8
 800292e:	4303      	orrs	r3, r0
 8002930:	469a      	mov	sl, r3
 8002932:	0023      	movs	r3, r4
 8002934:	408b      	lsls	r3, r1
 8002936:	4698      	mov	r8, r3
 8002938:	4b6c      	ldr	r3, [pc, #432]	@ (8002aec <__aeabi_dmul+0x5bc>)
 800293a:	2500      	movs	r5, #0
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	469b      	mov	fp, r3
 8002940:	2300      	movs	r3, #0
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	e61a      	b.n	800257c <__aeabi_dmul+0x4c>
 8002946:	2d0f      	cmp	r5, #15
 8002948:	d000      	beq.n	800294c <__aeabi_dmul+0x41c>
 800294a:	e0c9      	b.n	8002ae0 <__aeabi_dmul+0x5b0>
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	4652      	mov	r2, sl
 8002950:	031b      	lsls	r3, r3, #12
 8002952:	421a      	tst	r2, r3
 8002954:	d002      	beq.n	800295c <__aeabi_dmul+0x42c>
 8002956:	421c      	tst	r4, r3
 8002958:	d100      	bne.n	800295c <__aeabi_dmul+0x42c>
 800295a:	e092      	b.n	8002a82 <__aeabi_dmul+0x552>
 800295c:	2480      	movs	r4, #128	@ 0x80
 800295e:	4653      	mov	r3, sl
 8002960:	0324      	lsls	r4, r4, #12
 8002962:	431c      	orrs	r4, r3
 8002964:	0324      	lsls	r4, r4, #12
 8002966:	4642      	mov	r2, r8
 8002968:	0b24      	lsrs	r4, r4, #12
 800296a:	e63e      	b.n	80025ea <__aeabi_dmul+0xba>
 800296c:	469b      	mov	fp, r3
 800296e:	2303      	movs	r3, #3
 8002970:	4680      	mov	r8, r0
 8002972:	250c      	movs	r5, #12
 8002974:	9302      	str	r3, [sp, #8]
 8002976:	e601      	b.n	800257c <__aeabi_dmul+0x4c>
 8002978:	2300      	movs	r3, #0
 800297a:	469a      	mov	sl, r3
 800297c:	469b      	mov	fp, r3
 800297e:	3301      	adds	r3, #1
 8002980:	2504      	movs	r5, #4
 8002982:	9302      	str	r3, [sp, #8]
 8002984:	e5fa      	b.n	800257c <__aeabi_dmul+0x4c>
 8002986:	2101      	movs	r1, #1
 8002988:	430d      	orrs	r5, r1
 800298a:	2d0a      	cmp	r5, #10
 800298c:	dd00      	ble.n	8002990 <__aeabi_dmul+0x460>
 800298e:	e64b      	b.n	8002628 <__aeabi_dmul+0xf8>
 8002990:	4649      	mov	r1, r9
 8002992:	9800      	ldr	r0, [sp, #0]
 8002994:	4041      	eors	r1, r0
 8002996:	b2c9      	uxtb	r1, r1
 8002998:	9103      	str	r1, [sp, #12]
 800299a:	2d02      	cmp	r5, #2
 800299c:	dc00      	bgt.n	80029a0 <__aeabi_dmul+0x470>
 800299e:	e096      	b.n	8002ace <__aeabi_dmul+0x59e>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2400      	movs	r4, #0
 80029a4:	2001      	movs	r0, #1
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	e60c      	b.n	80025c4 <__aeabi_dmul+0x94>
 80029aa:	4649      	mov	r1, r9
 80029ac:	2302      	movs	r3, #2
 80029ae:	9a00      	ldr	r2, [sp, #0]
 80029b0:	432b      	orrs	r3, r5
 80029b2:	4051      	eors	r1, r2
 80029b4:	b2ca      	uxtb	r2, r1
 80029b6:	9203      	str	r2, [sp, #12]
 80029b8:	2b0a      	cmp	r3, #10
 80029ba:	dd00      	ble.n	80029be <__aeabi_dmul+0x48e>
 80029bc:	e634      	b.n	8002628 <__aeabi_dmul+0xf8>
 80029be:	2d00      	cmp	r5, #0
 80029c0:	d157      	bne.n	8002a72 <__aeabi_dmul+0x542>
 80029c2:	9b03      	ldr	r3, [sp, #12]
 80029c4:	4699      	mov	r9, r3
 80029c6:	2400      	movs	r4, #0
 80029c8:	2200      	movs	r2, #0
 80029ca:	4b49      	ldr	r3, [pc, #292]	@ (8002af0 <__aeabi_dmul+0x5c0>)
 80029cc:	e60e      	b.n	80025ec <__aeabi_dmul+0xbc>
 80029ce:	4658      	mov	r0, fp
 80029d0:	2101      	movs	r1, #1
 80029d2:	1ac9      	subs	r1, r1, r3
 80029d4:	2938      	cmp	r1, #56	@ 0x38
 80029d6:	dd00      	ble.n	80029da <__aeabi_dmul+0x4aa>
 80029d8:	e62f      	b.n	800263a <__aeabi_dmul+0x10a>
 80029da:	291f      	cmp	r1, #31
 80029dc:	dd56      	ble.n	8002a8c <__aeabi_dmul+0x55c>
 80029de:	221f      	movs	r2, #31
 80029e0:	4654      	mov	r4, sl
 80029e2:	4252      	negs	r2, r2
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	40dc      	lsrs	r4, r3
 80029e8:	2920      	cmp	r1, #32
 80029ea:	d007      	beq.n	80029fc <__aeabi_dmul+0x4cc>
 80029ec:	4b41      	ldr	r3, [pc, #260]	@ (8002af4 <__aeabi_dmul+0x5c4>)
 80029ee:	4642      	mov	r2, r8
 80029f0:	469c      	mov	ip, r3
 80029f2:	4653      	mov	r3, sl
 80029f4:	4460      	add	r0, ip
 80029f6:	4083      	lsls	r3, r0
 80029f8:	431a      	orrs	r2, r3
 80029fa:	4690      	mov	r8, r2
 80029fc:	4642      	mov	r2, r8
 80029fe:	2107      	movs	r1, #7
 8002a00:	1e53      	subs	r3, r2, #1
 8002a02:	419a      	sbcs	r2, r3
 8002a04:	000b      	movs	r3, r1
 8002a06:	4322      	orrs	r2, r4
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2400      	movs	r4, #0
 8002a0c:	4211      	tst	r1, r2
 8002a0e:	d009      	beq.n	8002a24 <__aeabi_dmul+0x4f4>
 8002a10:	230f      	movs	r3, #15
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d05d      	beq.n	8002ad4 <__aeabi_dmul+0x5a4>
 8002a18:	1d11      	adds	r1, r2, #4
 8002a1a:	4291      	cmp	r1, r2
 8002a1c:	419b      	sbcs	r3, r3
 8002a1e:	000a      	movs	r2, r1
 8002a20:	425b      	negs	r3, r3
 8002a22:	075b      	lsls	r3, r3, #29
 8002a24:	08d2      	lsrs	r2, r2, #3
 8002a26:	431a      	orrs	r2, r3
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e5df      	b.n	80025ec <__aeabi_dmul+0xbc>
 8002a2c:	9b03      	ldr	r3, [sp, #12]
 8002a2e:	4699      	mov	r9, r3
 8002a30:	e5fa      	b.n	8002628 <__aeabi_dmul+0xf8>
 8002a32:	9801      	ldr	r0, [sp, #4]
 8002a34:	f000 fd64 	bl	8003500 <__clzsi2>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	3215      	adds	r2, #21
 8002a3e:	3320      	adds	r3, #32
 8002a40:	2a1c      	cmp	r2, #28
 8002a42:	dc00      	bgt.n	8002a46 <__aeabi_dmul+0x516>
 8002a44:	e738      	b.n	80028b8 <__aeabi_dmul+0x388>
 8002a46:	9a01      	ldr	r2, [sp, #4]
 8002a48:	3808      	subs	r0, #8
 8002a4a:	4082      	lsls	r2, r0
 8002a4c:	e73f      	b.n	80028ce <__aeabi_dmul+0x39e>
 8002a4e:	f000 fd57 	bl	8003500 <__clzsi2>
 8002a52:	2315      	movs	r3, #21
 8002a54:	469c      	mov	ip, r3
 8002a56:	4484      	add	ip, r0
 8002a58:	0002      	movs	r2, r0
 8002a5a:	4663      	mov	r3, ip
 8002a5c:	3220      	adds	r2, #32
 8002a5e:	2b1c      	cmp	r3, #28
 8002a60:	dc00      	bgt.n	8002a64 <__aeabi_dmul+0x534>
 8002a62:	e758      	b.n	8002916 <__aeabi_dmul+0x3e6>
 8002a64:	2300      	movs	r3, #0
 8002a66:	4698      	mov	r8, r3
 8002a68:	0023      	movs	r3, r4
 8002a6a:	3808      	subs	r0, #8
 8002a6c:	4083      	lsls	r3, r0
 8002a6e:	469a      	mov	sl, r3
 8002a70:	e762      	b.n	8002938 <__aeabi_dmul+0x408>
 8002a72:	001d      	movs	r5, r3
 8002a74:	2300      	movs	r3, #0
 8002a76:	2400      	movs	r4, #0
 8002a78:	2002      	movs	r0, #2
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	e5a2      	b.n	80025c4 <__aeabi_dmul+0x94>
 8002a7e:	9002      	str	r0, [sp, #8]
 8002a80:	e632      	b.n	80026e8 <__aeabi_dmul+0x1b8>
 8002a82:	431c      	orrs	r4, r3
 8002a84:	9b00      	ldr	r3, [sp, #0]
 8002a86:	9a01      	ldr	r2, [sp, #4]
 8002a88:	4699      	mov	r9, r3
 8002a8a:	e5ae      	b.n	80025ea <__aeabi_dmul+0xba>
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <__aeabi_dmul+0x5c8>)
 8002a8e:	4652      	mov	r2, sl
 8002a90:	18c3      	adds	r3, r0, r3
 8002a92:	4640      	mov	r0, r8
 8002a94:	409a      	lsls	r2, r3
 8002a96:	40c8      	lsrs	r0, r1
 8002a98:	4302      	orrs	r2, r0
 8002a9a:	4640      	mov	r0, r8
 8002a9c:	4098      	lsls	r0, r3
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	1e58      	subs	r0, r3, #1
 8002aa2:	4183      	sbcs	r3, r0
 8002aa4:	4654      	mov	r4, sl
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	40cc      	lsrs	r4, r1
 8002aaa:	0753      	lsls	r3, r2, #29
 8002aac:	d009      	beq.n	8002ac2 <__aeabi_dmul+0x592>
 8002aae:	230f      	movs	r3, #15
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d005      	beq.n	8002ac2 <__aeabi_dmul+0x592>
 8002ab6:	1d13      	adds	r3, r2, #4
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	4192      	sbcs	r2, r2
 8002abc:	4252      	negs	r2, r2
 8002abe:	18a4      	adds	r4, r4, r2
 8002ac0:	001a      	movs	r2, r3
 8002ac2:	0223      	lsls	r3, r4, #8
 8002ac4:	d508      	bpl.n	8002ad8 <__aeabi_dmul+0x5a8>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	2400      	movs	r4, #0
 8002aca:	2200      	movs	r2, #0
 8002acc:	e58e      	b.n	80025ec <__aeabi_dmul+0xbc>
 8002ace:	4689      	mov	r9, r1
 8002ad0:	2400      	movs	r4, #0
 8002ad2:	e58b      	b.n	80025ec <__aeabi_dmul+0xbc>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e7a5      	b.n	8002a24 <__aeabi_dmul+0x4f4>
 8002ad8:	0763      	lsls	r3, r4, #29
 8002ada:	0264      	lsls	r4, r4, #9
 8002adc:	0b24      	lsrs	r4, r4, #12
 8002ade:	e7a1      	b.n	8002a24 <__aeabi_dmul+0x4f4>
 8002ae0:	9b00      	ldr	r3, [sp, #0]
 8002ae2:	46a2      	mov	sl, r4
 8002ae4:	4699      	mov	r9, r3
 8002ae6:	9b01      	ldr	r3, [sp, #4]
 8002ae8:	4698      	mov	r8, r3
 8002aea:	e737      	b.n	800295c <__aeabi_dmul+0x42c>
 8002aec:	fffffc0d 	.word	0xfffffc0d
 8002af0:	000007ff 	.word	0x000007ff
 8002af4:	0000043e 	.word	0x0000043e
 8002af8:	0000041e 	.word	0x0000041e

08002afc <__aeabi_dsub>:
 8002afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afe:	4657      	mov	r7, sl
 8002b00:	464e      	mov	r6, r9
 8002b02:	4645      	mov	r5, r8
 8002b04:	46de      	mov	lr, fp
 8002b06:	b5e0      	push	{r5, r6, r7, lr}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	9000      	str	r0, [sp, #0]
 8002b0c:	9101      	str	r1, [sp, #4]
 8002b0e:	030c      	lsls	r4, r1, #12
 8002b10:	004d      	lsls	r5, r1, #1
 8002b12:	0fce      	lsrs	r6, r1, #31
 8002b14:	0a61      	lsrs	r1, r4, #9
 8002b16:	9c00      	ldr	r4, [sp, #0]
 8002b18:	005f      	lsls	r7, r3, #1
 8002b1a:	0f64      	lsrs	r4, r4, #29
 8002b1c:	430c      	orrs	r4, r1
 8002b1e:	9900      	ldr	r1, [sp, #0]
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	00c8      	lsls	r0, r1, #3
 8002b26:	0319      	lsls	r1, r3, #12
 8002b28:	0d7b      	lsrs	r3, r7, #21
 8002b2a:	4699      	mov	r9, r3
 8002b2c:	9b01      	ldr	r3, [sp, #4]
 8002b2e:	4fcc      	ldr	r7, [pc, #816]	@ (8002e60 <__aeabi_dsub+0x364>)
 8002b30:	0fdb      	lsrs	r3, r3, #31
 8002b32:	469c      	mov	ip, r3
 8002b34:	0a4b      	lsrs	r3, r1, #9
 8002b36:	9900      	ldr	r1, [sp, #0]
 8002b38:	4680      	mov	r8, r0
 8002b3a:	0f49      	lsrs	r1, r1, #29
 8002b3c:	4319      	orrs	r1, r3
 8002b3e:	9b00      	ldr	r3, [sp, #0]
 8002b40:	468b      	mov	fp, r1
 8002b42:	00da      	lsls	r2, r3, #3
 8002b44:	4692      	mov	sl, r2
 8002b46:	0d6d      	lsrs	r5, r5, #21
 8002b48:	45b9      	cmp	r9, r7
 8002b4a:	d100      	bne.n	8002b4e <__aeabi_dsub+0x52>
 8002b4c:	e0bf      	b.n	8002cce <__aeabi_dsub+0x1d2>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	4661      	mov	r1, ip
 8002b52:	4059      	eors	r1, r3
 8002b54:	464b      	mov	r3, r9
 8002b56:	468c      	mov	ip, r1
 8002b58:	1aeb      	subs	r3, r5, r3
 8002b5a:	428e      	cmp	r6, r1
 8002b5c:	d075      	beq.n	8002c4a <__aeabi_dsub+0x14e>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	dc00      	bgt.n	8002b64 <__aeabi_dsub+0x68>
 8002b62:	e2a3      	b.n	80030ac <__aeabi_dsub+0x5b0>
 8002b64:	4649      	mov	r1, r9
 8002b66:	2900      	cmp	r1, #0
 8002b68:	d100      	bne.n	8002b6c <__aeabi_dsub+0x70>
 8002b6a:	e0ce      	b.n	8002d0a <__aeabi_dsub+0x20e>
 8002b6c:	42bd      	cmp	r5, r7
 8002b6e:	d100      	bne.n	8002b72 <__aeabi_dsub+0x76>
 8002b70:	e200      	b.n	8002f74 <__aeabi_dsub+0x478>
 8002b72:	2701      	movs	r7, #1
 8002b74:	2b38      	cmp	r3, #56	@ 0x38
 8002b76:	dc19      	bgt.n	8002bac <__aeabi_dsub+0xb0>
 8002b78:	2780      	movs	r7, #128	@ 0x80
 8002b7a:	4659      	mov	r1, fp
 8002b7c:	043f      	lsls	r7, r7, #16
 8002b7e:	4339      	orrs	r1, r7
 8002b80:	468b      	mov	fp, r1
 8002b82:	2b1f      	cmp	r3, #31
 8002b84:	dd00      	ble.n	8002b88 <__aeabi_dsub+0x8c>
 8002b86:	e1fa      	b.n	8002f7e <__aeabi_dsub+0x482>
 8002b88:	2720      	movs	r7, #32
 8002b8a:	1af9      	subs	r1, r7, r3
 8002b8c:	468c      	mov	ip, r1
 8002b8e:	4659      	mov	r1, fp
 8002b90:	4667      	mov	r7, ip
 8002b92:	40b9      	lsls	r1, r7
 8002b94:	000f      	movs	r7, r1
 8002b96:	0011      	movs	r1, r2
 8002b98:	40d9      	lsrs	r1, r3
 8002b9a:	430f      	orrs	r7, r1
 8002b9c:	4661      	mov	r1, ip
 8002b9e:	408a      	lsls	r2, r1
 8002ba0:	1e51      	subs	r1, r2, #1
 8002ba2:	418a      	sbcs	r2, r1
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	40d9      	lsrs	r1, r3
 8002ba8:	4317      	orrs	r7, r2
 8002baa:	1a64      	subs	r4, r4, r1
 8002bac:	1bc7      	subs	r7, r0, r7
 8002bae:	42b8      	cmp	r0, r7
 8002bb0:	4180      	sbcs	r0, r0
 8002bb2:	4240      	negs	r0, r0
 8002bb4:	1a24      	subs	r4, r4, r0
 8002bb6:	0223      	lsls	r3, r4, #8
 8002bb8:	d400      	bmi.n	8002bbc <__aeabi_dsub+0xc0>
 8002bba:	e140      	b.n	8002e3e <__aeabi_dsub+0x342>
 8002bbc:	0264      	lsls	r4, r4, #9
 8002bbe:	0a64      	lsrs	r4, r4, #9
 8002bc0:	2c00      	cmp	r4, #0
 8002bc2:	d100      	bne.n	8002bc6 <__aeabi_dsub+0xca>
 8002bc4:	e154      	b.n	8002e70 <__aeabi_dsub+0x374>
 8002bc6:	0020      	movs	r0, r4
 8002bc8:	f000 fc9a 	bl	8003500 <__clzsi2>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	3b08      	subs	r3, #8
 8002bd0:	2120      	movs	r1, #32
 8002bd2:	0038      	movs	r0, r7
 8002bd4:	1aca      	subs	r2, r1, r3
 8002bd6:	40d0      	lsrs	r0, r2
 8002bd8:	409c      	lsls	r4, r3
 8002bda:	0002      	movs	r2, r0
 8002bdc:	409f      	lsls	r7, r3
 8002bde:	4322      	orrs	r2, r4
 8002be0:	429d      	cmp	r5, r3
 8002be2:	dd00      	ble.n	8002be6 <__aeabi_dsub+0xea>
 8002be4:	e1a6      	b.n	8002f34 <__aeabi_dsub+0x438>
 8002be6:	1b58      	subs	r0, r3, r5
 8002be8:	3001      	adds	r0, #1
 8002bea:	1a09      	subs	r1, r1, r0
 8002bec:	003c      	movs	r4, r7
 8002bee:	408f      	lsls	r7, r1
 8002bf0:	40c4      	lsrs	r4, r0
 8002bf2:	1e7b      	subs	r3, r7, #1
 8002bf4:	419f      	sbcs	r7, r3
 8002bf6:	0013      	movs	r3, r2
 8002bf8:	408b      	lsls	r3, r1
 8002bfa:	4327      	orrs	r7, r4
 8002bfc:	431f      	orrs	r7, r3
 8002bfe:	40c2      	lsrs	r2, r0
 8002c00:	003b      	movs	r3, r7
 8002c02:	0014      	movs	r4, r2
 8002c04:	2500      	movs	r5, #0
 8002c06:	4313      	orrs	r3, r2
 8002c08:	d100      	bne.n	8002c0c <__aeabi_dsub+0x110>
 8002c0a:	e1f7      	b.n	8002ffc <__aeabi_dsub+0x500>
 8002c0c:	077b      	lsls	r3, r7, #29
 8002c0e:	d100      	bne.n	8002c12 <__aeabi_dsub+0x116>
 8002c10:	e377      	b.n	8003302 <__aeabi_dsub+0x806>
 8002c12:	230f      	movs	r3, #15
 8002c14:	0038      	movs	r0, r7
 8002c16:	403b      	ands	r3, r7
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d004      	beq.n	8002c26 <__aeabi_dsub+0x12a>
 8002c1c:	1d38      	adds	r0, r7, #4
 8002c1e:	42b8      	cmp	r0, r7
 8002c20:	41bf      	sbcs	r7, r7
 8002c22:	427f      	negs	r7, r7
 8002c24:	19e4      	adds	r4, r4, r7
 8002c26:	0223      	lsls	r3, r4, #8
 8002c28:	d400      	bmi.n	8002c2c <__aeabi_dsub+0x130>
 8002c2a:	e368      	b.n	80032fe <__aeabi_dsub+0x802>
 8002c2c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e60 <__aeabi_dsub+0x364>)
 8002c2e:	3501      	adds	r5, #1
 8002c30:	429d      	cmp	r5, r3
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x13a>
 8002c34:	e0f4      	b.n	8002e20 <__aeabi_dsub+0x324>
 8002c36:	4b8b      	ldr	r3, [pc, #556]	@ (8002e64 <__aeabi_dsub+0x368>)
 8002c38:	056d      	lsls	r5, r5, #21
 8002c3a:	401c      	ands	r4, r3
 8002c3c:	0d6d      	lsrs	r5, r5, #21
 8002c3e:	0767      	lsls	r7, r4, #29
 8002c40:	08c0      	lsrs	r0, r0, #3
 8002c42:	0264      	lsls	r4, r4, #9
 8002c44:	4307      	orrs	r7, r0
 8002c46:	0b24      	lsrs	r4, r4, #12
 8002c48:	e0ec      	b.n	8002e24 <__aeabi_dsub+0x328>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	dc00      	bgt.n	8002c50 <__aeabi_dsub+0x154>
 8002c4e:	e329      	b.n	80032a4 <__aeabi_dsub+0x7a8>
 8002c50:	4649      	mov	r1, r9
 8002c52:	2900      	cmp	r1, #0
 8002c54:	d000      	beq.n	8002c58 <__aeabi_dsub+0x15c>
 8002c56:	e0d6      	b.n	8002e06 <__aeabi_dsub+0x30a>
 8002c58:	4659      	mov	r1, fp
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	d100      	bne.n	8002c60 <__aeabi_dsub+0x164>
 8002c5e:	e12e      	b.n	8002ebe <__aeabi_dsub+0x3c2>
 8002c60:	1e59      	subs	r1, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d100      	bne.n	8002c68 <__aeabi_dsub+0x16c>
 8002c66:	e1e6      	b.n	8003036 <__aeabi_dsub+0x53a>
 8002c68:	42bb      	cmp	r3, r7
 8002c6a:	d100      	bne.n	8002c6e <__aeabi_dsub+0x172>
 8002c6c:	e182      	b.n	8002f74 <__aeabi_dsub+0x478>
 8002c6e:	2701      	movs	r7, #1
 8002c70:	000b      	movs	r3, r1
 8002c72:	2938      	cmp	r1, #56	@ 0x38
 8002c74:	dc14      	bgt.n	8002ca0 <__aeabi_dsub+0x1a4>
 8002c76:	2b1f      	cmp	r3, #31
 8002c78:	dd00      	ble.n	8002c7c <__aeabi_dsub+0x180>
 8002c7a:	e23c      	b.n	80030f6 <__aeabi_dsub+0x5fa>
 8002c7c:	2720      	movs	r7, #32
 8002c7e:	1af9      	subs	r1, r7, r3
 8002c80:	468c      	mov	ip, r1
 8002c82:	4659      	mov	r1, fp
 8002c84:	4667      	mov	r7, ip
 8002c86:	40b9      	lsls	r1, r7
 8002c88:	000f      	movs	r7, r1
 8002c8a:	0011      	movs	r1, r2
 8002c8c:	40d9      	lsrs	r1, r3
 8002c8e:	430f      	orrs	r7, r1
 8002c90:	4661      	mov	r1, ip
 8002c92:	408a      	lsls	r2, r1
 8002c94:	1e51      	subs	r1, r2, #1
 8002c96:	418a      	sbcs	r2, r1
 8002c98:	4659      	mov	r1, fp
 8002c9a:	40d9      	lsrs	r1, r3
 8002c9c:	4317      	orrs	r7, r2
 8002c9e:	1864      	adds	r4, r4, r1
 8002ca0:	183f      	adds	r7, r7, r0
 8002ca2:	4287      	cmp	r7, r0
 8002ca4:	4180      	sbcs	r0, r0
 8002ca6:	4240      	negs	r0, r0
 8002ca8:	1824      	adds	r4, r4, r0
 8002caa:	0223      	lsls	r3, r4, #8
 8002cac:	d400      	bmi.n	8002cb0 <__aeabi_dsub+0x1b4>
 8002cae:	e0c6      	b.n	8002e3e <__aeabi_dsub+0x342>
 8002cb0:	4b6b      	ldr	r3, [pc, #428]	@ (8002e60 <__aeabi_dsub+0x364>)
 8002cb2:	3501      	adds	r5, #1
 8002cb4:	429d      	cmp	r5, r3
 8002cb6:	d100      	bne.n	8002cba <__aeabi_dsub+0x1be>
 8002cb8:	e0b2      	b.n	8002e20 <__aeabi_dsub+0x324>
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4b69      	ldr	r3, [pc, #420]	@ (8002e64 <__aeabi_dsub+0x368>)
 8002cbe:	087a      	lsrs	r2, r7, #1
 8002cc0:	401c      	ands	r4, r3
 8002cc2:	4039      	ands	r1, r7
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	07e7      	lsls	r7, r4, #31
 8002cc8:	4317      	orrs	r7, r2
 8002cca:	0864      	lsrs	r4, r4, #1
 8002ccc:	e79e      	b.n	8002c0c <__aeabi_dsub+0x110>
 8002cce:	4b66      	ldr	r3, [pc, #408]	@ (8002e68 <__aeabi_dsub+0x36c>)
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	468a      	mov	sl, r1
 8002cd4:	18eb      	adds	r3, r5, r3
 8002cd6:	2900      	cmp	r1, #0
 8002cd8:	d028      	beq.n	8002d2c <__aeabi_dsub+0x230>
 8002cda:	4566      	cmp	r6, ip
 8002cdc:	d02c      	beq.n	8002d38 <__aeabi_dsub+0x23c>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d05b      	beq.n	8002d9a <__aeabi_dsub+0x29e>
 8002ce2:	2d00      	cmp	r5, #0
 8002ce4:	d100      	bne.n	8002ce8 <__aeabi_dsub+0x1ec>
 8002ce6:	e12c      	b.n	8002f42 <__aeabi_dsub+0x446>
 8002ce8:	465b      	mov	r3, fp
 8002cea:	4666      	mov	r6, ip
 8002cec:	075f      	lsls	r7, r3, #29
 8002cee:	08d2      	lsrs	r2, r2, #3
 8002cf0:	4317      	orrs	r7, r2
 8002cf2:	08dd      	lsrs	r5, r3, #3
 8002cf4:	003b      	movs	r3, r7
 8002cf6:	432b      	orrs	r3, r5
 8002cf8:	d100      	bne.n	8002cfc <__aeabi_dsub+0x200>
 8002cfa:	e0e2      	b.n	8002ec2 <__aeabi_dsub+0x3c6>
 8002cfc:	2480      	movs	r4, #128	@ 0x80
 8002cfe:	0324      	lsls	r4, r4, #12
 8002d00:	432c      	orrs	r4, r5
 8002d02:	0324      	lsls	r4, r4, #12
 8002d04:	4d56      	ldr	r5, [pc, #344]	@ (8002e60 <__aeabi_dsub+0x364>)
 8002d06:	0b24      	lsrs	r4, r4, #12
 8002d08:	e08c      	b.n	8002e24 <__aeabi_dsub+0x328>
 8002d0a:	4659      	mov	r1, fp
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	d100      	bne.n	8002d12 <__aeabi_dsub+0x216>
 8002d10:	e0d5      	b.n	8002ebe <__aeabi_dsub+0x3c2>
 8002d12:	1e59      	subs	r1, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x21e>
 8002d18:	e1b9      	b.n	800308e <__aeabi_dsub+0x592>
 8002d1a:	42bb      	cmp	r3, r7
 8002d1c:	d100      	bne.n	8002d20 <__aeabi_dsub+0x224>
 8002d1e:	e1b1      	b.n	8003084 <__aeabi_dsub+0x588>
 8002d20:	2701      	movs	r7, #1
 8002d22:	000b      	movs	r3, r1
 8002d24:	2938      	cmp	r1, #56	@ 0x38
 8002d26:	dd00      	ble.n	8002d2a <__aeabi_dsub+0x22e>
 8002d28:	e740      	b.n	8002bac <__aeabi_dsub+0xb0>
 8002d2a:	e72a      	b.n	8002b82 <__aeabi_dsub+0x86>
 8002d2c:	4661      	mov	r1, ip
 8002d2e:	2701      	movs	r7, #1
 8002d30:	4079      	eors	r1, r7
 8002d32:	468c      	mov	ip, r1
 8002d34:	4566      	cmp	r6, ip
 8002d36:	d1d2      	bne.n	8002cde <__aeabi_dsub+0x1e2>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d100      	bne.n	8002d3e <__aeabi_dsub+0x242>
 8002d3c:	e0c5      	b.n	8002eca <__aeabi_dsub+0x3ce>
 8002d3e:	2d00      	cmp	r5, #0
 8002d40:	d000      	beq.n	8002d44 <__aeabi_dsub+0x248>
 8002d42:	e155      	b.n	8002ff0 <__aeabi_dsub+0x4f4>
 8002d44:	464b      	mov	r3, r9
 8002d46:	0025      	movs	r5, r4
 8002d48:	4305      	orrs	r5, r0
 8002d4a:	d100      	bne.n	8002d4e <__aeabi_dsub+0x252>
 8002d4c:	e212      	b.n	8003174 <__aeabi_dsub+0x678>
 8002d4e:	1e59      	subs	r1, r3, #1
 8002d50:	468c      	mov	ip, r1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x25c>
 8002d56:	e249      	b.n	80031ec <__aeabi_dsub+0x6f0>
 8002d58:	4d41      	ldr	r5, [pc, #260]	@ (8002e60 <__aeabi_dsub+0x364>)
 8002d5a:	42ab      	cmp	r3, r5
 8002d5c:	d100      	bne.n	8002d60 <__aeabi_dsub+0x264>
 8002d5e:	e28f      	b.n	8003280 <__aeabi_dsub+0x784>
 8002d60:	2701      	movs	r7, #1
 8002d62:	2938      	cmp	r1, #56	@ 0x38
 8002d64:	dc11      	bgt.n	8002d8a <__aeabi_dsub+0x28e>
 8002d66:	4663      	mov	r3, ip
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x272>
 8002d6c:	e25b      	b.n	8003226 <__aeabi_dsub+0x72a>
 8002d6e:	4661      	mov	r1, ip
 8002d70:	2320      	movs	r3, #32
 8002d72:	0027      	movs	r7, r4
 8002d74:	1a5b      	subs	r3, r3, r1
 8002d76:	0005      	movs	r5, r0
 8002d78:	4098      	lsls	r0, r3
 8002d7a:	409f      	lsls	r7, r3
 8002d7c:	40cd      	lsrs	r5, r1
 8002d7e:	1e43      	subs	r3, r0, #1
 8002d80:	4198      	sbcs	r0, r3
 8002d82:	40cc      	lsrs	r4, r1
 8002d84:	432f      	orrs	r7, r5
 8002d86:	4307      	orrs	r7, r0
 8002d88:	44a3      	add	fp, r4
 8002d8a:	18bf      	adds	r7, r7, r2
 8002d8c:	4297      	cmp	r7, r2
 8002d8e:	4192      	sbcs	r2, r2
 8002d90:	4252      	negs	r2, r2
 8002d92:	445a      	add	r2, fp
 8002d94:	0014      	movs	r4, r2
 8002d96:	464d      	mov	r5, r9
 8002d98:	e787      	b.n	8002caa <__aeabi_dsub+0x1ae>
 8002d9a:	4f34      	ldr	r7, [pc, #208]	@ (8002e6c <__aeabi_dsub+0x370>)
 8002d9c:	1c6b      	adds	r3, r5, #1
 8002d9e:	423b      	tst	r3, r7
 8002da0:	d000      	beq.n	8002da4 <__aeabi_dsub+0x2a8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x416>
 8002da4:	4659      	mov	r1, fp
 8002da6:	0023      	movs	r3, r4
 8002da8:	4311      	orrs	r1, r2
 8002daa:	000f      	movs	r7, r1
 8002dac:	4303      	orrs	r3, r0
 8002dae:	2d00      	cmp	r5, #0
 8002db0:	d000      	beq.n	8002db4 <__aeabi_dsub+0x2b8>
 8002db2:	e126      	b.n	8003002 <__aeabi_dsub+0x506>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d100      	bne.n	8002dba <__aeabi_dsub+0x2be>
 8002db8:	e1c0      	b.n	800313c <__aeabi_dsub+0x640>
 8002dba:	2900      	cmp	r1, #0
 8002dbc:	d100      	bne.n	8002dc0 <__aeabi_dsub+0x2c4>
 8002dbe:	e0a1      	b.n	8002f04 <__aeabi_dsub+0x408>
 8002dc0:	1a83      	subs	r3, r0, r2
 8002dc2:	4698      	mov	r8, r3
 8002dc4:	465b      	mov	r3, fp
 8002dc6:	4540      	cmp	r0, r8
 8002dc8:	41ad      	sbcs	r5, r5
 8002dca:	1ae3      	subs	r3, r4, r3
 8002dcc:	426d      	negs	r5, r5
 8002dce:	1b5b      	subs	r3, r3, r5
 8002dd0:	2580      	movs	r5, #128	@ 0x80
 8002dd2:	042d      	lsls	r5, r5, #16
 8002dd4:	422b      	tst	r3, r5
 8002dd6:	d100      	bne.n	8002dda <__aeabi_dsub+0x2de>
 8002dd8:	e14b      	b.n	8003072 <__aeabi_dsub+0x576>
 8002dda:	465b      	mov	r3, fp
 8002ddc:	1a10      	subs	r0, r2, r0
 8002dde:	4282      	cmp	r2, r0
 8002de0:	4192      	sbcs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	0007      	movs	r7, r0
 8002de6:	2601      	movs	r6, #1
 8002de8:	4663      	mov	r3, ip
 8002dea:	4252      	negs	r2, r2
 8002dec:	1aa4      	subs	r4, r4, r2
 8002dee:	4327      	orrs	r7, r4
 8002df0:	401e      	ands	r6, r3
 8002df2:	2f00      	cmp	r7, #0
 8002df4:	d100      	bne.n	8002df8 <__aeabi_dsub+0x2fc>
 8002df6:	e142      	b.n	800307e <__aeabi_dsub+0x582>
 8002df8:	422c      	tst	r4, r5
 8002dfa:	d100      	bne.n	8002dfe <__aeabi_dsub+0x302>
 8002dfc:	e26d      	b.n	80032da <__aeabi_dsub+0x7de>
 8002dfe:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <__aeabi_dsub+0x368>)
 8002e00:	2501      	movs	r5, #1
 8002e02:	401c      	ands	r4, r3
 8002e04:	e71b      	b.n	8002c3e <__aeabi_dsub+0x142>
 8002e06:	42bd      	cmp	r5, r7
 8002e08:	d100      	bne.n	8002e0c <__aeabi_dsub+0x310>
 8002e0a:	e13b      	b.n	8003084 <__aeabi_dsub+0x588>
 8002e0c:	2701      	movs	r7, #1
 8002e0e:	2b38      	cmp	r3, #56	@ 0x38
 8002e10:	dd00      	ble.n	8002e14 <__aeabi_dsub+0x318>
 8002e12:	e745      	b.n	8002ca0 <__aeabi_dsub+0x1a4>
 8002e14:	2780      	movs	r7, #128	@ 0x80
 8002e16:	4659      	mov	r1, fp
 8002e18:	043f      	lsls	r7, r7, #16
 8002e1a:	4339      	orrs	r1, r7
 8002e1c:	468b      	mov	fp, r1
 8002e1e:	e72a      	b.n	8002c76 <__aeabi_dsub+0x17a>
 8002e20:	2400      	movs	r4, #0
 8002e22:	2700      	movs	r7, #0
 8002e24:	052d      	lsls	r5, r5, #20
 8002e26:	4325      	orrs	r5, r4
 8002e28:	07f6      	lsls	r6, r6, #31
 8002e2a:	4335      	orrs	r5, r6
 8002e2c:	0038      	movs	r0, r7
 8002e2e:	0029      	movs	r1, r5
 8002e30:	b003      	add	sp, #12
 8002e32:	bcf0      	pop	{r4, r5, r6, r7}
 8002e34:	46bb      	mov	fp, r7
 8002e36:	46b2      	mov	sl, r6
 8002e38:	46a9      	mov	r9, r5
 8002e3a:	46a0      	mov	r8, r4
 8002e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e3e:	077b      	lsls	r3, r7, #29
 8002e40:	d004      	beq.n	8002e4c <__aeabi_dsub+0x350>
 8002e42:	230f      	movs	r3, #15
 8002e44:	403b      	ands	r3, r7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d000      	beq.n	8002e4c <__aeabi_dsub+0x350>
 8002e4a:	e6e7      	b.n	8002c1c <__aeabi_dsub+0x120>
 8002e4c:	002b      	movs	r3, r5
 8002e4e:	08f8      	lsrs	r0, r7, #3
 8002e50:	4a03      	ldr	r2, [pc, #12]	@ (8002e60 <__aeabi_dsub+0x364>)
 8002e52:	0767      	lsls	r7, r4, #29
 8002e54:	4307      	orrs	r7, r0
 8002e56:	08e5      	lsrs	r5, r4, #3
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <__aeabi_dsub+0x362>
 8002e5c:	e74a      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 8002e5e:	e0a5      	b.n	8002fac <__aeabi_dsub+0x4b0>
 8002e60:	000007ff 	.word	0x000007ff
 8002e64:	ff7fffff 	.word	0xff7fffff
 8002e68:	fffff801 	.word	0xfffff801
 8002e6c:	000007fe 	.word	0x000007fe
 8002e70:	0038      	movs	r0, r7
 8002e72:	f000 fb45 	bl	8003500 <__clzsi2>
 8002e76:	0003      	movs	r3, r0
 8002e78:	3318      	adds	r3, #24
 8002e7a:	2b1f      	cmp	r3, #31
 8002e7c:	dc00      	bgt.n	8002e80 <__aeabi_dsub+0x384>
 8002e7e:	e6a7      	b.n	8002bd0 <__aeabi_dsub+0xd4>
 8002e80:	003a      	movs	r2, r7
 8002e82:	3808      	subs	r0, #8
 8002e84:	4082      	lsls	r2, r0
 8002e86:	429d      	cmp	r5, r3
 8002e88:	dd00      	ble.n	8002e8c <__aeabi_dsub+0x390>
 8002e8a:	e08a      	b.n	8002fa2 <__aeabi_dsub+0x4a6>
 8002e8c:	1b5b      	subs	r3, r3, r5
 8002e8e:	1c58      	adds	r0, r3, #1
 8002e90:	281f      	cmp	r0, #31
 8002e92:	dc00      	bgt.n	8002e96 <__aeabi_dsub+0x39a>
 8002e94:	e1d8      	b.n	8003248 <__aeabi_dsub+0x74c>
 8002e96:	0017      	movs	r7, r2
 8002e98:	3b1f      	subs	r3, #31
 8002e9a:	40df      	lsrs	r7, r3
 8002e9c:	2820      	cmp	r0, #32
 8002e9e:	d005      	beq.n	8002eac <__aeabi_dsub+0x3b0>
 8002ea0:	2340      	movs	r3, #64	@ 0x40
 8002ea2:	1a1b      	subs	r3, r3, r0
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	1e53      	subs	r3, r2, #1
 8002ea8:	419a      	sbcs	r2, r3
 8002eaa:	4317      	orrs	r7, r2
 8002eac:	2500      	movs	r5, #0
 8002eae:	2f00      	cmp	r7, #0
 8002eb0:	d100      	bne.n	8002eb4 <__aeabi_dsub+0x3b8>
 8002eb2:	e0e5      	b.n	8003080 <__aeabi_dsub+0x584>
 8002eb4:	077b      	lsls	r3, r7, #29
 8002eb6:	d000      	beq.n	8002eba <__aeabi_dsub+0x3be>
 8002eb8:	e6ab      	b.n	8002c12 <__aeabi_dsub+0x116>
 8002eba:	002c      	movs	r4, r5
 8002ebc:	e7c6      	b.n	8002e4c <__aeabi_dsub+0x350>
 8002ebe:	08c0      	lsrs	r0, r0, #3
 8002ec0:	e7c6      	b.n	8002e50 <__aeabi_dsub+0x354>
 8002ec2:	2700      	movs	r7, #0
 8002ec4:	2400      	movs	r4, #0
 8002ec6:	4dd1      	ldr	r5, [pc, #836]	@ (800320c <__aeabi_dsub+0x710>)
 8002ec8:	e7ac      	b.n	8002e24 <__aeabi_dsub+0x328>
 8002eca:	4fd1      	ldr	r7, [pc, #836]	@ (8003210 <__aeabi_dsub+0x714>)
 8002ecc:	1c6b      	adds	r3, r5, #1
 8002ece:	423b      	tst	r3, r7
 8002ed0:	d171      	bne.n	8002fb6 <__aeabi_dsub+0x4ba>
 8002ed2:	0023      	movs	r3, r4
 8002ed4:	4303      	orrs	r3, r0
 8002ed6:	2d00      	cmp	r5, #0
 8002ed8:	d000      	beq.n	8002edc <__aeabi_dsub+0x3e0>
 8002eda:	e14e      	b.n	800317a <__aeabi_dsub+0x67e>
 8002edc:	4657      	mov	r7, sl
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d100      	bne.n	8002ee4 <__aeabi_dsub+0x3e8>
 8002ee2:	e1b5      	b.n	8003250 <__aeabi_dsub+0x754>
 8002ee4:	2f00      	cmp	r7, #0
 8002ee6:	d00d      	beq.n	8002f04 <__aeabi_dsub+0x408>
 8002ee8:	1883      	adds	r3, r0, r2
 8002eea:	4283      	cmp	r3, r0
 8002eec:	4180      	sbcs	r0, r0
 8002eee:	445c      	add	r4, fp
 8002ef0:	4240      	negs	r0, r0
 8002ef2:	1824      	adds	r4, r4, r0
 8002ef4:	0222      	lsls	r2, r4, #8
 8002ef6:	d500      	bpl.n	8002efa <__aeabi_dsub+0x3fe>
 8002ef8:	e1c8      	b.n	800328c <__aeabi_dsub+0x790>
 8002efa:	001f      	movs	r7, r3
 8002efc:	4698      	mov	r8, r3
 8002efe:	4327      	orrs	r7, r4
 8002f00:	d100      	bne.n	8002f04 <__aeabi_dsub+0x408>
 8002f02:	e0bc      	b.n	800307e <__aeabi_dsub+0x582>
 8002f04:	4643      	mov	r3, r8
 8002f06:	0767      	lsls	r7, r4, #29
 8002f08:	08db      	lsrs	r3, r3, #3
 8002f0a:	431f      	orrs	r7, r3
 8002f0c:	08e5      	lsrs	r5, r4, #3
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e04c      	b.n	8002fac <__aeabi_dsub+0x4b0>
 8002f12:	1a83      	subs	r3, r0, r2
 8002f14:	4698      	mov	r8, r3
 8002f16:	465b      	mov	r3, fp
 8002f18:	4540      	cmp	r0, r8
 8002f1a:	41bf      	sbcs	r7, r7
 8002f1c:	1ae3      	subs	r3, r4, r3
 8002f1e:	427f      	negs	r7, r7
 8002f20:	1bdb      	subs	r3, r3, r7
 8002f22:	021f      	lsls	r7, r3, #8
 8002f24:	d47c      	bmi.n	8003020 <__aeabi_dsub+0x524>
 8002f26:	4647      	mov	r7, r8
 8002f28:	431f      	orrs	r7, r3
 8002f2a:	d100      	bne.n	8002f2e <__aeabi_dsub+0x432>
 8002f2c:	e0a6      	b.n	800307c <__aeabi_dsub+0x580>
 8002f2e:	001c      	movs	r4, r3
 8002f30:	4647      	mov	r7, r8
 8002f32:	e645      	b.n	8002bc0 <__aeabi_dsub+0xc4>
 8002f34:	4cb7      	ldr	r4, [pc, #732]	@ (8003214 <__aeabi_dsub+0x718>)
 8002f36:	1aed      	subs	r5, r5, r3
 8002f38:	4014      	ands	r4, r2
 8002f3a:	077b      	lsls	r3, r7, #29
 8002f3c:	d000      	beq.n	8002f40 <__aeabi_dsub+0x444>
 8002f3e:	e780      	b.n	8002e42 <__aeabi_dsub+0x346>
 8002f40:	e784      	b.n	8002e4c <__aeabi_dsub+0x350>
 8002f42:	464b      	mov	r3, r9
 8002f44:	0025      	movs	r5, r4
 8002f46:	4305      	orrs	r5, r0
 8002f48:	d066      	beq.n	8003018 <__aeabi_dsub+0x51c>
 8002f4a:	1e5f      	subs	r7, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d100      	bne.n	8002f52 <__aeabi_dsub+0x456>
 8002f50:	e0fc      	b.n	800314c <__aeabi_dsub+0x650>
 8002f52:	4dae      	ldr	r5, [pc, #696]	@ (800320c <__aeabi_dsub+0x710>)
 8002f54:	42ab      	cmp	r3, r5
 8002f56:	d100      	bne.n	8002f5a <__aeabi_dsub+0x45e>
 8002f58:	e15e      	b.n	8003218 <__aeabi_dsub+0x71c>
 8002f5a:	4666      	mov	r6, ip
 8002f5c:	2f38      	cmp	r7, #56	@ 0x38
 8002f5e:	dc00      	bgt.n	8002f62 <__aeabi_dsub+0x466>
 8002f60:	e0b4      	b.n	80030cc <__aeabi_dsub+0x5d0>
 8002f62:	2001      	movs	r0, #1
 8002f64:	1a17      	subs	r7, r2, r0
 8002f66:	42ba      	cmp	r2, r7
 8002f68:	4192      	sbcs	r2, r2
 8002f6a:	465b      	mov	r3, fp
 8002f6c:	4252      	negs	r2, r2
 8002f6e:	464d      	mov	r5, r9
 8002f70:	1a9c      	subs	r4, r3, r2
 8002f72:	e620      	b.n	8002bb6 <__aeabi_dsub+0xba>
 8002f74:	0767      	lsls	r7, r4, #29
 8002f76:	08c0      	lsrs	r0, r0, #3
 8002f78:	4307      	orrs	r7, r0
 8002f7a:	08e5      	lsrs	r5, r4, #3
 8002f7c:	e6ba      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 8002f7e:	001f      	movs	r7, r3
 8002f80:	4659      	mov	r1, fp
 8002f82:	3f20      	subs	r7, #32
 8002f84:	40f9      	lsrs	r1, r7
 8002f86:	000f      	movs	r7, r1
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d005      	beq.n	8002f98 <__aeabi_dsub+0x49c>
 8002f8c:	2140      	movs	r1, #64	@ 0x40
 8002f8e:	1acb      	subs	r3, r1, r3
 8002f90:	4659      	mov	r1, fp
 8002f92:	4099      	lsls	r1, r3
 8002f94:	430a      	orrs	r2, r1
 8002f96:	4692      	mov	sl, r2
 8002f98:	4653      	mov	r3, sl
 8002f9a:	1e5a      	subs	r2, r3, #1
 8002f9c:	4193      	sbcs	r3, r2
 8002f9e:	431f      	orrs	r7, r3
 8002fa0:	e604      	b.n	8002bac <__aeabi_dsub+0xb0>
 8002fa2:	1aeb      	subs	r3, r5, r3
 8002fa4:	4d9b      	ldr	r5, [pc, #620]	@ (8003214 <__aeabi_dsub+0x718>)
 8002fa6:	4015      	ands	r5, r2
 8002fa8:	076f      	lsls	r7, r5, #29
 8002faa:	08ed      	lsrs	r5, r5, #3
 8002fac:	032c      	lsls	r4, r5, #12
 8002fae:	055d      	lsls	r5, r3, #21
 8002fb0:	0b24      	lsrs	r4, r4, #12
 8002fb2:	0d6d      	lsrs	r5, r5, #21
 8002fb4:	e736      	b.n	8002e24 <__aeabi_dsub+0x328>
 8002fb6:	4d95      	ldr	r5, [pc, #596]	@ (800320c <__aeabi_dsub+0x710>)
 8002fb8:	42ab      	cmp	r3, r5
 8002fba:	d100      	bne.n	8002fbe <__aeabi_dsub+0x4c2>
 8002fbc:	e0d6      	b.n	800316c <__aeabi_dsub+0x670>
 8002fbe:	1882      	adds	r2, r0, r2
 8002fc0:	0021      	movs	r1, r4
 8002fc2:	4282      	cmp	r2, r0
 8002fc4:	4180      	sbcs	r0, r0
 8002fc6:	4459      	add	r1, fp
 8002fc8:	4240      	negs	r0, r0
 8002fca:	1808      	adds	r0, r1, r0
 8002fcc:	07c7      	lsls	r7, r0, #31
 8002fce:	0852      	lsrs	r2, r2, #1
 8002fd0:	4317      	orrs	r7, r2
 8002fd2:	0844      	lsrs	r4, r0, #1
 8002fd4:	0752      	lsls	r2, r2, #29
 8002fd6:	d400      	bmi.n	8002fda <__aeabi_dsub+0x4de>
 8002fd8:	e185      	b.n	80032e6 <__aeabi_dsub+0x7ea>
 8002fda:	220f      	movs	r2, #15
 8002fdc:	001d      	movs	r5, r3
 8002fde:	403a      	ands	r2, r7
 8002fe0:	2a04      	cmp	r2, #4
 8002fe2:	d000      	beq.n	8002fe6 <__aeabi_dsub+0x4ea>
 8002fe4:	e61a      	b.n	8002c1c <__aeabi_dsub+0x120>
 8002fe6:	08ff      	lsrs	r7, r7, #3
 8002fe8:	0764      	lsls	r4, r4, #29
 8002fea:	4327      	orrs	r7, r4
 8002fec:	0905      	lsrs	r5, r0, #4
 8002fee:	e7dd      	b.n	8002fac <__aeabi_dsub+0x4b0>
 8002ff0:	465b      	mov	r3, fp
 8002ff2:	08d2      	lsrs	r2, r2, #3
 8002ff4:	075f      	lsls	r7, r3, #29
 8002ff6:	4317      	orrs	r7, r2
 8002ff8:	08dd      	lsrs	r5, r3, #3
 8002ffa:	e67b      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 8002ffc:	2700      	movs	r7, #0
 8002ffe:	2400      	movs	r4, #0
 8003000:	e710      	b.n	8002e24 <__aeabi_dsub+0x328>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d000      	beq.n	8003008 <__aeabi_dsub+0x50c>
 8003006:	e0d6      	b.n	80031b6 <__aeabi_dsub+0x6ba>
 8003008:	2900      	cmp	r1, #0
 800300a:	d000      	beq.n	800300e <__aeabi_dsub+0x512>
 800300c:	e12f      	b.n	800326e <__aeabi_dsub+0x772>
 800300e:	2480      	movs	r4, #128	@ 0x80
 8003010:	2600      	movs	r6, #0
 8003012:	4d7e      	ldr	r5, [pc, #504]	@ (800320c <__aeabi_dsub+0x710>)
 8003014:	0324      	lsls	r4, r4, #12
 8003016:	e705      	b.n	8002e24 <__aeabi_dsub+0x328>
 8003018:	4666      	mov	r6, ip
 800301a:	465c      	mov	r4, fp
 800301c:	08d0      	lsrs	r0, r2, #3
 800301e:	e717      	b.n	8002e50 <__aeabi_dsub+0x354>
 8003020:	465b      	mov	r3, fp
 8003022:	1a17      	subs	r7, r2, r0
 8003024:	42ba      	cmp	r2, r7
 8003026:	4192      	sbcs	r2, r2
 8003028:	1b1c      	subs	r4, r3, r4
 800302a:	2601      	movs	r6, #1
 800302c:	4663      	mov	r3, ip
 800302e:	4252      	negs	r2, r2
 8003030:	1aa4      	subs	r4, r4, r2
 8003032:	401e      	ands	r6, r3
 8003034:	e5c4      	b.n	8002bc0 <__aeabi_dsub+0xc4>
 8003036:	1883      	adds	r3, r0, r2
 8003038:	4283      	cmp	r3, r0
 800303a:	4180      	sbcs	r0, r0
 800303c:	445c      	add	r4, fp
 800303e:	4240      	negs	r0, r0
 8003040:	1825      	adds	r5, r4, r0
 8003042:	022a      	lsls	r2, r5, #8
 8003044:	d400      	bmi.n	8003048 <__aeabi_dsub+0x54c>
 8003046:	e0da      	b.n	80031fe <__aeabi_dsub+0x702>
 8003048:	4a72      	ldr	r2, [pc, #456]	@ (8003214 <__aeabi_dsub+0x718>)
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	4015      	ands	r5, r2
 800304e:	07ea      	lsls	r2, r5, #31
 8003050:	431a      	orrs	r2, r3
 8003052:	0869      	lsrs	r1, r5, #1
 8003054:	075b      	lsls	r3, r3, #29
 8003056:	d400      	bmi.n	800305a <__aeabi_dsub+0x55e>
 8003058:	e14a      	b.n	80032f0 <__aeabi_dsub+0x7f4>
 800305a:	230f      	movs	r3, #15
 800305c:	4013      	ands	r3, r2
 800305e:	2b04      	cmp	r3, #4
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x568>
 8003062:	e0fc      	b.n	800325e <__aeabi_dsub+0x762>
 8003064:	1d17      	adds	r7, r2, #4
 8003066:	4297      	cmp	r7, r2
 8003068:	41a4      	sbcs	r4, r4
 800306a:	4264      	negs	r4, r4
 800306c:	2502      	movs	r5, #2
 800306e:	1864      	adds	r4, r4, r1
 8003070:	e6ec      	b.n	8002e4c <__aeabi_dsub+0x350>
 8003072:	4647      	mov	r7, r8
 8003074:	001c      	movs	r4, r3
 8003076:	431f      	orrs	r7, r3
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x580>
 800307a:	e743      	b.n	8002f04 <__aeabi_dsub+0x408>
 800307c:	2600      	movs	r6, #0
 800307e:	2500      	movs	r5, #0
 8003080:	2400      	movs	r4, #0
 8003082:	e6cf      	b.n	8002e24 <__aeabi_dsub+0x328>
 8003084:	08c0      	lsrs	r0, r0, #3
 8003086:	0767      	lsls	r7, r4, #29
 8003088:	4307      	orrs	r7, r0
 800308a:	08e5      	lsrs	r5, r4, #3
 800308c:	e632      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 800308e:	1a87      	subs	r7, r0, r2
 8003090:	465b      	mov	r3, fp
 8003092:	42b8      	cmp	r0, r7
 8003094:	4180      	sbcs	r0, r0
 8003096:	1ae4      	subs	r4, r4, r3
 8003098:	4240      	negs	r0, r0
 800309a:	1a24      	subs	r4, r4, r0
 800309c:	0223      	lsls	r3, r4, #8
 800309e:	d428      	bmi.n	80030f2 <__aeabi_dsub+0x5f6>
 80030a0:	0763      	lsls	r3, r4, #29
 80030a2:	08ff      	lsrs	r7, r7, #3
 80030a4:	431f      	orrs	r7, r3
 80030a6:	08e5      	lsrs	r5, r4, #3
 80030a8:	2301      	movs	r3, #1
 80030aa:	e77f      	b.n	8002fac <__aeabi_dsub+0x4b0>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d100      	bne.n	80030b2 <__aeabi_dsub+0x5b6>
 80030b0:	e673      	b.n	8002d9a <__aeabi_dsub+0x29e>
 80030b2:	464b      	mov	r3, r9
 80030b4:	1b5f      	subs	r7, r3, r5
 80030b6:	003b      	movs	r3, r7
 80030b8:	2d00      	cmp	r5, #0
 80030ba:	d100      	bne.n	80030be <__aeabi_dsub+0x5c2>
 80030bc:	e742      	b.n	8002f44 <__aeabi_dsub+0x448>
 80030be:	2f38      	cmp	r7, #56	@ 0x38
 80030c0:	dd00      	ble.n	80030c4 <__aeabi_dsub+0x5c8>
 80030c2:	e0ec      	b.n	800329e <__aeabi_dsub+0x7a2>
 80030c4:	2380      	movs	r3, #128	@ 0x80
 80030c6:	000e      	movs	r6, r1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431c      	orrs	r4, r3
 80030cc:	2f1f      	cmp	r7, #31
 80030ce:	dc25      	bgt.n	800311c <__aeabi_dsub+0x620>
 80030d0:	2520      	movs	r5, #32
 80030d2:	0023      	movs	r3, r4
 80030d4:	1bed      	subs	r5, r5, r7
 80030d6:	0001      	movs	r1, r0
 80030d8:	40a8      	lsls	r0, r5
 80030da:	40ab      	lsls	r3, r5
 80030dc:	40f9      	lsrs	r1, r7
 80030de:	1e45      	subs	r5, r0, #1
 80030e0:	41a8      	sbcs	r0, r5
 80030e2:	430b      	orrs	r3, r1
 80030e4:	40fc      	lsrs	r4, r7
 80030e6:	4318      	orrs	r0, r3
 80030e8:	465b      	mov	r3, fp
 80030ea:	1b1b      	subs	r3, r3, r4
 80030ec:	469b      	mov	fp, r3
 80030ee:	e739      	b.n	8002f64 <__aeabi_dsub+0x468>
 80030f0:	4666      	mov	r6, ip
 80030f2:	2501      	movs	r5, #1
 80030f4:	e562      	b.n	8002bbc <__aeabi_dsub+0xc0>
 80030f6:	001f      	movs	r7, r3
 80030f8:	4659      	mov	r1, fp
 80030fa:	3f20      	subs	r7, #32
 80030fc:	40f9      	lsrs	r1, r7
 80030fe:	468c      	mov	ip, r1
 8003100:	2b20      	cmp	r3, #32
 8003102:	d005      	beq.n	8003110 <__aeabi_dsub+0x614>
 8003104:	2740      	movs	r7, #64	@ 0x40
 8003106:	4659      	mov	r1, fp
 8003108:	1afb      	subs	r3, r7, r3
 800310a:	4099      	lsls	r1, r3
 800310c:	430a      	orrs	r2, r1
 800310e:	4692      	mov	sl, r2
 8003110:	4657      	mov	r7, sl
 8003112:	1e7b      	subs	r3, r7, #1
 8003114:	419f      	sbcs	r7, r3
 8003116:	4663      	mov	r3, ip
 8003118:	431f      	orrs	r7, r3
 800311a:	e5c1      	b.n	8002ca0 <__aeabi_dsub+0x1a4>
 800311c:	003b      	movs	r3, r7
 800311e:	0025      	movs	r5, r4
 8003120:	3b20      	subs	r3, #32
 8003122:	40dd      	lsrs	r5, r3
 8003124:	2f20      	cmp	r7, #32
 8003126:	d004      	beq.n	8003132 <__aeabi_dsub+0x636>
 8003128:	2340      	movs	r3, #64	@ 0x40
 800312a:	1bdb      	subs	r3, r3, r7
 800312c:	409c      	lsls	r4, r3
 800312e:	4320      	orrs	r0, r4
 8003130:	4680      	mov	r8, r0
 8003132:	4640      	mov	r0, r8
 8003134:	1e43      	subs	r3, r0, #1
 8003136:	4198      	sbcs	r0, r3
 8003138:	4328      	orrs	r0, r5
 800313a:	e713      	b.n	8002f64 <__aeabi_dsub+0x468>
 800313c:	2900      	cmp	r1, #0
 800313e:	d09d      	beq.n	800307c <__aeabi_dsub+0x580>
 8003140:	2601      	movs	r6, #1
 8003142:	4663      	mov	r3, ip
 8003144:	465c      	mov	r4, fp
 8003146:	4690      	mov	r8, r2
 8003148:	401e      	ands	r6, r3
 800314a:	e6db      	b.n	8002f04 <__aeabi_dsub+0x408>
 800314c:	1a17      	subs	r7, r2, r0
 800314e:	465b      	mov	r3, fp
 8003150:	42ba      	cmp	r2, r7
 8003152:	4192      	sbcs	r2, r2
 8003154:	1b1c      	subs	r4, r3, r4
 8003156:	4252      	negs	r2, r2
 8003158:	1aa4      	subs	r4, r4, r2
 800315a:	0223      	lsls	r3, r4, #8
 800315c:	d4c8      	bmi.n	80030f0 <__aeabi_dsub+0x5f4>
 800315e:	0763      	lsls	r3, r4, #29
 8003160:	08ff      	lsrs	r7, r7, #3
 8003162:	431f      	orrs	r7, r3
 8003164:	4666      	mov	r6, ip
 8003166:	2301      	movs	r3, #1
 8003168:	08e5      	lsrs	r5, r4, #3
 800316a:	e71f      	b.n	8002fac <__aeabi_dsub+0x4b0>
 800316c:	001d      	movs	r5, r3
 800316e:	2400      	movs	r4, #0
 8003170:	2700      	movs	r7, #0
 8003172:	e657      	b.n	8002e24 <__aeabi_dsub+0x328>
 8003174:	465c      	mov	r4, fp
 8003176:	08d0      	lsrs	r0, r2, #3
 8003178:	e66a      	b.n	8002e50 <__aeabi_dsub+0x354>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d100      	bne.n	8003180 <__aeabi_dsub+0x684>
 800317e:	e737      	b.n	8002ff0 <__aeabi_dsub+0x4f4>
 8003180:	4653      	mov	r3, sl
 8003182:	08c0      	lsrs	r0, r0, #3
 8003184:	0767      	lsls	r7, r4, #29
 8003186:	4307      	orrs	r7, r0
 8003188:	08e5      	lsrs	r5, r4, #3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d100      	bne.n	8003190 <__aeabi_dsub+0x694>
 800318e:	e5b1      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	031b      	lsls	r3, r3, #12
 8003194:	421d      	tst	r5, r3
 8003196:	d008      	beq.n	80031aa <__aeabi_dsub+0x6ae>
 8003198:	4659      	mov	r1, fp
 800319a:	08c8      	lsrs	r0, r1, #3
 800319c:	4218      	tst	r0, r3
 800319e:	d104      	bne.n	80031aa <__aeabi_dsub+0x6ae>
 80031a0:	08d2      	lsrs	r2, r2, #3
 80031a2:	0749      	lsls	r1, r1, #29
 80031a4:	430a      	orrs	r2, r1
 80031a6:	0017      	movs	r7, r2
 80031a8:	0005      	movs	r5, r0
 80031aa:	0f7b      	lsrs	r3, r7, #29
 80031ac:	00ff      	lsls	r7, r7, #3
 80031ae:	08ff      	lsrs	r7, r7, #3
 80031b0:	075b      	lsls	r3, r3, #29
 80031b2:	431f      	orrs	r7, r3
 80031b4:	e59e      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 80031b6:	08c0      	lsrs	r0, r0, #3
 80031b8:	0763      	lsls	r3, r4, #29
 80031ba:	4318      	orrs	r0, r3
 80031bc:	08e5      	lsrs	r5, r4, #3
 80031be:	2900      	cmp	r1, #0
 80031c0:	d053      	beq.n	800326a <__aeabi_dsub+0x76e>
 80031c2:	2380      	movs	r3, #128	@ 0x80
 80031c4:	031b      	lsls	r3, r3, #12
 80031c6:	421d      	tst	r5, r3
 80031c8:	d00a      	beq.n	80031e0 <__aeabi_dsub+0x6e4>
 80031ca:	4659      	mov	r1, fp
 80031cc:	08cc      	lsrs	r4, r1, #3
 80031ce:	421c      	tst	r4, r3
 80031d0:	d106      	bne.n	80031e0 <__aeabi_dsub+0x6e4>
 80031d2:	2601      	movs	r6, #1
 80031d4:	4663      	mov	r3, ip
 80031d6:	0025      	movs	r5, r4
 80031d8:	08d0      	lsrs	r0, r2, #3
 80031da:	0749      	lsls	r1, r1, #29
 80031dc:	4308      	orrs	r0, r1
 80031de:	401e      	ands	r6, r3
 80031e0:	0f47      	lsrs	r7, r0, #29
 80031e2:	00c0      	lsls	r0, r0, #3
 80031e4:	08c0      	lsrs	r0, r0, #3
 80031e6:	077f      	lsls	r7, r7, #29
 80031e8:	4307      	orrs	r7, r0
 80031ea:	e583      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 80031ec:	1883      	adds	r3, r0, r2
 80031ee:	4293      	cmp	r3, r2
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	445c      	add	r4, fp
 80031f4:	4252      	negs	r2, r2
 80031f6:	18a5      	adds	r5, r4, r2
 80031f8:	022a      	lsls	r2, r5, #8
 80031fa:	d500      	bpl.n	80031fe <__aeabi_dsub+0x702>
 80031fc:	e724      	b.n	8003048 <__aeabi_dsub+0x54c>
 80031fe:	076f      	lsls	r7, r5, #29
 8003200:	08db      	lsrs	r3, r3, #3
 8003202:	431f      	orrs	r7, r3
 8003204:	08ed      	lsrs	r5, r5, #3
 8003206:	2301      	movs	r3, #1
 8003208:	e6d0      	b.n	8002fac <__aeabi_dsub+0x4b0>
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	000007ff 	.word	0x000007ff
 8003210:	000007fe 	.word	0x000007fe
 8003214:	ff7fffff 	.word	0xff7fffff
 8003218:	465b      	mov	r3, fp
 800321a:	08d2      	lsrs	r2, r2, #3
 800321c:	075f      	lsls	r7, r3, #29
 800321e:	4666      	mov	r6, ip
 8003220:	4317      	orrs	r7, r2
 8003222:	08dd      	lsrs	r5, r3, #3
 8003224:	e566      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 8003226:	0025      	movs	r5, r4
 8003228:	3b20      	subs	r3, #32
 800322a:	40dd      	lsrs	r5, r3
 800322c:	4663      	mov	r3, ip
 800322e:	2b20      	cmp	r3, #32
 8003230:	d005      	beq.n	800323e <__aeabi_dsub+0x742>
 8003232:	2340      	movs	r3, #64	@ 0x40
 8003234:	4661      	mov	r1, ip
 8003236:	1a5b      	subs	r3, r3, r1
 8003238:	409c      	lsls	r4, r3
 800323a:	4320      	orrs	r0, r4
 800323c:	4680      	mov	r8, r0
 800323e:	4647      	mov	r7, r8
 8003240:	1e7b      	subs	r3, r7, #1
 8003242:	419f      	sbcs	r7, r3
 8003244:	432f      	orrs	r7, r5
 8003246:	e5a0      	b.n	8002d8a <__aeabi_dsub+0x28e>
 8003248:	2120      	movs	r1, #32
 800324a:	2700      	movs	r7, #0
 800324c:	1a09      	subs	r1, r1, r0
 800324e:	e4d2      	b.n	8002bf6 <__aeabi_dsub+0xfa>
 8003250:	2f00      	cmp	r7, #0
 8003252:	d100      	bne.n	8003256 <__aeabi_dsub+0x75a>
 8003254:	e713      	b.n	800307e <__aeabi_dsub+0x582>
 8003256:	465c      	mov	r4, fp
 8003258:	0017      	movs	r7, r2
 800325a:	2500      	movs	r5, #0
 800325c:	e5f6      	b.n	8002e4c <__aeabi_dsub+0x350>
 800325e:	08d7      	lsrs	r7, r2, #3
 8003260:	0749      	lsls	r1, r1, #29
 8003262:	2302      	movs	r3, #2
 8003264:	430f      	orrs	r7, r1
 8003266:	092d      	lsrs	r5, r5, #4
 8003268:	e6a0      	b.n	8002fac <__aeabi_dsub+0x4b0>
 800326a:	0007      	movs	r7, r0
 800326c:	e542      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 800326e:	465b      	mov	r3, fp
 8003270:	2601      	movs	r6, #1
 8003272:	075f      	lsls	r7, r3, #29
 8003274:	08dd      	lsrs	r5, r3, #3
 8003276:	4663      	mov	r3, ip
 8003278:	08d2      	lsrs	r2, r2, #3
 800327a:	4317      	orrs	r7, r2
 800327c:	401e      	ands	r6, r3
 800327e:	e539      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 8003280:	465b      	mov	r3, fp
 8003282:	08d2      	lsrs	r2, r2, #3
 8003284:	075f      	lsls	r7, r3, #29
 8003286:	4317      	orrs	r7, r2
 8003288:	08dd      	lsrs	r5, r3, #3
 800328a:	e533      	b.n	8002cf4 <__aeabi_dsub+0x1f8>
 800328c:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <__aeabi_dsub+0x80c>)
 800328e:	08db      	lsrs	r3, r3, #3
 8003290:	4022      	ands	r2, r4
 8003292:	0757      	lsls	r7, r2, #29
 8003294:	0252      	lsls	r2, r2, #9
 8003296:	2501      	movs	r5, #1
 8003298:	431f      	orrs	r7, r3
 800329a:	0b14      	lsrs	r4, r2, #12
 800329c:	e5c2      	b.n	8002e24 <__aeabi_dsub+0x328>
 800329e:	000e      	movs	r6, r1
 80032a0:	2001      	movs	r0, #1
 80032a2:	e65f      	b.n	8002f64 <__aeabi_dsub+0x468>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <__aeabi_dsub+0x7c8>
 80032a8:	464b      	mov	r3, r9
 80032aa:	1b5b      	subs	r3, r3, r5
 80032ac:	469c      	mov	ip, r3
 80032ae:	2d00      	cmp	r5, #0
 80032b0:	d100      	bne.n	80032b4 <__aeabi_dsub+0x7b8>
 80032b2:	e548      	b.n	8002d46 <__aeabi_dsub+0x24a>
 80032b4:	2701      	movs	r7, #1
 80032b6:	2b38      	cmp	r3, #56	@ 0x38
 80032b8:	dd00      	ble.n	80032bc <__aeabi_dsub+0x7c0>
 80032ba:	e566      	b.n	8002d8a <__aeabi_dsub+0x28e>
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	431c      	orrs	r4, r3
 80032c2:	e550      	b.n	8002d66 <__aeabi_dsub+0x26a>
 80032c4:	1c6b      	adds	r3, r5, #1
 80032c6:	4d11      	ldr	r5, [pc, #68]	@ (800330c <__aeabi_dsub+0x810>)
 80032c8:	422b      	tst	r3, r5
 80032ca:	d000      	beq.n	80032ce <__aeabi_dsub+0x7d2>
 80032cc:	e673      	b.n	8002fb6 <__aeabi_dsub+0x4ba>
 80032ce:	4659      	mov	r1, fp
 80032d0:	0023      	movs	r3, r4
 80032d2:	4311      	orrs	r1, r2
 80032d4:	468a      	mov	sl, r1
 80032d6:	4303      	orrs	r3, r0
 80032d8:	e600      	b.n	8002edc <__aeabi_dsub+0x3e0>
 80032da:	0767      	lsls	r7, r4, #29
 80032dc:	08c0      	lsrs	r0, r0, #3
 80032de:	2300      	movs	r3, #0
 80032e0:	4307      	orrs	r7, r0
 80032e2:	08e5      	lsrs	r5, r4, #3
 80032e4:	e662      	b.n	8002fac <__aeabi_dsub+0x4b0>
 80032e6:	0764      	lsls	r4, r4, #29
 80032e8:	08ff      	lsrs	r7, r7, #3
 80032ea:	4327      	orrs	r7, r4
 80032ec:	0905      	lsrs	r5, r0, #4
 80032ee:	e65d      	b.n	8002fac <__aeabi_dsub+0x4b0>
 80032f0:	08d2      	lsrs	r2, r2, #3
 80032f2:	0749      	lsls	r1, r1, #29
 80032f4:	4311      	orrs	r1, r2
 80032f6:	000f      	movs	r7, r1
 80032f8:	2302      	movs	r3, #2
 80032fa:	092d      	lsrs	r5, r5, #4
 80032fc:	e656      	b.n	8002fac <__aeabi_dsub+0x4b0>
 80032fe:	0007      	movs	r7, r0
 8003300:	e5a4      	b.n	8002e4c <__aeabi_dsub+0x350>
 8003302:	0038      	movs	r0, r7
 8003304:	e48f      	b.n	8002c26 <__aeabi_dsub+0x12a>
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	ff7fffff 	.word	0xff7fffff
 800330c:	000007fe 	.word	0x000007fe

08003310 <__aeabi_dcmpun>:
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	46c6      	mov	lr, r8
 8003314:	031e      	lsls	r6, r3, #12
 8003316:	0b36      	lsrs	r6, r6, #12
 8003318:	46b0      	mov	r8, r6
 800331a:	4e0d      	ldr	r6, [pc, #52]	@ (8003350 <__aeabi_dcmpun+0x40>)
 800331c:	030c      	lsls	r4, r1, #12
 800331e:	004d      	lsls	r5, r1, #1
 8003320:	005f      	lsls	r7, r3, #1
 8003322:	b500      	push	{lr}
 8003324:	0b24      	lsrs	r4, r4, #12
 8003326:	0d6d      	lsrs	r5, r5, #21
 8003328:	0d7f      	lsrs	r7, r7, #21
 800332a:	42b5      	cmp	r5, r6
 800332c:	d00b      	beq.n	8003346 <__aeabi_dcmpun+0x36>
 800332e:	4908      	ldr	r1, [pc, #32]	@ (8003350 <__aeabi_dcmpun+0x40>)
 8003330:	2000      	movs	r0, #0
 8003332:	428f      	cmp	r7, r1
 8003334:	d104      	bne.n	8003340 <__aeabi_dcmpun+0x30>
 8003336:	4646      	mov	r6, r8
 8003338:	4316      	orrs	r6, r2
 800333a:	0030      	movs	r0, r6
 800333c:	1e43      	subs	r3, r0, #1
 800333e:	4198      	sbcs	r0, r3
 8003340:	bc80      	pop	{r7}
 8003342:	46b8      	mov	r8, r7
 8003344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003346:	4304      	orrs	r4, r0
 8003348:	2001      	movs	r0, #1
 800334a:	2c00      	cmp	r4, #0
 800334c:	d1f8      	bne.n	8003340 <__aeabi_dcmpun+0x30>
 800334e:	e7ee      	b.n	800332e <__aeabi_dcmpun+0x1e>
 8003350:	000007ff 	.word	0x000007ff

08003354 <__aeabi_d2iz>:
 8003354:	000b      	movs	r3, r1
 8003356:	0002      	movs	r2, r0
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4d16      	ldr	r5, [pc, #88]	@ (80033b4 <__aeabi_d2iz+0x60>)
 800335c:	030c      	lsls	r4, r1, #12
 800335e:	b082      	sub	sp, #8
 8003360:	0049      	lsls	r1, r1, #1
 8003362:	2000      	movs	r0, #0
 8003364:	9200      	str	r2, [sp, #0]
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	0b24      	lsrs	r4, r4, #12
 800336a:	0d49      	lsrs	r1, r1, #21
 800336c:	0fde      	lsrs	r6, r3, #31
 800336e:	42a9      	cmp	r1, r5
 8003370:	dd04      	ble.n	800337c <__aeabi_d2iz+0x28>
 8003372:	4811      	ldr	r0, [pc, #68]	@ (80033b8 <__aeabi_d2iz+0x64>)
 8003374:	4281      	cmp	r1, r0
 8003376:	dd03      	ble.n	8003380 <__aeabi_d2iz+0x2c>
 8003378:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <__aeabi_d2iz+0x68>)
 800337a:	18f0      	adds	r0, r6, r3
 800337c:	b002      	add	sp, #8
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	2080      	movs	r0, #128	@ 0x80
 8003382:	0340      	lsls	r0, r0, #13
 8003384:	4320      	orrs	r0, r4
 8003386:	4c0e      	ldr	r4, [pc, #56]	@ (80033c0 <__aeabi_d2iz+0x6c>)
 8003388:	1a64      	subs	r4, r4, r1
 800338a:	2c1f      	cmp	r4, #31
 800338c:	dd08      	ble.n	80033a0 <__aeabi_d2iz+0x4c>
 800338e:	4b0d      	ldr	r3, [pc, #52]	@ (80033c4 <__aeabi_d2iz+0x70>)
 8003390:	1a5b      	subs	r3, r3, r1
 8003392:	40d8      	lsrs	r0, r3
 8003394:	0003      	movs	r3, r0
 8003396:	4258      	negs	r0, r3
 8003398:	2e00      	cmp	r6, #0
 800339a:	d1ef      	bne.n	800337c <__aeabi_d2iz+0x28>
 800339c:	0018      	movs	r0, r3
 800339e:	e7ed      	b.n	800337c <__aeabi_d2iz+0x28>
 80033a0:	4b09      	ldr	r3, [pc, #36]	@ (80033c8 <__aeabi_d2iz+0x74>)
 80033a2:	9a00      	ldr	r2, [sp, #0]
 80033a4:	469c      	mov	ip, r3
 80033a6:	0003      	movs	r3, r0
 80033a8:	4461      	add	r1, ip
 80033aa:	408b      	lsls	r3, r1
 80033ac:	40e2      	lsrs	r2, r4
 80033ae:	4313      	orrs	r3, r2
 80033b0:	e7f1      	b.n	8003396 <__aeabi_d2iz+0x42>
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	000003fe 	.word	0x000003fe
 80033b8:	0000041d 	.word	0x0000041d
 80033bc:	7fffffff 	.word	0x7fffffff
 80033c0:	00000433 	.word	0x00000433
 80033c4:	00000413 	.word	0x00000413
 80033c8:	fffffbed 	.word	0xfffffbed

080033cc <__aeabi_i2d>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d016      	beq.n	8003400 <__aeabi_i2d+0x34>
 80033d2:	17c3      	asrs	r3, r0, #31
 80033d4:	18c5      	adds	r5, r0, r3
 80033d6:	405d      	eors	r5, r3
 80033d8:	0fc4      	lsrs	r4, r0, #31
 80033da:	0028      	movs	r0, r5
 80033dc:	f000 f890 	bl	8003500 <__clzsi2>
 80033e0:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <__aeabi_i2d+0x58>)
 80033e2:	1a1b      	subs	r3, r3, r0
 80033e4:	055b      	lsls	r3, r3, #21
 80033e6:	0d5b      	lsrs	r3, r3, #21
 80033e8:	280a      	cmp	r0, #10
 80033ea:	dc14      	bgt.n	8003416 <__aeabi_i2d+0x4a>
 80033ec:	0002      	movs	r2, r0
 80033ee:	002e      	movs	r6, r5
 80033f0:	3215      	adds	r2, #21
 80033f2:	4096      	lsls	r6, r2
 80033f4:	220b      	movs	r2, #11
 80033f6:	1a12      	subs	r2, r2, r0
 80033f8:	40d5      	lsrs	r5, r2
 80033fa:	032d      	lsls	r5, r5, #12
 80033fc:	0b2d      	lsrs	r5, r5, #12
 80033fe:	e003      	b.n	8003408 <__aeabi_i2d+0x3c>
 8003400:	2400      	movs	r4, #0
 8003402:	2300      	movs	r3, #0
 8003404:	2500      	movs	r5, #0
 8003406:	2600      	movs	r6, #0
 8003408:	051b      	lsls	r3, r3, #20
 800340a:	432b      	orrs	r3, r5
 800340c:	07e4      	lsls	r4, r4, #31
 800340e:	4323      	orrs	r3, r4
 8003410:	0030      	movs	r0, r6
 8003412:	0019      	movs	r1, r3
 8003414:	bd70      	pop	{r4, r5, r6, pc}
 8003416:	380b      	subs	r0, #11
 8003418:	4085      	lsls	r5, r0
 800341a:	032d      	lsls	r5, r5, #12
 800341c:	2600      	movs	r6, #0
 800341e:	0b2d      	lsrs	r5, r5, #12
 8003420:	e7f2      	b.n	8003408 <__aeabi_i2d+0x3c>
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	0000041e 	.word	0x0000041e

08003428 <__aeabi_ui2d>:
 8003428:	b510      	push	{r4, lr}
 800342a:	1e04      	subs	r4, r0, #0
 800342c:	d010      	beq.n	8003450 <__aeabi_ui2d+0x28>
 800342e:	f000 f867 	bl	8003500 <__clzsi2>
 8003432:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <__aeabi_ui2d+0x44>)
 8003434:	1a1b      	subs	r3, r3, r0
 8003436:	055b      	lsls	r3, r3, #21
 8003438:	0d5b      	lsrs	r3, r3, #21
 800343a:	280a      	cmp	r0, #10
 800343c:	dc0f      	bgt.n	800345e <__aeabi_ui2d+0x36>
 800343e:	220b      	movs	r2, #11
 8003440:	0021      	movs	r1, r4
 8003442:	1a12      	subs	r2, r2, r0
 8003444:	40d1      	lsrs	r1, r2
 8003446:	3015      	adds	r0, #21
 8003448:	030a      	lsls	r2, r1, #12
 800344a:	4084      	lsls	r4, r0
 800344c:	0b12      	lsrs	r2, r2, #12
 800344e:	e001      	b.n	8003454 <__aeabi_ui2d+0x2c>
 8003450:	2300      	movs	r3, #0
 8003452:	2200      	movs	r2, #0
 8003454:	051b      	lsls	r3, r3, #20
 8003456:	4313      	orrs	r3, r2
 8003458:	0020      	movs	r0, r4
 800345a:	0019      	movs	r1, r3
 800345c:	bd10      	pop	{r4, pc}
 800345e:	0022      	movs	r2, r4
 8003460:	380b      	subs	r0, #11
 8003462:	4082      	lsls	r2, r0
 8003464:	0312      	lsls	r2, r2, #12
 8003466:	2400      	movs	r4, #0
 8003468:	0b12      	lsrs	r2, r2, #12
 800346a:	e7f3      	b.n	8003454 <__aeabi_ui2d+0x2c>
 800346c:	0000041e 	.word	0x0000041e

08003470 <__aeabi_f2d>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	0242      	lsls	r2, r0, #9
 8003474:	0043      	lsls	r3, r0, #1
 8003476:	0fc4      	lsrs	r4, r0, #31
 8003478:	20fe      	movs	r0, #254	@ 0xfe
 800347a:	0e1b      	lsrs	r3, r3, #24
 800347c:	1c59      	adds	r1, r3, #1
 800347e:	0a55      	lsrs	r5, r2, #9
 8003480:	4208      	tst	r0, r1
 8003482:	d00c      	beq.n	800349e <__aeabi_f2d+0x2e>
 8003484:	21e0      	movs	r1, #224	@ 0xe0
 8003486:	0089      	lsls	r1, r1, #2
 8003488:	468c      	mov	ip, r1
 800348a:	076d      	lsls	r5, r5, #29
 800348c:	0b12      	lsrs	r2, r2, #12
 800348e:	4463      	add	r3, ip
 8003490:	051b      	lsls	r3, r3, #20
 8003492:	4313      	orrs	r3, r2
 8003494:	07e4      	lsls	r4, r4, #31
 8003496:	4323      	orrs	r3, r4
 8003498:	0028      	movs	r0, r5
 800349a:	0019      	movs	r1, r3
 800349c:	bd70      	pop	{r4, r5, r6, pc}
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d114      	bne.n	80034cc <__aeabi_f2d+0x5c>
 80034a2:	2d00      	cmp	r5, #0
 80034a4:	d01b      	beq.n	80034de <__aeabi_f2d+0x6e>
 80034a6:	0028      	movs	r0, r5
 80034a8:	f000 f82a 	bl	8003500 <__clzsi2>
 80034ac:	280a      	cmp	r0, #10
 80034ae:	dc1c      	bgt.n	80034ea <__aeabi_f2d+0x7a>
 80034b0:	230b      	movs	r3, #11
 80034b2:	002a      	movs	r2, r5
 80034b4:	1a1b      	subs	r3, r3, r0
 80034b6:	40da      	lsrs	r2, r3
 80034b8:	0003      	movs	r3, r0
 80034ba:	3315      	adds	r3, #21
 80034bc:	409d      	lsls	r5, r3
 80034be:	4b0e      	ldr	r3, [pc, #56]	@ (80034f8 <__aeabi_f2d+0x88>)
 80034c0:	0312      	lsls	r2, r2, #12
 80034c2:	1a1b      	subs	r3, r3, r0
 80034c4:	055b      	lsls	r3, r3, #21
 80034c6:	0b12      	lsrs	r2, r2, #12
 80034c8:	0d5b      	lsrs	r3, r3, #21
 80034ca:	e7e1      	b.n	8003490 <__aeabi_f2d+0x20>
 80034cc:	2d00      	cmp	r5, #0
 80034ce:	d009      	beq.n	80034e4 <__aeabi_f2d+0x74>
 80034d0:	0b13      	lsrs	r3, r2, #12
 80034d2:	2280      	movs	r2, #128	@ 0x80
 80034d4:	0312      	lsls	r2, r2, #12
 80034d6:	431a      	orrs	r2, r3
 80034d8:	076d      	lsls	r5, r5, #29
 80034da:	4b08      	ldr	r3, [pc, #32]	@ (80034fc <__aeabi_f2d+0x8c>)
 80034dc:	e7d8      	b.n	8003490 <__aeabi_f2d+0x20>
 80034de:	2300      	movs	r3, #0
 80034e0:	2200      	movs	r2, #0
 80034e2:	e7d5      	b.n	8003490 <__aeabi_f2d+0x20>
 80034e4:	2200      	movs	r2, #0
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <__aeabi_f2d+0x8c>)
 80034e8:	e7d2      	b.n	8003490 <__aeabi_f2d+0x20>
 80034ea:	0003      	movs	r3, r0
 80034ec:	002a      	movs	r2, r5
 80034ee:	3b0b      	subs	r3, #11
 80034f0:	409a      	lsls	r2, r3
 80034f2:	2500      	movs	r5, #0
 80034f4:	e7e3      	b.n	80034be <__aeabi_f2d+0x4e>
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	00000389 	.word	0x00000389
 80034fc:	000007ff 	.word	0x000007ff

08003500 <__clzsi2>:
 8003500:	211c      	movs	r1, #28
 8003502:	2301      	movs	r3, #1
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	4298      	cmp	r0, r3
 8003508:	d301      	bcc.n	800350e <__clzsi2+0xe>
 800350a:	0c00      	lsrs	r0, r0, #16
 800350c:	3910      	subs	r1, #16
 800350e:	0a1b      	lsrs	r3, r3, #8
 8003510:	4298      	cmp	r0, r3
 8003512:	d301      	bcc.n	8003518 <__clzsi2+0x18>
 8003514:	0a00      	lsrs	r0, r0, #8
 8003516:	3908      	subs	r1, #8
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	4298      	cmp	r0, r3
 800351c:	d301      	bcc.n	8003522 <__clzsi2+0x22>
 800351e:	0900      	lsrs	r0, r0, #4
 8003520:	3904      	subs	r1, #4
 8003522:	a202      	add	r2, pc, #8	@ (adr r2, 800352c <__clzsi2+0x2c>)
 8003524:	5c10      	ldrb	r0, [r2, r0]
 8003526:	1840      	adds	r0, r0, r1
 8003528:	4770      	bx	lr
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	02020304 	.word	0x02020304
 8003530:	01010101 	.word	0x01010101
	...

0800353c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b087      	sub	sp, #28
 8003540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003542:	f000 fff3 	bl	800452c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003546:	f000 f92f 	bl	80037a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800354a:	f000 f9ef 	bl	800392c <MX_GPIO_Init>
  MX_TIM16_Init();
 800354e:	f000 f9c7 	bl	80038e0 <MX_TIM16_Init>
  MX_SPI2_Init();
 8003552:	f000 f987 	bl	8003864 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16); // 启动TIM16的更新中断
 8003556:	4b7f      	ldr	r3, [pc, #508]	@ (8003754 <main+0x218>)
 8003558:	0018      	movs	r0, r3
 800355a:	f002 fc01 	bl	8005d60 <HAL_TIM_Base_Start_IT>
  u8g2_Init(&u8g2); // 初始化u8g2
 800355e:	4b7e      	ldr	r3, [pc, #504]	@ (8003758 <main+0x21c>)
 8003560:	0018      	movs	r0, r3
 8003562:	f000 ff9b 	bl	800449c <u8g2_Init>

  // 生成模拟心率波形 (类似正弦波)
for(int i=0; i<WAVEFORM_LENGTH; i++) {
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e038      	b.n	80035de <main+0xa2>
    mock_heart_rate_data[i] = 32 + 20 * sin(i * 3.14159 * 4 / WAVEFORM_LENGTH);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff ff2d 	bl	80033cc <__aeabi_i2d>
 8003572:	4a7a      	ldr	r2, [pc, #488]	@ (800375c <main+0x220>)
 8003574:	4b7a      	ldr	r3, [pc, #488]	@ (8003760 <main+0x224>)
 8003576:	f7fe ffdb 	bl	8002530 <__aeabi_dmul>
 800357a:	0002      	movs	r2, r0
 800357c:	000b      	movs	r3, r1
 800357e:	0010      	movs	r0, r2
 8003580:	0019      	movs	r1, r3
 8003582:	2200      	movs	r2, #0
 8003584:	4b77      	ldr	r3, [pc, #476]	@ (8003764 <main+0x228>)
 8003586:	f7fe ffd3 	bl	8002530 <__aeabi_dmul>
 800358a:	0002      	movs	r2, r0
 800358c:	000b      	movs	r3, r1
 800358e:	0010      	movs	r0, r2
 8003590:	0019      	movs	r1, r3
 8003592:	2200      	movs	r2, #0
 8003594:	4b74      	ldr	r3, [pc, #464]	@ (8003768 <main+0x22c>)
 8003596:	f7fe fb91 	bl	8001cbc <__aeabi_ddiv>
 800359a:	0002      	movs	r2, r0
 800359c:	000b      	movs	r3, r1
 800359e:	0010      	movs	r0, r2
 80035a0:	0019      	movs	r1, r3
 80035a2:	f007 ff79 	bl	800b498 <sin>
 80035a6:	2200      	movs	r2, #0
 80035a8:	4b70      	ldr	r3, [pc, #448]	@ (800376c <main+0x230>)
 80035aa:	f7fe ffc1 	bl	8002530 <__aeabi_dmul>
 80035ae:	0002      	movs	r2, r0
 80035b0:	000b      	movs	r3, r1
 80035b2:	0010      	movs	r0, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	2200      	movs	r2, #0
 80035b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003770 <main+0x234>)
 80035ba:	f7fd ffb9 	bl	8001530 <__aeabi_dadd>
 80035be:	0002      	movs	r2, r0
 80035c0:	000b      	movs	r3, r1
 80035c2:	0010      	movs	r0, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	f7fc ffa7 	bl	8000518 <__aeabi_d2uiz>
 80035ca:	0003      	movs	r3, r0
 80035cc:	b2d9      	uxtb	r1, r3
 80035ce:	4a69      	ldr	r2, [pc, #420]	@ (8003774 <main+0x238>)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	18d3      	adds	r3, r2, r3
 80035d4:	1c0a      	adds	r2, r1, #0
 80035d6:	701a      	strb	r2, [r3, #0]
for(int i=0; i<WAVEFORM_LENGTH; i++) {
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80035e2:	ddc3      	ble.n	800356c <main+0x30>
}
// 生成模拟温度曲线 (缓慢上升)
for(int i=0; i<WAVEFORM_LENGTH; i++) {
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	e00f      	b.n	800360a <main+0xce>
    mock_temp_data[i] = 20 + (i / 8);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da00      	bge.n	80035f2 <main+0xb6>
 80035f0:	3307      	adds	r3, #7
 80035f2:	10db      	asrs	r3, r3, #3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	3314      	adds	r3, #20
 80035f8:	b2d9      	uxtb	r1, r3
 80035fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003778 <main+0x23c>)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	18d3      	adds	r3, r2, r3
 8003600:	1c0a      	adds	r2, r1, #0
 8003602:	701a      	strb	r2, [r3, #0]
for(int i=0; i<WAVEFORM_LENGTH; i++) {
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3301      	adds	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b7f      	cmp	r3, #127	@ 0x7f
 800360e:	ddec      	ble.n	80035ea <main+0xae>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
  // --- 处理输入 ---
  if (button_pressed) {
 8003610:	4b5a      	ldr	r3, [pc, #360]	@ (800377c <main+0x240>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d039      	beq.n	800368e <main+0x152>
      // 等待一小段时间，看看按键是否被释放
      HAL_Delay(20); // 简单的延时防抖
 800361a:	2014      	movs	r0, #20
 800361c:	f001 f80c 	bl	8004638 <HAL_Delay>

      // 如果按键仍然被按着 (低电平)
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8003620:	4b57      	ldr	r3, [pc, #348]	@ (8003780 <main+0x244>)
 8003622:	2108      	movs	r1, #8
 8003624:	0018      	movs	r0, r3
 8003626:	f001 fa6d 	bl	8004b04 <HAL_GPIO_ReadPin>
 800362a:	1e03      	subs	r3, r0, #0
 800362c:	d121      	bne.n	8003672 <main+0x136>
          // 检查按下时间是否超过长按阈值 (例如 800ms)
          if (HAL_GetTick() - button_press_time > 800) {
 800362e:	f000 fff9 	bl	8004624 <HAL_GetTick>
 8003632:	0002      	movs	r2, r0
 8003634:	4b53      	ldr	r3, [pc, #332]	@ (8003784 <main+0x248>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	1ad2      	subs	r2, r2, r3
 800363a:	23c8      	movs	r3, #200	@ 0xc8
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	429a      	cmp	r2, r3
 8003640:	d925      	bls.n	800368e <main+0x152>
              // --- 长按事件 ---
              if (control_mode == MODE_ZOOM) {
 8003642:	4b51      	ldr	r3, [pc, #324]	@ (8003788 <main+0x24c>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <main+0x118>
                  control_mode = MODE_PAN;
 800364c:	4b4e      	ldr	r3, [pc, #312]	@ (8003788 <main+0x24c>)
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e002      	b.n	800365a <main+0x11e>
              } else {
                  control_mode = MODE_ZOOM;
 8003654:	4b4c      	ldr	r3, [pc, #304]	@ (8003788 <main+0x24c>)
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
              }
              // 等待按键释放
              while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET);
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	4b48      	ldr	r3, [pc, #288]	@ (8003780 <main+0x244>)
 800365e:	2108      	movs	r1, #8
 8003660:	0018      	movs	r0, r3
 8003662:	f001 fa4f 	bl	8004b04 <HAL_GPIO_ReadPin>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d0f8      	beq.n	800365c <main+0x120>
              button_pressed = 0; // 处理完毕，清除标志
 800366a:	4b44      	ldr	r3, [pc, #272]	@ (800377c <main+0x240>)
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e00d      	b.n	800368e <main+0x152>
          }
      } else { // 如果按键已经被释放，说明是短按
          // --- 短按事件 ---
          if (current_mode == DISPLAY_HEART_RATE) {
 8003672:	4b46      	ldr	r3, [pc, #280]	@ (800378c <main+0x250>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <main+0x146>
              current_mode = DISPLAY_TEMPERATURE;
 800367a:	4b44      	ldr	r3, [pc, #272]	@ (800378c <main+0x250>)
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e002      	b.n	8003688 <main+0x14c>
          } else {
              current_mode = DISPLAY_HEART_RATE;
 8003682:	4b42      	ldr	r3, [pc, #264]	@ (800378c <main+0x250>)
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
          }
          button_pressed = 0; // 处理完毕，清除标志
 8003688:	4b3c      	ldr	r3, [pc, #240]	@ (800377c <main+0x240>)
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
      }
  }

  // --- 处理编码器 ---
  static int32_t last_encoder_counter = 0;
  if (encoder_counter != last_encoder_counter) {
 800368e:	4b40      	ldr	r3, [pc, #256]	@ (8003790 <main+0x254>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <main+0x258>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d03c      	beq.n	8003714 <main+0x1d8>
      int32_t delta = encoder_counter - last_encoder_counter;
 800369a:	4b3d      	ldr	r3, [pc, #244]	@ (8003790 <main+0x254>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b3d      	ldr	r3, [pc, #244]	@ (8003794 <main+0x258>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	607b      	str	r3, [r7, #4]

      if (control_mode == MODE_ZOOM) {
 80036a6:	4b38      	ldr	r3, [pc, #224]	@ (8003788 <main+0x24c>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d114      	bne.n	80036da <main+0x19e>
          // --- 缩放模式 ---
          zoom_level += delta;
 80036b0:	4b39      	ldr	r3, [pc, #228]	@ (8003798 <main+0x25c>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	18d2      	adds	r2, r2, r3
 80036b8:	4b37      	ldr	r3, [pc, #220]	@ (8003798 <main+0x25c>)
 80036ba:	601a      	str	r2, [r3, #0]
          if (zoom_level < 1) zoom_level = 1;
 80036bc:	4b36      	ldr	r3, [pc, #216]	@ (8003798 <main+0x25c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	dc02      	bgt.n	80036ca <main+0x18e>
 80036c4:	4b34      	ldr	r3, [pc, #208]	@ (8003798 <main+0x25c>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
          if (zoom_level > 8) zoom_level = 8; // 增加最大缩放
 80036ca:	4b33      	ldr	r3, [pc, #204]	@ (8003798 <main+0x25c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	dd1c      	ble.n	800370c <main+0x1d0>
 80036d2:	4b31      	ldr	r3, [pc, #196]	@ (8003798 <main+0x25c>)
 80036d4:	2208      	movs	r2, #8
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e018      	b.n	800370c <main+0x1d0>
        } else {
          // --- 平移模式 ---
          data_offset -= delta * 5; // 乘以一个系数让平移更快
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	0013      	movs	r3, r2
 80036de:	079b      	lsls	r3, r3, #30
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	1a9a      	subs	r2, r3, r2
 80036e6:	4b2d      	ldr	r3, [pc, #180]	@ (800379c <main+0x260>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	18d2      	adds	r2, r2, r3
 80036ec:	4b2b      	ldr	r3, [pc, #172]	@ (800379c <main+0x260>)
 80036ee:	601a      	str	r2, [r3, #0]
          // *** 关键：更新边界检查 ***
          if (data_offset < 0) data_offset = 0;
 80036f0:	4b2a      	ldr	r3, [pc, #168]	@ (800379c <main+0x260>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da02      	bge.n	80036fe <main+0x1c2>
 80036f8:	4b28      	ldr	r3, [pc, #160]	@ (800379c <main+0x260>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
          // 缓冲区总长 WAVEFORM_LENGTH，屏幕上显示 GRAPH_WIDTH 个点
          if (data_offset > (WAVEFORM_LENGTH - GRAPH_WIDTH)) data_offset = (WAVEFORM_LENGTH - GRAPH_WIDTH);
 80036fe:	4b27      	ldr	r3, [pc, #156]	@ (800379c <main+0x260>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b12      	cmp	r3, #18
 8003704:	dd02      	ble.n	800370c <main+0x1d0>
 8003706:	4b25      	ldr	r3, [pc, #148]	@ (800379c <main+0x260>)
 8003708:	2212      	movs	r2, #18
 800370a:	601a      	str	r2, [r3, #0]
      }
      last_encoder_counter = encoder_counter;
 800370c:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <main+0x254>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b20      	ldr	r3, [pc, #128]	@ (8003794 <main+0x258>)
 8003712:	601a      	str	r2, [r3, #0]
  }


  // --- 根据状态更新显示 ---
  if (current_mode == DISPLAY_HEART_RATE) {
 8003714:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <main+0x250>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <main+0x1f8>
      draw_waveform(&u8g2, mock_heart_rate_data, "Heart Rate", zoom_level, current_mode);
 800371c:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <main+0x25c>)
 800371e:	681c      	ldr	r4, [r3, #0]
 8003720:	4b1a      	ldr	r3, [pc, #104]	@ (800378c <main+0x250>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4a1e      	ldr	r2, [pc, #120]	@ (80037a0 <main+0x264>)
 8003726:	4913      	ldr	r1, [pc, #76]	@ (8003774 <main+0x238>)
 8003728:	480b      	ldr	r0, [pc, #44]	@ (8003758 <main+0x21c>)
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	0023      	movs	r3, r4
 800372e:	f000 f985 	bl	8003a3c <draw_waveform>
 8003732:	e00a      	b.n	800374a <main+0x20e>
  } else {
      draw_waveform(&u8g2, mock_temp_data, "Temperature", zoom_level, current_mode);
 8003734:	4b18      	ldr	r3, [pc, #96]	@ (8003798 <main+0x25c>)
 8003736:	681c      	ldr	r4, [r3, #0]
 8003738:	4b14      	ldr	r3, [pc, #80]	@ (800378c <main+0x250>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	@ (80037a4 <main+0x268>)
 800373e:	490e      	ldr	r1, [pc, #56]	@ (8003778 <main+0x23c>)
 8003740:	4805      	ldr	r0, [pc, #20]	@ (8003758 <main+0x21c>)
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	0023      	movs	r3, r4
 8003746:	f000 f979 	bl	8003a3c <draw_waveform>
  }

  HAL_Delay(50); // 主循环不需要太快，给其他任务留出时间
 800374a:	2032      	movs	r0, #50	@ 0x32
 800374c:	f000 ff74 	bl	8004638 <HAL_Delay>
  {
 8003750:	e75e      	b.n	8003610 <main+0xd4>
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	20000258 	.word	0x20000258
 8003758:	200003c8 	.word	0x200003c8
 800375c:	f01b866e 	.word	0xf01b866e
 8003760:	400921f9 	.word	0x400921f9
 8003764:	40100000 	.word	0x40100000
 8003768:	40600000 	.word	0x40600000
 800376c:	40340000 	.word	0x40340000
 8003770:	40400000 	.word	0x40400000
 8003774:	200002b8 	.word	0x200002b8
 8003778:	20000338 	.word	0x20000338
 800377c:	200002a8 	.word	0x200002a8
 8003780:	50000400 	.word	0x50000400
 8003784:	200002b0 	.word	0x200002b0
 8003788:	200002b5 	.word	0x200002b5
 800378c:	200002b4 	.word	0x200002b4
 8003790:	200002a4 	.word	0x200002a4
 8003794:	200003b8 	.word	0x200003b8
 8003798:	20000000 	.word	0x20000000
 800379c:	200002ac 	.word	0x200002ac
 80037a0:	0800c448 	.word	0x0800c448
 80037a4:	0800c454 	.word	0x0800c454

080037a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b093      	sub	sp, #76	@ 0x4c
 80037ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ae:	2410      	movs	r4, #16
 80037b0:	193b      	adds	r3, r7, r4
 80037b2:	0018      	movs	r0, r3
 80037b4:	2338      	movs	r3, #56	@ 0x38
 80037b6:	001a      	movs	r2, r3
 80037b8:	2100      	movs	r1, #0
 80037ba:	f005 fd0f 	bl	80091dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037be:	003b      	movs	r3, r7
 80037c0:	0018      	movs	r0, r3
 80037c2:	2310      	movs	r3, #16
 80037c4:	001a      	movs	r2, r3
 80037c6:	2100      	movs	r1, #0
 80037c8:	f005 fd08 	bl	80091dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037cc:	2380      	movs	r3, #128	@ 0x80
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f001 f9fb 	bl	8004bcc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037d6:	193b      	adds	r3, r7, r4
 80037d8:	2202      	movs	r2, #2
 80037da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037dc:	193b      	adds	r3, r7, r4
 80037de:	2280      	movs	r2, #128	@ 0x80
 80037e0:	0052      	lsls	r2, r2, #1
 80037e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80037e4:	0021      	movs	r1, r4
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	2200      	movs	r2, #0
 80037ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	2202      	movs	r2, #2
 80037f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	2202      	movs	r2, #2
 80037fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80037fe:	187b      	adds	r3, r7, r1
 8003800:	2200      	movs	r2, #0
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003804:	187b      	adds	r3, r7, r1
 8003806:	2208      	movs	r2, #8
 8003808:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800380a:	187b      	adds	r3, r7, r1
 800380c:	2280      	movs	r2, #128	@ 0x80
 800380e:	0292      	lsls	r2, r2, #10
 8003810:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003812:	187b      	adds	r3, r7, r1
 8003814:	2280      	movs	r2, #128	@ 0x80
 8003816:	0492      	lsls	r2, r2, #18
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800381a:	187b      	adds	r3, r7, r1
 800381c:	2280      	movs	r2, #128	@ 0x80
 800381e:	0592      	lsls	r2, r2, #22
 8003820:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003822:	187b      	adds	r3, r7, r1
 8003824:	0018      	movs	r0, r3
 8003826:	f001 fa11 	bl	8004c4c <HAL_RCC_OscConfig>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d001      	beq.n	8003832 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800382e:	f000 fbc7 	bl	8003fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003832:	003b      	movs	r3, r7
 8003834:	2207      	movs	r2, #7
 8003836:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003838:	003b      	movs	r3, r7
 800383a:	2202      	movs	r2, #2
 800383c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800383e:	003b      	movs	r3, r7
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003844:	003b      	movs	r3, r7
 8003846:	2200      	movs	r2, #0
 8003848:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800384a:	003b      	movs	r3, r7
 800384c:	2102      	movs	r1, #2
 800384e:	0018      	movs	r0, r3
 8003850:	f001 fd16 	bl	8005280 <HAL_RCC_ClockConfig>
 8003854:	1e03      	subs	r3, r0, #0
 8003856:	d001      	beq.n	800385c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003858:	f000 fbb2 	bl	8003fc0 <Error_Handler>
  }
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b013      	add	sp, #76	@ 0x4c
 8003862:	bd90      	pop	{r4, r7, pc}

08003864 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003868:	4b1b      	ldr	r3, [pc, #108]	@ (80038d8 <MX_SPI2_Init+0x74>)
 800386a:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <MX_SPI2_Init+0x78>)
 800386c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800386e:	4b1a      	ldr	r3, [pc, #104]	@ (80038d8 <MX_SPI2_Init+0x74>)
 8003870:	2282      	movs	r2, #130	@ 0x82
 8003872:	0052      	lsls	r2, r2, #1
 8003874:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003876:	4b18      	ldr	r3, [pc, #96]	@ (80038d8 <MX_SPI2_Init+0x74>)
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800387c:	4b16      	ldr	r3, [pc, #88]	@ (80038d8 <MX_SPI2_Init+0x74>)
 800387e:	22e0      	movs	r2, #224	@ 0xe0
 8003880:	00d2      	lsls	r2, r2, #3
 8003882:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003884:	4b14      	ldr	r3, [pc, #80]	@ (80038d8 <MX_SPI2_Init+0x74>)
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800388a:	4b13      	ldr	r3, [pc, #76]	@ (80038d8 <MX_SPI2_Init+0x74>)
 800388c:	2200      	movs	r2, #0
 800388e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003890:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <MX_SPI2_Init+0x74>)
 8003892:	2280      	movs	r2, #128	@ 0x80
 8003894:	0092      	lsls	r2, r2, #2
 8003896:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003898:	4b0f      	ldr	r3, [pc, #60]	@ (80038d8 <MX_SPI2_Init+0x74>)
 800389a:	2210      	movs	r2, #16
 800389c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800389e:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038a4:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038b2:	2207      	movs	r2, #7
 80038b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038b6:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038bc:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038be:	2208      	movs	r2, #8
 80038c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038c2:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038c4:	0018      	movs	r0, r3
 80038c6:	f001 fe65 	bl	8005594 <HAL_SPI_Init>
 80038ca:	1e03      	subs	r3, r0, #0
 80038cc:	d001      	beq.n	80038d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80038ce:	f000 fb77 	bl	8003fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	200001f4 	.word	0x200001f4
 80038dc:	40003800 	.word	0x40003800

080038e0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80038e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <MX_TIM16_Init+0x44>)
 80038e6:	4a10      	ldr	r2, [pc, #64]	@ (8003928 <MX_TIM16_Init+0x48>)
 80038e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 80038ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003924 <MX_TIM16_Init+0x44>)
 80038ec:	223f      	movs	r2, #63	@ 0x3f
 80038ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <MX_TIM16_Init+0x44>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 80038f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <MX_TIM16_Init+0x44>)
 80038f8:	2209      	movs	r2, #9
 80038fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038fc:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <MX_TIM16_Init+0x44>)
 80038fe:	2200      	movs	r2, #0
 8003900:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003902:	4b08      	ldr	r3, [pc, #32]	@ (8003924 <MX_TIM16_Init+0x44>)
 8003904:	2200      	movs	r2, #0
 8003906:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003908:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <MX_TIM16_Init+0x44>)
 800390a:	2200      	movs	r2, #0
 800390c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800390e:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <MX_TIM16_Init+0x44>)
 8003910:	0018      	movs	r0, r3
 8003912:	f002 f9cd 	bl	8005cb0 <HAL_TIM_Base_Init>
 8003916:	1e03      	subs	r3, r0, #0
 8003918:	d001      	beq.n	800391e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800391a:	f000 fb51 	bl	8003fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000258 	.word	0x20000258
 8003928:	40014400 	.word	0x40014400

0800392c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b089      	sub	sp, #36	@ 0x24
 8003930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003932:	240c      	movs	r4, #12
 8003934:	193b      	adds	r3, r7, r4
 8003936:	0018      	movs	r0, r3
 8003938:	2314      	movs	r3, #20
 800393a:	001a      	movs	r2, r3
 800393c:	2100      	movs	r1, #0
 800393e:	f005 fc4d 	bl	80091dc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003942:	4b3c      	ldr	r3, [pc, #240]	@ (8003a34 <MX_GPIO_Init+0x108>)
 8003944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003946:	4b3b      	ldr	r3, [pc, #236]	@ (8003a34 <MX_GPIO_Init+0x108>)
 8003948:	2101      	movs	r1, #1
 800394a:	430a      	orrs	r2, r1
 800394c:	635a      	str	r2, [r3, #52]	@ 0x34
 800394e:	4b39      	ldr	r3, [pc, #228]	@ (8003a34 <MX_GPIO_Init+0x108>)
 8003950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003952:	2201      	movs	r2, #1
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800395a:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <MX_GPIO_Init+0x108>)
 800395c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800395e:	4b35      	ldr	r3, [pc, #212]	@ (8003a34 <MX_GPIO_Init+0x108>)
 8003960:	2102      	movs	r1, #2
 8003962:	430a      	orrs	r2, r1
 8003964:	635a      	str	r2, [r3, #52]	@ 0x34
 8003966:	4b33      	ldr	r3, [pc, #204]	@ (8003a34 <MX_GPIO_Init+0x108>)
 8003968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800396a:	2202      	movs	r2, #2
 800396c:	4013      	ands	r3, r2
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_DC_Pin|OLED_RES_Pin, GPIO_PIN_RESET);
 8003972:	4b31      	ldr	r3, [pc, #196]	@ (8003a38 <MX_GPIO_Init+0x10c>)
 8003974:	2200      	movs	r2, #0
 8003976:	2160      	movs	r1, #96	@ 0x60
 8003978:	0018      	movs	r0, r3
 800397a:	f001 f8e0 	bl	8004b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800397e:	193b      	adds	r3, r7, r4
 8003980:	2280      	movs	r2, #128	@ 0x80
 8003982:	0212      	lsls	r2, r2, #8
 8003984:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003986:	193b      	adds	r3, r7, r4
 8003988:	2284      	movs	r2, #132	@ 0x84
 800398a:	0392      	lsls	r2, r2, #14
 800398c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	193b      	adds	r3, r7, r4
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003994:	193a      	adds	r2, r7, r4
 8003996:	23a0      	movs	r3, #160	@ 0xa0
 8003998:	05db      	lsls	r3, r3, #23
 800399a:	0011      	movs	r1, r2
 800399c:	0018      	movs	r0, r3
 800399e:	f000 ff4d 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039a2:	0021      	movs	r1, r4
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	2208      	movs	r2, #8
 80039a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	2284      	movs	r2, #132	@ 0x84
 80039ae:	0392      	lsls	r2, r2, #14
 80039b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	000c      	movs	r4, r1
 80039b4:	193b      	adds	r3, r7, r4
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ba:	193b      	adds	r3, r7, r4
 80039bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a38 <MX_GPIO_Init+0x10c>)
 80039be:	0019      	movs	r1, r3
 80039c0:	0010      	movs	r0, r2
 80039c2:	f000 ff3b 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039c6:	193b      	adds	r3, r7, r4
 80039c8:	2210      	movs	r2, #16
 80039ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039cc:	193b      	adds	r3, r7, r4
 80039ce:	2200      	movs	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	193b      	adds	r3, r7, r4
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d8:	193b      	adds	r3, r7, r4
 80039da:	4a17      	ldr	r2, [pc, #92]	@ (8003a38 <MX_GPIO_Init+0x10c>)
 80039dc:	0019      	movs	r1, r3
 80039de:	0010      	movs	r0, r2
 80039e0:	f000 ff2c 	bl	800483c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin OLED_RES_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RES_Pin;
 80039e4:	0021      	movs	r1, r4
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	2260      	movs	r2, #96	@ 0x60
 80039ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	2201      	movs	r2, #1
 80039f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	2200      	movs	r2, #0
 80039fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <MX_GPIO_Init+0x10c>)
 8003a02:	0019      	movs	r1, r3
 8003a04:	0010      	movs	r0, r2
 8003a06:	f000 ff19 	bl	800483c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	2006      	movs	r0, #6
 8003a10:	f000 fee2 	bl	80047d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003a14:	2006      	movs	r0, #6
 8003a16:	f000 fef4 	bl	8004802 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	2007      	movs	r0, #7
 8003a20:	f000 feda 	bl	80047d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003a24:	2007      	movs	r0, #7
 8003a26:	f000 feec 	bl	8004802 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b009      	add	sp, #36	@ 0x24
 8003a30:	bd90      	pop	{r4, r7, pc}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	40021000 	.word	0x40021000
 8003a38:	50000400 	.word	0x50000400

08003a3c <draw_waveform>:

/* USER CODE BEGIN 4 */

void draw_waveform(u8g2_t* u8g2, uint8_t* data, const char* title, int zoom, DisplayMode mode)
{
 8003a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3e:	b0a1      	sub	sp, #132	@ 0x84
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  char buffer[20];

  // 1. 清空缓冲区
  u8g2_ClearBuffer(u8g2);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f002 fba7 	bl	80061a0 <u8g2_ClearBuffer>

  // 2. 绘制顶部状态栏 (逻辑不变)
  u8g2_SetFont(u8g2, u8g2_font_ncenB08_tr);
 8003a52:	4acf      	ldr	r2, [pc, #828]	@ (8003d90 <draw_waveform+0x354>)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	0011      	movs	r1, r2
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f003 fbe3 	bl	8007224 <u8g2_SetFont>
  uint8_t current_raw_value = data[data_offset + GRAPH_WIDTH / 2];
 8003a5e:	4bcd      	ldr	r3, [pc, #820]	@ (8003d94 <draw_waveform+0x358>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3337      	adds	r3, #55	@ 0x37
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	18d2      	adds	r2, r2, r3
 8003a68:	2157      	movs	r1, #87	@ 0x57
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	701a      	strb	r2, [r3, #0]
  if (mode == DISPLAY_HEART_RATE) {
 8003a70:	2388      	movs	r3, #136	@ 0x88
 8003a72:	2208      	movs	r2, #8
 8003a74:	189b      	adds	r3, r3, r2
 8003a76:	19db      	adds	r3, r3, r7
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <draw_waveform+0x5e>
      int current_hr = 60 + (current_raw_value / 4);
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	333c      	adds	r3, #60	@ 0x3c
 8003a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
      sprintf(buffer, "HR: %d bpm", current_hr);
 8003a8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a8c:	49c2      	ldr	r1, [pc, #776]	@ (8003d98 <draw_waveform+0x35c>)
 8003a8e:	2310      	movs	r3, #16
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	0018      	movs	r0, r3
 8003a94:	f005 fb34 	bl	8009100 <siprintf>
 8003a98:	e01b      	b.n	8003ad2 <draw_waveform+0x96>
  } else {
      float current_temp = 35.0f + (current_raw_value / 5.0f);
 8003a9a:	2357      	movs	r3, #87	@ 0x57
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7fd fcf5 	bl	8001490 <__aeabi_i2f>
 8003aa6:	1c03      	adds	r3, r0, #0
 8003aa8:	49bc      	ldr	r1, [pc, #752]	@ (8003d9c <draw_waveform+0x360>)
 8003aaa:	1c18      	adds	r0, r3, #0
 8003aac:	f7fc ff44 	bl	8000938 <__aeabi_fdiv>
 8003ab0:	1c03      	adds	r3, r0, #0
 8003ab2:	49bb      	ldr	r1, [pc, #748]	@ (8003da0 <draw_waveform+0x364>)
 8003ab4:	1c18      	adds	r0, r3, #0
 8003ab6:	f7fc fd4d 	bl	8000554 <__aeabi_fadd>
 8003aba:	1c03      	adds	r3, r0, #0
 8003abc:	653b      	str	r3, [r7, #80]	@ 0x50
      sprintf(buffer, "Temp: %.1fC", current_temp);
 8003abe:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003ac0:	f7ff fcd6 	bl	8003470 <__aeabi_f2d>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	000b      	movs	r3, r1
 8003ac8:	49b6      	ldr	r1, [pc, #728]	@ (8003da4 <draw_waveform+0x368>)
 8003aca:	2010      	movs	r0, #16
 8003acc:	1838      	adds	r0, r7, r0
 8003ace:	f005 fb17 	bl	8009100 <siprintf>
  }
  u8g2_DrawStr(u8g2, 2, 10, buffer);
 8003ad2:	2410      	movs	r4, #16
 8003ad4:	193b      	adds	r3, r7, r4
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	220a      	movs	r2, #10
 8003ada:	2102      	movs	r1, #2
 8003adc:	f003 fafe 	bl	80070dc <u8g2_DrawStr>
  if (control_mode == MODE_ZOOM) {
 8003ae0:	4bb1      	ldr	r3, [pc, #708]	@ (8003da8 <draw_waveform+0x36c>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <draw_waveform+0xbc>
      sprintf(buffer, "Zoom:x%d", zoom);
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	49af      	ldr	r1, [pc, #700]	@ (8003dac <draw_waveform+0x370>)
 8003aee:	193b      	adds	r3, r7, r4
 8003af0:	0018      	movs	r0, r3
 8003af2:	f005 fb05 	bl	8009100 <siprintf>
 8003af6:	e007      	b.n	8003b08 <draw_waveform+0xcc>
  } else {
      sprintf(buffer, "Pan:%ld", data_offset);
 8003af8:	4ba6      	ldr	r3, [pc, #664]	@ (8003d94 <draw_waveform+0x358>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	49ac      	ldr	r1, [pc, #688]	@ (8003db0 <draw_waveform+0x374>)
 8003afe:	2310      	movs	r3, #16
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	0018      	movs	r0, r3
 8003b04:	f005 fafc 	bl	8009100 <siprintf>
  }
  u8g2_uint_t str_width = u8g2_GetStrWidth(u8g2, buffer);
 8003b08:	264a      	movs	r6, #74	@ 0x4a
 8003b0a:	19bc      	adds	r4, r7, r6
 8003b0c:	2510      	movs	r5, #16
 8003b0e:	197a      	adds	r2, r7, r5
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	0011      	movs	r1, r2
 8003b14:	0018      	movs	r0, r3
 8003b16:	f003 fc2f 	bl	8007378 <u8g2_GetStrWidth>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	8023      	strh	r3, [r4, #0]
  u8g2_DrawStr(u8g2, 127 - str_width, 10, buffer);
 8003b1e:	19bb      	adds	r3, r7, r6
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	227f      	movs	r2, #127	@ 0x7f
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	b299      	uxth	r1, r3
 8003b28:	197b      	adds	r3, r7, r5
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	220a      	movs	r2, #10
 8003b2e:	f003 fad5 	bl	80070dc <u8g2_DrawStr>
  u8g2_DrawHLine(u8g2, 0, 12, 128);
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	2380      	movs	r3, #128	@ 0x80
 8003b36:	220c      	movs	r2, #12
 8003b38:	2100      	movs	r1, #0
 8003b3a:	f003 fd84 	bl	8007646 <u8g2_DrawHLine>

  // 3. 绘制坐标轴框架 (逻辑不变)
  u8g2_DrawVLine(u8g2, GRAPH_X_START, GRAPH_Y_START, GRAPH_HEIGHT);
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	2364      	movs	r3, #100	@ 0x64
 8003b42:	220f      	movs	r2, #15
 8003b44:	210f      	movs	r1, #15
 8003b46:	f003 fda0 	bl	800768a <u8g2_DrawVLine>
  u8g2_DrawHLine(u8g2, GRAPH_X_START, GRAPH_Y_END, GRAPH_WIDTH);
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	236e      	movs	r3, #110	@ 0x6e
 8003b4e:	2273      	movs	r2, #115	@ 0x73
 8003b50:	210f      	movs	r1, #15
 8003b52:	f003 fd78 	bl	8007646 <u8g2_DrawHLine>
  // ====================================================================
  float y_max, y_mid, y_min;
  float dynamic_center; // <<< NEW: 定义动态中心变量

  // <<< NEW: 获取屏幕中心点对应的原始数据值
  uint8_t raw_center_value = data[data_offset + GRAPH_WIDTH / 2];
 8003b56:	4b8f      	ldr	r3, [pc, #572]	@ (8003d94 <draw_waveform+0x358>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3337      	adds	r3, #55	@ 0x37
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	18d2      	adds	r2, r2, r3
 8003b60:	2149      	movs	r1, #73	@ 0x49
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	701a      	strb	r2, [r3, #0]

  if (mode == DISPLAY_HEART_RATE) {
 8003b68:	2388      	movs	r3, #136	@ 0x88
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	189b      	adds	r3, r3, r2
 8003b6e:	19db      	adds	r3, r3, r7
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d174      	bne.n	8003c60 <draw_waveform+0x224>
    const float base_min = 60.0f;
 8003b76:	4b8f      	ldr	r3, [pc, #572]	@ (8003db4 <draw_waveform+0x378>)
 8003b78:	633b      	str	r3, [r7, #48]	@ 0x30
    const float base_max = 120.0f;
 8003b7a:	4b8f      	ldr	r3, [pc, #572]	@ (8003db8 <draw_waveform+0x37c>)
 8003b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
    // <<< MODIFIED: 计算动态中心点的真实物理值
    dynamic_center = 60.0f + (raw_center_value / 4.0f);
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	0018      	movs	r0, r3
 8003b84:	f7fd fc84 	bl	8001490 <__aeabi_i2f>
 8003b88:	1c03      	adds	r3, r0, #0
 8003b8a:	2181      	movs	r1, #129	@ 0x81
 8003b8c:	05c9      	lsls	r1, r1, #23
 8003b8e:	1c18      	adds	r0, r3, #0
 8003b90:	f7fc fed2 	bl	8000938 <__aeabi_fdiv>
 8003b94:	1c03      	adds	r3, r0, #0
 8003b96:	4987      	ldr	r1, [pc, #540]	@ (8003db4 <draw_waveform+0x378>)
 8003b98:	1c18      	adds	r0, r3, #0
 8003b9a:	f7fc fcdb 	bl	8000554 <__aeabi_fadd>
 8003b9e:	1c03      	adds	r3, r0, #0
 8003ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    float span = (base_max - base_min) / zoom; // 新的跨度
 8003ba2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ba4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ba6:	f7fd f9ef 	bl	8000f88 <__aeabi_fsub>
 8003baa:	1c03      	adds	r3, r0, #0
 8003bac:	1c1c      	adds	r4, r3, #0
 8003bae:	6838      	ldr	r0, [r7, #0]
 8003bb0:	f7fd fc6e 	bl	8001490 <__aeabi_i2f>
 8003bb4:	1c03      	adds	r3, r0, #0
 8003bb6:	1c19      	adds	r1, r3, #0
 8003bb8:	1c20      	adds	r0, r4, #0
 8003bba:	f7fc febd 	bl	8000938 <__aeabi_fdiv>
 8003bbe:	1c03      	adds	r3, r0, #0
 8003bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    // <<< MODIFIED: 围绕动态中心点计算Y轴范围
    y_max = dynamic_center + span / 2.0f;
 8003bc2:	2180      	movs	r1, #128	@ 0x80
 8003bc4:	05c9      	lsls	r1, r1, #23
 8003bc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bc8:	f7fc feb6 	bl	8000938 <__aeabi_fdiv>
 8003bcc:	1c03      	adds	r3, r0, #0
 8003bce:	1c19      	adds	r1, r3, #0
 8003bd0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003bd2:	f7fc fcbf 	bl	8000554 <__aeabi_fadd>
 8003bd6:	1c03      	adds	r3, r0, #0
 8003bd8:	677b      	str	r3, [r7, #116]	@ 0x74
    y_min = dynamic_center - span / 2.0f;
 8003bda:	2180      	movs	r1, #128	@ 0x80
 8003bdc:	05c9      	lsls	r1, r1, #23
 8003bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003be0:	f7fc feaa 	bl	8000938 <__aeabi_fdiv>
 8003be4:	1c03      	adds	r3, r0, #0
 8003be6:	1c19      	adds	r1, r3, #0
 8003be8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003bea:	f7fd f9cd 	bl	8000f88 <__aeabi_fsub>
 8003bee:	1c03      	adds	r3, r0, #0
 8003bf0:	673b      	str	r3, [r7, #112]	@ 0x70
    y_mid = dynamic_center;
 8003bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf4:	637b      	str	r3, [r7, #52]	@ 0x34

    // 绘制动态标签
    u8g2_SetFont(u8g2, u8g2_font_t0_11_tr);
 8003bf6:	4a71      	ldr	r2, [pc, #452]	@ (8003dbc <draw_waveform+0x380>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f003 fb11 	bl	8007224 <u8g2_SetFont>
    sprintf(buffer, "%.0f", y_max); u8g2_DrawStr(u8g2, 0, GRAPH_Y_START + 5, buffer);
 8003c02:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003c04:	f7ff fc34 	bl	8003470 <__aeabi_f2d>
 8003c08:	0002      	movs	r2, r0
 8003c0a:	000b      	movs	r3, r1
 8003c0c:	496c      	ldr	r1, [pc, #432]	@ (8003dc0 <draw_waveform+0x384>)
 8003c0e:	002c      	movs	r4, r5
 8003c10:	1938      	adds	r0, r7, r4
 8003c12:	f005 fa75 	bl	8009100 <siprintf>
 8003c16:	193b      	adds	r3, r7, r4
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	2214      	movs	r2, #20
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	f003 fa5d 	bl	80070dc <u8g2_DrawStr>
    sprintf(buffer, "%.0f", y_mid); u8g2_DrawStr(u8g2, 0, GRAPH_Y_START + GRAPH_HEIGHT / 2, buffer);
 8003c22:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003c24:	f7ff fc24 	bl	8003470 <__aeabi_f2d>
 8003c28:	0002      	movs	r2, r0
 8003c2a:	000b      	movs	r3, r1
 8003c2c:	4964      	ldr	r1, [pc, #400]	@ (8003dc0 <draw_waveform+0x384>)
 8003c2e:	1938      	adds	r0, r7, r4
 8003c30:	f005 fa66 	bl	8009100 <siprintf>
 8003c34:	193b      	adds	r3, r7, r4
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	2241      	movs	r2, #65	@ 0x41
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f003 fa4e 	bl	80070dc <u8g2_DrawStr>
    sprintf(buffer, "%.0f", y_min); u8g2_DrawStr(u8g2, 0, GRAPH_Y_END, buffer);
 8003c40:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003c42:	f7ff fc15 	bl	8003470 <__aeabi_f2d>
 8003c46:	0002      	movs	r2, r0
 8003c48:	000b      	movs	r3, r1
 8003c4a:	495d      	ldr	r1, [pc, #372]	@ (8003dc0 <draw_waveform+0x384>)
 8003c4c:	1938      	adds	r0, r7, r4
 8003c4e:	f005 fa57 	bl	8009100 <siprintf>
 8003c52:	193b      	adds	r3, r7, r4
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	2273      	movs	r2, #115	@ 0x73
 8003c58:	2100      	movs	r1, #0
 8003c5a:	f003 fa3f 	bl	80070dc <u8g2_DrawStr>
 8003c5e:	e073      	b.n	8003d48 <draw_waveform+0x30c>
  } else { // DISPLAY_TEMPERATURE
    const float base_min = 35.0f;
 8003c60:	4b4f      	ldr	r3, [pc, #316]	@ (8003da0 <draw_waveform+0x364>)
 8003c62:	647b      	str	r3, [r7, #68]	@ 0x44
    const float base_max = 42.0f;
 8003c64:	4b57      	ldr	r3, [pc, #348]	@ (8003dc4 <draw_waveform+0x388>)
 8003c66:	643b      	str	r3, [r7, #64]	@ 0x40

    // <<< MODIFIED: 计算动态中心点的真实物理值
    dynamic_center = 35.0f + (raw_center_value / 5.0f);
 8003c68:	2349      	movs	r3, #73	@ 0x49
 8003c6a:	18fb      	adds	r3, r7, r3
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f7fd fc0e 	bl	8001490 <__aeabi_i2f>
 8003c74:	1c03      	adds	r3, r0, #0
 8003c76:	4949      	ldr	r1, [pc, #292]	@ (8003d9c <draw_waveform+0x360>)
 8003c78:	1c18      	adds	r0, r3, #0
 8003c7a:	f7fc fe5d 	bl	8000938 <__aeabi_fdiv>
 8003c7e:	1c03      	adds	r3, r0, #0
 8003c80:	4947      	ldr	r1, [pc, #284]	@ (8003da0 <draw_waveform+0x364>)
 8003c82:	1c18      	adds	r0, r3, #0
 8003c84:	f7fc fc66 	bl	8000554 <__aeabi_fadd>
 8003c88:	1c03      	adds	r3, r0, #0
 8003c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    float span = (base_max - base_min) / zoom;
 8003c8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003c8e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003c90:	f7fd f97a 	bl	8000f88 <__aeabi_fsub>
 8003c94:	1c03      	adds	r3, r0, #0
 8003c96:	1c1c      	adds	r4, r3, #0
 8003c98:	6838      	ldr	r0, [r7, #0]
 8003c9a:	f7fd fbf9 	bl	8001490 <__aeabi_i2f>
 8003c9e:	1c03      	adds	r3, r0, #0
 8003ca0:	1c19      	adds	r1, r3, #0
 8003ca2:	1c20      	adds	r0, r4, #0
 8003ca4:	f7fc fe48 	bl	8000938 <__aeabi_fdiv>
 8003ca8:	1c03      	adds	r3, r0, #0
 8003caa:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    // <<< MODIFIED: 围绕动态中心点计算Y轴范围
    y_max = dynamic_center + span / 2.0f;
 8003cac:	2180      	movs	r1, #128	@ 0x80
 8003cae:	05c9      	lsls	r1, r1, #23
 8003cb0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003cb2:	f7fc fe41 	bl	8000938 <__aeabi_fdiv>
 8003cb6:	1c03      	adds	r3, r0, #0
 8003cb8:	1c19      	adds	r1, r3, #0
 8003cba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003cbc:	f7fc fc4a 	bl	8000554 <__aeabi_fadd>
 8003cc0:	1c03      	adds	r3, r0, #0
 8003cc2:	677b      	str	r3, [r7, #116]	@ 0x74
    y_min = dynamic_center - span / 2.0f;
 8003cc4:	2180      	movs	r1, #128	@ 0x80
 8003cc6:	05c9      	lsls	r1, r1, #23
 8003cc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003cca:	f7fc fe35 	bl	8000938 <__aeabi_fdiv>
 8003cce:	1c03      	adds	r3, r0, #0
 8003cd0:	1c19      	adds	r1, r3, #0
 8003cd2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003cd4:	f7fd f958 	bl	8000f88 <__aeabi_fsub>
 8003cd8:	1c03      	adds	r3, r0, #0
 8003cda:	673b      	str	r3, [r7, #112]	@ 0x70
    y_mid = dynamic_center;
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34

    // 绘制动态标签
    u8g2_SetFont(u8g2, u8g2_font_t0_11_tr);
 8003ce0:	4a36      	ldr	r2, [pc, #216]	@ (8003dbc <draw_waveform+0x380>)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	0011      	movs	r1, r2
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f003 fa9c 	bl	8007224 <u8g2_SetFont>
    sprintf(buffer, "%.1f", y_max); u8g2_DrawStr(u8g2, 0, GRAPH_Y_START + 5, buffer);
 8003cec:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003cee:	f7ff fbbf 	bl	8003470 <__aeabi_f2d>
 8003cf2:	0002      	movs	r2, r0
 8003cf4:	000b      	movs	r3, r1
 8003cf6:	4934      	ldr	r1, [pc, #208]	@ (8003dc8 <draw_waveform+0x38c>)
 8003cf8:	2410      	movs	r4, #16
 8003cfa:	1938      	adds	r0, r7, r4
 8003cfc:	f005 fa00 	bl	8009100 <siprintf>
 8003d00:	193b      	adds	r3, r7, r4
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	2214      	movs	r2, #20
 8003d06:	2100      	movs	r1, #0
 8003d08:	f003 f9e8 	bl	80070dc <u8g2_DrawStr>
    sprintf(buffer, "%.1f", y_mid); u8g2_DrawStr(u8g2, 0, GRAPH_Y_START + GRAPH_HEIGHT / 2, buffer);
 8003d0c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003d0e:	f7ff fbaf 	bl	8003470 <__aeabi_f2d>
 8003d12:	0002      	movs	r2, r0
 8003d14:	000b      	movs	r3, r1
 8003d16:	492c      	ldr	r1, [pc, #176]	@ (8003dc8 <draw_waveform+0x38c>)
 8003d18:	1938      	adds	r0, r7, r4
 8003d1a:	f005 f9f1 	bl	8009100 <siprintf>
 8003d1e:	193b      	adds	r3, r7, r4
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	2241      	movs	r2, #65	@ 0x41
 8003d24:	2100      	movs	r1, #0
 8003d26:	f003 f9d9 	bl	80070dc <u8g2_DrawStr>
    sprintf(buffer, "%.1f", y_min); u8g2_DrawStr(u8g2, 0, GRAPH_Y_END, buffer);
 8003d2a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003d2c:	f7ff fba0 	bl	8003470 <__aeabi_f2d>
 8003d30:	0002      	movs	r2, r0
 8003d32:	000b      	movs	r3, r1
 8003d34:	4924      	ldr	r1, [pc, #144]	@ (8003dc8 <draw_waveform+0x38c>)
 8003d36:	1938      	adds	r0, r7, r4
 8003d38:	f005 f9e2 	bl	8009100 <siprintf>
 8003d3c:	193b      	adds	r3, r7, r4
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	2273      	movs	r2, #115	@ 0x73
 8003d42:	2100      	movs	r1, #0
 8003d44:	f003 f9ca 	bl	80070dc <u8g2_DrawStr>
  }

  // 绘制X轴标签 (逻辑不变)
  u8g2_uint_t label_width = u8g2_GetStrWidth(u8g2, "10s");
 8003d48:	2526      	movs	r5, #38	@ 0x26
 8003d4a:	197c      	adds	r4, r7, r5
 8003d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003dcc <draw_waveform+0x390>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	0011      	movs	r1, r2
 8003d52:	0018      	movs	r0, r3
 8003d54:	f003 fb10 	bl	8007378 <u8g2_GetStrWidth>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	8023      	strh	r3, [r4, #0]
  u8g2_DrawStr(u8g2, GRAPH_X_START, 127, "0s");
 8003d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <draw_waveform+0x394>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	227f      	movs	r2, #127	@ 0x7f
 8003d62:	210f      	movs	r1, #15
 8003d64:	f003 f9ba 	bl	80070dc <u8g2_DrawStr>
  u8g2_DrawStr(u8g2, GRAPH_X_START + GRAPH_WIDTH / 2 - 5, 127, "5s");
 8003d68:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <draw_waveform+0x398>)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	227f      	movs	r2, #127	@ 0x7f
 8003d6e:	2141      	movs	r1, #65	@ 0x41
 8003d70:	f003 f9b4 	bl	80070dc <u8g2_DrawStr>
  u8g2_DrawStr(u8g2, GRAPH_X_START + GRAPH_WIDTH - label_width, 127, "10s");
 8003d74:	197b      	adds	r3, r7, r5
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	227d      	movs	r2, #125	@ 0x7d
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	b299      	uxth	r1, r3
 8003d7e:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <draw_waveform+0x390>)
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	227f      	movs	r2, #127	@ 0x7f
 8003d84:	f003 f9aa 	bl	80070dc <u8g2_DrawStr>

  // ====================================================================
  // 【核心修改】使用新的动态范围来映射和绘制波形 (带钳位逻辑)
  // ====================================================================
  for (int x = 0; x < GRAPH_WIDTH - 1; x++) {
 8003d88:	2300      	movs	r3, #0
 8003d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d8c:	e0fe      	b.n	8003f8c <draw_waveform+0x550>
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	0800c974 	.word	0x0800c974
 8003d94:	200002ac 	.word	0x200002ac
 8003d98:	0800c460 	.word	0x0800c460
 8003d9c:	40a00000 	.word	0x40a00000
 8003da0:	420c0000 	.word	0x420c0000
 8003da4:	0800c46c 	.word	0x0800c46c
 8003da8:	200002b5 	.word	0x200002b5
 8003dac:	0800c478 	.word	0x0800c478
 8003db0:	0800c484 	.word	0x0800c484
 8003db4:	42700000 	.word	0x42700000
 8003db8:	42f00000 	.word	0x42f00000
 8003dbc:	0800c5a4 	.word	0x0800c5a4
 8003dc0:	0800c48c 	.word	0x0800c48c
 8003dc4:	42280000 	.word	0x42280000
 8003dc8:	0800c494 	.word	0x0800c494
 8003dcc:	0800c49c 	.word	0x0800c49c
 8003dd0:	0800c4a0 	.word	0x0800c4a0
 8003dd4:	0800c4a4 	.word	0x0800c4a4
    // 1. 获取原始数据 (这部分不变)
    // 【修改后】
    uint8_t raw_val1 = data[(x + data_offset) % WAVEFORM_LENGTH];
 8003dd8:	4b72      	ldr	r3, [pc, #456]	@ (8003fa4 <draw_waveform+0x568>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dde:	18d3      	adds	r3, r2, r3
 8003de0:	4a71      	ldr	r2, [pc, #452]	@ (8003fa8 <draw_waveform+0x56c>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	d504      	bpl.n	8003df0 <draw_waveform+0x3b4>
 8003de6:	3b01      	subs	r3, #1
 8003de8:	2280      	movs	r2, #128	@ 0x80
 8003dea:	4252      	negs	r2, r2
 8003dec:	4313      	orrs	r3, r2
 8003dee:	3301      	adds	r3, #1
 8003df0:	001a      	movs	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	189a      	adds	r2, r3, r2
 8003df6:	2325      	movs	r3, #37	@ 0x25
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	7812      	ldrb	r2, [r2, #0]
 8003dfc:	701a      	strb	r2, [r3, #0]
    uint8_t raw_val2 = data[(x + 1 + data_offset) % WAVEFORM_LENGTH];
 8003dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	4b68      	ldr	r3, [pc, #416]	@ (8003fa4 <draw_waveform+0x568>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	18d3      	adds	r3, r2, r3
 8003e08:	4a67      	ldr	r2, [pc, #412]	@ (8003fa8 <draw_waveform+0x56c>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d504      	bpl.n	8003e18 <draw_waveform+0x3dc>
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	2280      	movs	r2, #128	@ 0x80
 8003e12:	4252      	negs	r2, r2
 8003e14:	4313      	orrs	r3, r2
 8003e16:	3301      	adds	r3, #1
 8003e18:	001a      	movs	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	189a      	adds	r2, r3, r2
 8003e1e:	2424      	movs	r4, #36	@ 0x24
 8003e20:	193b      	adds	r3, r7, r4
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	701a      	strb	r2, [r3, #0]

    // 2. 将原始数据转换为真实的物理值 (这部分不变)
    float real_val1, real_val2;
    if (mode == DISPLAY_HEART_RATE) {
 8003e26:	2388      	movs	r3, #136	@ 0x88
 8003e28:	2208      	movs	r2, #8
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	19db      	adds	r3, r3, r7
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d125      	bne.n	8003e80 <draw_waveform+0x444>
        real_val1 = 60.0f + (raw_val1 / 4.0f);
 8003e34:	2325      	movs	r3, #37	@ 0x25
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7fd fb28 	bl	8001490 <__aeabi_i2f>
 8003e40:	1c03      	adds	r3, r0, #0
 8003e42:	2181      	movs	r1, #129	@ 0x81
 8003e44:	05c9      	lsls	r1, r1, #23
 8003e46:	1c18      	adds	r0, r3, #0
 8003e48:	f7fc fd76 	bl	8000938 <__aeabi_fdiv>
 8003e4c:	1c03      	adds	r3, r0, #0
 8003e4e:	4957      	ldr	r1, [pc, #348]	@ (8003fac <draw_waveform+0x570>)
 8003e50:	1c18      	adds	r0, r3, #0
 8003e52:	f7fc fb7f 	bl	8000554 <__aeabi_fadd>
 8003e56:	1c03      	adds	r3, r0, #0
 8003e58:	66bb      	str	r3, [r7, #104]	@ 0x68
        real_val2 = 60.0f + (raw_val2 / 4.0f);
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f7fd fb16 	bl	8001490 <__aeabi_i2f>
 8003e64:	1c03      	adds	r3, r0, #0
 8003e66:	2181      	movs	r1, #129	@ 0x81
 8003e68:	05c9      	lsls	r1, r1, #23
 8003e6a:	1c18      	adds	r0, r3, #0
 8003e6c:	f7fc fd64 	bl	8000938 <__aeabi_fdiv>
 8003e70:	1c03      	adds	r3, r0, #0
 8003e72:	494e      	ldr	r1, [pc, #312]	@ (8003fac <draw_waveform+0x570>)
 8003e74:	1c18      	adds	r0, r3, #0
 8003e76:	f7fc fb6d 	bl	8000554 <__aeabi_fadd>
 8003e7a:	1c03      	adds	r3, r0, #0
 8003e7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e7e:	e023      	b.n	8003ec8 <draw_waveform+0x48c>
    } else {
        real_val1 = 35.0f + (raw_val1 / 5.0f);
 8003e80:	2325      	movs	r3, #37	@ 0x25
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7fd fb02 	bl	8001490 <__aeabi_i2f>
 8003e8c:	1c03      	adds	r3, r0, #0
 8003e8e:	4948      	ldr	r1, [pc, #288]	@ (8003fb0 <draw_waveform+0x574>)
 8003e90:	1c18      	adds	r0, r3, #0
 8003e92:	f7fc fd51 	bl	8000938 <__aeabi_fdiv>
 8003e96:	1c03      	adds	r3, r0, #0
 8003e98:	4946      	ldr	r1, [pc, #280]	@ (8003fb4 <draw_waveform+0x578>)
 8003e9a:	1c18      	adds	r0, r3, #0
 8003e9c:	f7fc fb5a 	bl	8000554 <__aeabi_fadd>
 8003ea0:	1c03      	adds	r3, r0, #0
 8003ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
        real_val2 = 35.0f + (raw_val2 / 5.0f);
 8003ea4:	2324      	movs	r3, #36	@ 0x24
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f7fd faf0 	bl	8001490 <__aeabi_i2f>
 8003eb0:	1c03      	adds	r3, r0, #0
 8003eb2:	493f      	ldr	r1, [pc, #252]	@ (8003fb0 <draw_waveform+0x574>)
 8003eb4:	1c18      	adds	r0, r3, #0
 8003eb6:	f7fc fd3f 	bl	8000938 <__aeabi_fdiv>
 8003eba:	1c03      	adds	r3, r0, #0
 8003ebc:	493d      	ldr	r1, [pc, #244]	@ (8003fb4 <draw_waveform+0x578>)
 8003ebe:	1c18      	adds	r0, r3, #0
 8003ec0:	f7fc fb48 	bl	8000554 <__aeabi_fadd>
 8003ec4:	1c03      	adds	r3, r0, #0
 8003ec6:	667b      	str	r3, [r7, #100]	@ 0x64
    }

    // 3. 将真实的物理值映射到屏幕像素Y坐标 (这部分不变)
    float y_span = y_max - y_min;
 8003ec8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003eca:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8003ecc:	f7fd f85c 	bl	8000f88 <__aeabi_fsub>
 8003ed0:	1c03      	adds	r3, r0, #0
 8003ed2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (y_span < 0.001f) y_span = 0.001f; // 防止除以零
 8003ed4:	4938      	ldr	r1, [pc, #224]	@ (8003fb8 <draw_waveform+0x57c>)
 8003ed6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003ed8:	f7fc faf6 	bl	80004c8 <__aeabi_fcmplt>
 8003edc:	1e03      	subs	r3, r0, #0
 8003ede:	d001      	beq.n	8003ee4 <draw_waveform+0x4a8>
 8003ee0:	4b35      	ldr	r3, [pc, #212]	@ (8003fb8 <draw_waveform+0x57c>)
 8003ee2:	663b      	str	r3, [r7, #96]	@ 0x60

    int y1 = GRAPH_Y_END - (int)((real_val1 - y_min) * GRAPH_HEIGHT / y_span);
 8003ee4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003ee6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003ee8:	f7fd f84e 	bl	8000f88 <__aeabi_fsub>
 8003eec:	1c03      	adds	r3, r0, #0
 8003eee:	4933      	ldr	r1, [pc, #204]	@ (8003fbc <draw_waveform+0x580>)
 8003ef0:	1c18      	adds	r0, r3, #0
 8003ef2:	f7fc feef 	bl	8000cd4 <__aeabi_fmul>
 8003ef6:	1c03      	adds	r3, r0, #0
 8003ef8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003efa:	1c18      	adds	r0, r3, #0
 8003efc:	f7fc fd1c 	bl	8000938 <__aeabi_fdiv>
 8003f00:	1c03      	adds	r3, r0, #0
 8003f02:	1c18      	adds	r0, r3, #0
 8003f04:	f7fd faa4 	bl	8001450 <__aeabi_f2iz>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	2273      	movs	r2, #115	@ 0x73
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int y2 = GRAPH_Y_END - (int)((real_val2 - y_min) * GRAPH_HEIGHT / y_span);
 8003f10:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003f12:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003f14:	f7fd f838 	bl	8000f88 <__aeabi_fsub>
 8003f18:	1c03      	adds	r3, r0, #0
 8003f1a:	4928      	ldr	r1, [pc, #160]	@ (8003fbc <draw_waveform+0x580>)
 8003f1c:	1c18      	adds	r0, r3, #0
 8003f1e:	f7fc fed9 	bl	8000cd4 <__aeabi_fmul>
 8003f22:	1c03      	adds	r3, r0, #0
 8003f24:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003f26:	1c18      	adds	r0, r3, #0
 8003f28:	f7fc fd06 	bl	8000938 <__aeabi_fdiv>
 8003f2c:	1c03      	adds	r3, r0, #0
 8003f2e:	1c18      	adds	r0, r3, #0
 8003f30:	f7fd fa8e 	bl	8001450 <__aeabi_f2iz>
 8003f34:	0003      	movs	r3, r0
 8003f36:	2273      	movs	r2, #115	@ 0x73
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	65bb      	str	r3, [r7, #88]	@ 0x58

    // ====================================================================
    // 【新增部分】坐标钳位 (Clamping)
    // ====================================================================
    // 强制将y1和y2限制在图形区域内
    if (y1 < GRAPH_Y_START) y1 = GRAPH_Y_START;
 8003f3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f3e:	2b0e      	cmp	r3, #14
 8003f40:	dc01      	bgt.n	8003f46 <draw_waveform+0x50a>
 8003f42:	230f      	movs	r3, #15
 8003f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (y1 > GRAPH_Y_END)   y1 = GRAPH_Y_END;
 8003f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f48:	2b73      	cmp	r3, #115	@ 0x73
 8003f4a:	dd01      	ble.n	8003f50 <draw_waveform+0x514>
 8003f4c:	2373      	movs	r3, #115	@ 0x73
 8003f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (y2 < GRAPH_Y_START) y2 = GRAPH_Y_START;
 8003f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f52:	2b0e      	cmp	r3, #14
 8003f54:	dc01      	bgt.n	8003f5a <draw_waveform+0x51e>
 8003f56:	230f      	movs	r3, #15
 8003f58:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (y2 > GRAPH_Y_END)   y2 = GRAPH_Y_END;
 8003f5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f5c:	2b73      	cmp	r3, #115	@ 0x73
 8003f5e:	dd01      	ble.n	8003f64 <draw_waveform+0x528>
 8003f60:	2373      	movs	r3, #115	@ 0x73
 8003f62:	65bb      	str	r3, [r7, #88]	@ 0x58
    // ====================================================================

    // 4. 绘制线段 (现在是安全的)
    u8g2_DrawLine(u8g2, GRAPH_X_START + x, y1, GRAPH_X_START + x + 1, y2);
 8003f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	330f      	adds	r3, #15
 8003f6a:	b299      	uxth	r1, r3
 8003f6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3310      	adds	r3, #16
 8003f76:	b29c      	uxth	r4, r3
 8003f78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	0023      	movs	r3, r4
 8003f82:	f003 fc59 	bl	8007838 <u8g2_DrawLine>
  for (int x = 0; x < GRAPH_WIDTH - 1; x++) {
 8003f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f88:	3301      	adds	r3, #1
 8003f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f8e:	2b6c      	cmp	r3, #108	@ 0x6c
 8003f90:	dc00      	bgt.n	8003f94 <draw_waveform+0x558>
 8003f92:	e721      	b.n	8003dd8 <draw_waveform+0x39c>
  }

  // 5. 将缓冲区内容发送到屏幕 (这部分不变)
  u8g2_SendBuffer(u8g2);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f002 f99d 	bl	80062d6 <u8g2_SendBuffer>
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b01f      	add	sp, #124	@ 0x7c
 8003fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa4:	200002ac 	.word	0x200002ac
 8003fa8:	8000007f 	.word	0x8000007f
 8003fac:	42700000 	.word	0x42700000
 8003fb0:	40a00000 	.word	0x40a00000
 8003fb4:	420c0000 	.word	0x420c0000
 8003fb8:	3a83126f 	.word	0x3a83126f
 8003fbc:	42c80000 	.word	0x42c80000

08003fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fc4:	b672      	cpsid	i
}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fc8:	46c0      	nop			@ (mov r8, r8)
 8003fca:	e7fd      	b.n	8003fc8 <Error_Handler+0x8>

08003fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <HAL_MspInit+0x44>)
 8003fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004010 <HAL_MspInit+0x44>)
 8003fd8:	2101      	movs	r1, #1
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fde:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <HAL_MspInit+0x44>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <HAL_MspInit+0x44>)
 8003fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fee:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <HAL_MspInit+0x44>)
 8003ff0:	2180      	movs	r1, #128	@ 0x80
 8003ff2:	0549      	lsls	r1, r1, #21
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ff8:	4b05      	ldr	r3, [pc, #20]	@ (8004010 <HAL_MspInit+0x44>)
 8003ffa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ffc:	2380      	movs	r3, #128	@ 0x80
 8003ffe:	055b      	lsls	r3, r3, #21
 8004000:	4013      	ands	r3, r2
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b002      	add	sp, #8
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	40021000 	.word	0x40021000

08004014 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b08b      	sub	sp, #44	@ 0x2c
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401c:	2414      	movs	r4, #20
 800401e:	193b      	adds	r3, r7, r4
 8004020:	0018      	movs	r0, r3
 8004022:	2314      	movs	r3, #20
 8004024:	001a      	movs	r2, r3
 8004026:	2100      	movs	r1, #0
 8004028:	f005 f8d8 	bl	80091dc <memset>
  if(hspi->Instance==SPI2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1b      	ldr	r2, [pc, #108]	@ (80040a0 <HAL_SPI_MspInit+0x8c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d130      	bne.n	8004098 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004036:	4b1b      	ldr	r3, [pc, #108]	@ (80040a4 <HAL_SPI_MspInit+0x90>)
 8004038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800403a:	4b1a      	ldr	r3, [pc, #104]	@ (80040a4 <HAL_SPI_MspInit+0x90>)
 800403c:	2180      	movs	r1, #128	@ 0x80
 800403e:	01c9      	lsls	r1, r1, #7
 8004040:	430a      	orrs	r2, r1
 8004042:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004044:	4b17      	ldr	r3, [pc, #92]	@ (80040a4 <HAL_SPI_MspInit+0x90>)
 8004046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004048:	2380      	movs	r3, #128	@ 0x80
 800404a:	01db      	lsls	r3, r3, #7
 800404c:	4013      	ands	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004052:	4b14      	ldr	r3, [pc, #80]	@ (80040a4 <HAL_SPI_MspInit+0x90>)
 8004054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004056:	4b13      	ldr	r3, [pc, #76]	@ (80040a4 <HAL_SPI_MspInit+0x90>)
 8004058:	2102      	movs	r1, #2
 800405a:	430a      	orrs	r2, r1
 800405c:	635a      	str	r2, [r3, #52]	@ 0x34
 800405e:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <HAL_SPI_MspInit+0x90>)
 8004060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004062:	2202      	movs	r2, #2
 8004064:	4013      	ands	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = OLED_DIN_Pin|OLED_CLK_Pin;
 800406a:	193b      	adds	r3, r7, r4
 800406c:	22c0      	movs	r2, #192	@ 0xc0
 800406e:	0052      	lsls	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004072:	0021      	movs	r1, r4
 8004074:	187b      	adds	r3, r7, r1
 8004076:	2202      	movs	r2, #2
 8004078:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	187b      	adds	r3, r7, r1
 800407c:	2200      	movs	r2, #0
 800407e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004080:	187b      	adds	r3, r7, r1
 8004082:	2200      	movs	r2, #0
 8004084:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004086:	187b      	adds	r3, r7, r1
 8004088:	2201      	movs	r2, #1
 800408a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800408c:	187b      	adds	r3, r7, r1
 800408e:	4a06      	ldr	r2, [pc, #24]	@ (80040a8 <HAL_SPI_MspInit+0x94>)
 8004090:	0019      	movs	r1, r3
 8004092:	0010      	movs	r0, r2
 8004094:	f000 fbd2 	bl	800483c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004098:	46c0      	nop			@ (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	b00b      	add	sp, #44	@ 0x2c
 800409e:	bd90      	pop	{r4, r7, pc}
 80040a0:	40003800 	.word	0x40003800
 80040a4:	40021000 	.word	0x40021000
 80040a8:	50000400 	.word	0x50000400

080040ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0e      	ldr	r2, [pc, #56]	@ (80040f4 <HAL_TIM_Base_MspInit+0x48>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d115      	bne.n	80040ea <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80040be:	4b0e      	ldr	r3, [pc, #56]	@ (80040f8 <HAL_TIM_Base_MspInit+0x4c>)
 80040c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040c2:	4b0d      	ldr	r3, [pc, #52]	@ (80040f8 <HAL_TIM_Base_MspInit+0x4c>)
 80040c4:	2180      	movs	r1, #128	@ 0x80
 80040c6:	0289      	lsls	r1, r1, #10
 80040c8:	430a      	orrs	r2, r1
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80040cc:	4b0a      	ldr	r3, [pc, #40]	@ (80040f8 <HAL_TIM_Base_MspInit+0x4c>)
 80040ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040d0:	2380      	movs	r3, #128	@ 0x80
 80040d2:	029b      	lsls	r3, r3, #10
 80040d4:	4013      	ands	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80040da:	2200      	movs	r2, #0
 80040dc:	2100      	movs	r1, #0
 80040de:	2015      	movs	r0, #21
 80040e0:	f000 fb7a 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80040e4:	2015      	movs	r0, #21
 80040e6:	f000 fb8c 	bl	8004802 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 80040ea:	46c0      	nop			@ (mov r8, r8)
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b004      	add	sp, #16
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	46c0      	nop			@ (mov r8, r8)
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40021000 	.word	0x40021000

080040fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004100:	46c0      	nop			@ (mov r8, r8)
 8004102:	e7fd      	b.n	8004100 <NMI_Handler+0x4>

08004104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004108:	46c0      	nop			@ (mov r8, r8)
 800410a:	e7fd      	b.n	8004108 <HardFault_Handler+0x4>

0800410c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004110:	46c0      	nop			@ (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800411a:	46c0      	nop			@ (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004124:	f000 fa6c 	bl	8004600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004132:	2008      	movs	r0, #8
 8004134:	f000 fd20 	bl	8004b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004142:	2380      	movs	r3, #128	@ 0x80
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	0018      	movs	r0, r3
 8004148:	f000 fd16 	bl	8004b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800414c:	46c0      	nop			@ (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004158:	4b03      	ldr	r3, [pc, #12]	@ (8004168 <TIM16_IRQHandler+0x14>)
 800415a:	0018      	movs	r0, r3
 800415c:	f001 fe54 	bl	8005e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004160:	46c0      	nop			@ (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	20000258 	.word	0x20000258

0800416c <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 1 */
// 我们不需要上升沿回调，所以这个函数可以留空或者不写
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	0002      	movs	r2, r0
 8004174:	1dbb      	adds	r3, r7, #6
 8004176:	801a      	strh	r2, [r3, #0]
  // 空
}
 8004178:	46c0      	nop			@ (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	b002      	add	sp, #8
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_GPIO_EXTI_Falling_Callback>:

// 核心逻辑在这里！
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	0002      	movs	r2, r0
 8004188:	1dbb      	adds	r3, r7, #6
 800418a:	801a      	strh	r2, [r3, #0]
  // --- 编码器解码 ---
  if (GPIO_Pin == GPIO_PIN_15) // PA15 下降沿触发
 800418c:	1dbb      	adds	r3, r7, #6
 800418e:	881a      	ldrh	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	429a      	cmp	r2, r3
 8004196:	d11f      	bne.n	80041d8 <HAL_GPIO_EXTI_Falling_Callback+0x58>
  {
      // 软件防抖：确保两次中断之间有最小时间间隔
      static uint32_t last_encoder_tick = 0;
      if (HAL_GetTick() - last_encoder_tick > 5) // 5ms防抖，过滤机械抖动
 8004198:	f000 fa44 	bl	8004624 <HAL_GetTick>
 800419c:	0002      	movs	r2, r0
 800419e:	4b1d      	ldr	r3, [pc, #116]	@ (8004214 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b05      	cmp	r3, #5
 80041a6:	d917      	bls.n	80041d8 <HAL_GPIO_EXTI_Falling_Callback+0x58>
      {
          // 读取B相(PB4)的电平来判断方向
          if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_SET) {
 80041a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <HAL_GPIO_EXTI_Falling_Callback+0x98>)
 80041aa:	2110      	movs	r1, #16
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 fca9 	bl	8004b04 <HAL_GPIO_ReadPin>
 80041b2:	0003      	movs	r3, r0
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <HAL_GPIO_EXTI_Falling_Callback+0x44>
              encoder_counter++; // 顺时针
 80041b8:	4b18      	ldr	r3, [pc, #96]	@ (800421c <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	4b17      	ldr	r3, [pc, #92]	@ (800421c <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e004      	b.n	80041ce <HAL_GPIO_EXTI_Falling_Callback+0x4e>
          } else {
              encoder_counter--; // 逆时针
 80041c4:	4b15      	ldr	r3, [pc, #84]	@ (800421c <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	1e5a      	subs	r2, r3, #1
 80041ca:	4b14      	ldr	r3, [pc, #80]	@ (800421c <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 80041cc:	601a      	str	r2, [r3, #0]
          }
          last_encoder_tick = HAL_GetTick();
 80041ce:	f000 fa29 	bl	8004624 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004214 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80041d6:	601a      	str	r2, [r3, #0]
      }
  }

  // --- 按键处理 ---
  if (GPIO_Pin == GPIO_PIN_3) // PB3 下降沿触发 (按键按下)
 80041d8:	1dbb      	adds	r3, r7, #6
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d114      	bne.n	800420a <HAL_GPIO_EXTI_Falling_Callback+0x8a>
  {
      // 软件防抖
      static uint32_t last_button_tick = 0;
      if (HAL_GetTick() - last_button_tick > 50) // 50ms防抖，防止一次按下多次触发
 80041e0:	f000 fa20 	bl	8004624 <HAL_GetTick>
 80041e4:	0002      	movs	r2, r0
 80041e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004220 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b32      	cmp	r3, #50	@ 0x32
 80041ee:	d90c      	bls.n	800420a <HAL_GPIO_EXTI_Falling_Callback+0x8a>
      {
          // 记录按键按下的时间点，用于主循环判断长短按
          button_press_time = HAL_GetTick();
 80041f0:	f000 fa18 	bl	8004624 <HAL_GetTick>
 80041f4:	0002      	movs	r2, r0
 80041f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
 80041f8:	601a      	str	r2, [r3, #0]
          // 设置按键标志
          button_pressed = 1;
 80041fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004228 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
          last_button_tick = HAL_GetTick();
 8004200:	f000 fa10 	bl	8004624 <HAL_GetTick>
 8004204:	0002      	movs	r2, r0
 8004206:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 8004208:	601a      	str	r2, [r3, #0]
      }
  }
}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	b002      	add	sp, #8
 8004210:	bd80      	pop	{r7, pc}
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	200003bc 	.word	0x200003bc
 8004218:	50000400 	.word	0x50000400
 800421c:	200002a4 	.word	0x200002a4
 8004220:	200003c0 	.word	0x200003c0
 8004224:	200002b0 	.word	0x200002b0
 8004228:	200002a8 	.word	0x200002a8

0800422c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  return 1;
 8004230:	2301      	movs	r3, #1
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <_kill>:

int _kill(int pid, int sig)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004242:	f005 f825 	bl	8009290 <__errno>
 8004246:	0003      	movs	r3, r0
 8004248:	2216      	movs	r2, #22
 800424a:	601a      	str	r2, [r3, #0]
  return -1;
 800424c:	2301      	movs	r3, #1
 800424e:	425b      	negs	r3, r3
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b002      	add	sp, #8
 8004256:	bd80      	pop	{r7, pc}

08004258 <_exit>:

void _exit (int status)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004260:	2301      	movs	r3, #1
 8004262:	425a      	negs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	0011      	movs	r1, r2
 8004268:	0018      	movs	r0, r3
 800426a:	f7ff ffe5 	bl	8004238 <_kill>
  while (1) {}    /* Make sure we hang here */
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	e7fd      	b.n	800426e <_exit+0x16>

08004272 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b086      	sub	sp, #24
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e00a      	b.n	800429a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004284:	e000      	b.n	8004288 <_read+0x16>
 8004286:	bf00      	nop
 8004288:	0001      	movs	r1, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	60ba      	str	r2, [r7, #8]
 8004290:	b2ca      	uxtb	r2, r1
 8004292:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3301      	adds	r3, #1
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	dbf0      	blt.n	8004284 <_read+0x12>
  }

  return len;
 80042a2:	687b      	ldr	r3, [r7, #4]
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b006      	add	sp, #24
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e009      	b.n	80042d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	60ba      	str	r2, [r7, #8]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	0018      	movs	r0, r3
 80042c8:	e000      	b.n	80042cc <_write+0x20>
 80042ca:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3301      	adds	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	dbf1      	blt.n	80042be <_write+0x12>
  }
  return len;
 80042da:	687b      	ldr	r3, [r7, #4]
}
 80042dc:	0018      	movs	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	b006      	add	sp, #24
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <_close>:

int _close(int file)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042ec:	2301      	movs	r3, #1
 80042ee:	425b      	negs	r3, r3
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b002      	add	sp, #8
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2280      	movs	r2, #128	@ 0x80
 8004306:	0192      	lsls	r2, r2, #6
 8004308:	605a      	str	r2, [r3, #4]
  return 0;
 800430a:	2300      	movs	r3, #0
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}

08004314 <_isatty>:

int _isatty(int file)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800431c:	2301      	movs	r3, #1
}
 800431e:	0018      	movs	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	b002      	add	sp, #8
 8004324:	bd80      	pop	{r7, pc}

08004326 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004332:	2300      	movs	r3, #0
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	b004      	add	sp, #16
 800433a:	bd80      	pop	{r7, pc}

0800433c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004344:	4a14      	ldr	r2, [pc, #80]	@ (8004398 <_sbrk+0x5c>)
 8004346:	4b15      	ldr	r3, [pc, #84]	@ (800439c <_sbrk+0x60>)
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004350:	4b13      	ldr	r3, [pc, #76]	@ (80043a0 <_sbrk+0x64>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d102      	bne.n	800435e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004358:	4b11      	ldr	r3, [pc, #68]	@ (80043a0 <_sbrk+0x64>)
 800435a:	4a12      	ldr	r2, [pc, #72]	@ (80043a4 <_sbrk+0x68>)
 800435c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800435e:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <_sbrk+0x64>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	18d3      	adds	r3, r2, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	429a      	cmp	r2, r3
 800436a:	d207      	bcs.n	800437c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800436c:	f004 ff90 	bl	8009290 <__errno>
 8004370:	0003      	movs	r3, r0
 8004372:	220c      	movs	r2, #12
 8004374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004376:	2301      	movs	r3, #1
 8004378:	425b      	negs	r3, r3
 800437a:	e009      	b.n	8004390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800437c:	4b08      	ldr	r3, [pc, #32]	@ (80043a0 <_sbrk+0x64>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004382:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <_sbrk+0x64>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	18d2      	adds	r2, r2, r3
 800438a:	4b05      	ldr	r3, [pc, #20]	@ (80043a0 <_sbrk+0x64>)
 800438c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800438e:	68fb      	ldr	r3, [r7, #12]
}
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	b006      	add	sp, #24
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20002000 	.word	0x20002000
 800439c:	00000400 	.word	0x00000400
 80043a0:	200003c4 	.word	0x200003c4
 80043a4:	20000db0 	.word	0x20000db0

080043a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043ac:	46c0      	nop			@ (mov r8, r8)
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <u8g2_gpio_and_delay_stm32>:

// 定义全局u8g2对象
u8g2_t u8g2;

// 硬件适配回调函数
uint8_t u8g2_gpio_and_delay_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	0008      	movs	r0, r1
 80043be:	0011      	movs	r1, r2
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	240b      	movs	r4, #11
 80043c4:	193b      	adds	r3, r7, r4
 80043c6:	1c02      	adds	r2, r0, #0
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	200a      	movs	r0, #10
 80043cc:	183b      	adds	r3, r7, r0
 80043ce:	1c0a      	adds	r2, r1, #0
 80043d0:	701a      	strb	r2, [r3, #0]
    switch (msg) {
 80043d2:	193b      	adds	r3, r7, r4
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b4b      	cmp	r3, #75	@ 0x4b
 80043d8:	d016      	beq.n	8004408 <u8g2_gpio_and_delay_stm32+0x54>
 80043da:	dc1e      	bgt.n	800441a <u8g2_gpio_and_delay_stm32+0x66>
 80043dc:	2b4a      	cmp	r3, #74	@ 0x4a
 80043de:	d00a      	beq.n	80043f6 <u8g2_gpio_and_delay_stm32+0x42>
 80043e0:	dc1b      	bgt.n	800441a <u8g2_gpio_and_delay_stm32+0x66>
 80043e2:	2b28      	cmp	r3, #40	@ 0x28
 80043e4:	d01b      	beq.n	800441e <u8g2_gpio_and_delay_stm32+0x6a>
 80043e6:	2b29      	cmp	r3, #41	@ 0x29
 80043e8:	d117      	bne.n	800441a <u8g2_gpio_and_delay_stm32+0x66>
        case U8X8_MSG_GPIO_AND_DELAY_INIT:
            // 初始化GPIO，CubeMX已经做过了，这里可以留空
            break;
        case U8X8_MSG_DELAY_MILLI:
            // 毫秒延时
            HAL_Delay(arg_int);
 80043ea:	183b      	adds	r3, r7, r0
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f000 f922 	bl	8004638 <HAL_Delay>
            break;
 80043f4:	e014      	b.n	8004420 <u8g2_gpio_and_delay_stm32+0x6c>
        case U8X8_MSG_GPIO_DC:
            // 控制DC引脚
            HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 80043f6:	230a      	movs	r3, #10
 80043f8:	18fb      	adds	r3, r7, r3
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	480b      	ldr	r0, [pc, #44]	@ (800442c <u8g2_gpio_and_delay_stm32+0x78>)
 80043fe:	001a      	movs	r2, r3
 8004400:	2120      	movs	r1, #32
 8004402:	f000 fb9c 	bl	8004b3e <HAL_GPIO_WritePin>
            break;
 8004406:	e00b      	b.n	8004420 <u8g2_gpio_and_delay_stm32+0x6c>
        case U8X8_MSG_GPIO_RESET:
            // 控制RES引脚
            HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, arg_int);
 8004408:	230a      	movs	r3, #10
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	4807      	ldr	r0, [pc, #28]	@ (800442c <u8g2_gpio_and_delay_stm32+0x78>)
 8004410:	001a      	movs	r2, r3
 8004412:	2140      	movs	r1, #64	@ 0x40
 8004414:	f000 fb93 	bl	8004b3e <HAL_GPIO_WritePin>
            break;
 8004418:	e002      	b.n	8004420 <u8g2_gpio_and_delay_stm32+0x6c>
        // CS引脚我们是直接接地的，所以不需要控制
        // case U8X8_MSG_GPIO_CS:
        //     HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
        //     break;
        default:
            return 0; // 未处理的消息
 800441a:	2300      	movs	r3, #0
 800441c:	e001      	b.n	8004422 <u8g2_gpio_and_delay_stm32+0x6e>
            break;
 800441e:	46c0      	nop			@ (mov r8, r8)
    }
    return 1;
 8004420:	2301      	movs	r3, #1
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b005      	add	sp, #20
 8004428:	bd90      	pop	{r4, r7, pc}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	50000400 	.word	0x50000400

08004430 <u8g2_byte_spi_stm32>:

// SPI通信回调函数
uint8_t u8g2_byte_spi_stm32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8004430:	b590      	push	{r4, r7, lr}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	0008      	movs	r0, r1
 800443a:	0011      	movs	r1, r2
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	240b      	movs	r4, #11
 8004440:	193b      	adds	r3, r7, r4
 8004442:	1c02      	adds	r2, r0, #0
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	200a      	movs	r0, #10
 8004448:	183b      	adds	r3, r7, r0
 800444a:	1c0a      	adds	r2, r1, #0
 800444c:	701a      	strb	r2, [r3, #0]
    switch (msg) {
 800444e:	193b      	adds	r3, r7, r4
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b20      	cmp	r3, #32
 8004454:	d00d      	beq.n	8004472 <u8g2_byte_spi_stm32+0x42>
 8004456:	dc15      	bgt.n	8004484 <u8g2_byte_spi_stm32+0x54>
 8004458:	2b14      	cmp	r3, #20
 800445a:	d015      	beq.n	8004488 <u8g2_byte_spi_stm32+0x58>
 800445c:	2b17      	cmp	r3, #23
 800445e:	d111      	bne.n	8004484 <u8g2_byte_spi_stm32+0x54>
        case U8X8_MSG_BYTE_SEND:
            // 通过SPI发送数据
            HAL_SPI_Transmit(&hspi2, (uint8_t *)arg_ptr, arg_int, 100);
 8004460:	183b      	adds	r3, r7, r0
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	b29a      	uxth	r2, r3
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	480a      	ldr	r0, [pc, #40]	@ (8004494 <u8g2_byte_spi_stm32+0x64>)
 800446a:	2364      	movs	r3, #100	@ 0x64
 800446c:	f001 f94a 	bl	8005704 <HAL_SPI_Transmit>
            break;
 8004470:	e00b      	b.n	800448a <u8g2_byte_spi_stm32+0x5a>
        case U8X8_MSG_BYTE_INIT:
            // SPI初始化，CubeMX已经做过了，这里可以留空
            break;
        case U8X8_MSG_BYTE_SET_DC:
            // 控制DC引脚
            HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8004472:	230a      	movs	r3, #10
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4807      	ldr	r0, [pc, #28]	@ (8004498 <u8g2_byte_spi_stm32+0x68>)
 800447a:	001a      	movs	r2, r3
 800447c:	2120      	movs	r1, #32
 800447e:	f000 fb5e 	bl	8004b3e <HAL_GPIO_WritePin>
            break;
 8004482:	e002      	b.n	800448a <u8g2_byte_spi_stm32+0x5a>
        default:
            return 0; // 未处理的消息
 8004484:	2300      	movs	r3, #0
 8004486:	e001      	b.n	800448c <u8g2_byte_spi_stm32+0x5c>
            break;
 8004488:	46c0      	nop			@ (mov r8, r8)
    }
    return 1;
 800448a:	2301      	movs	r3, #1
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b005      	add	sp, #20
 8004492:	bd90      	pop	{r4, r7, pc}
 8004494:	200001f4 	.word	0x200001f4
 8004498:	50000400 	.word	0x50000400

0800449c <u8g2_Init>:

// U8g2 初始化函数
void u8g2_Init(u8g2_t *u8g2) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    // 根据你的OLED控制器选择合适的初始化函数
    // SH1107是常见的128x128 OLED控制器，如果不是，请查找你的OLED模块资料
    // u8g2_Setup_sh1107_i2c_128x128_f(u8g2, U8G2_R0, u8x8_byte_sw_i2c, u8x8_gpio_and_delay_stm32); // I2C 示例
    // 替换为下面这行
    u8g2_Setup_sh1107_seeed_128x128_f(u8g2, U8G2_R0, u8g2_byte_spi_stm32, u8g2_gpio_and_delay_stm32); // 4线SPI
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <u8g2_Init+0x30>)
 80044a6:	4a0a      	ldr	r2, [pc, #40]	@ (80044d0 <u8g2_Init+0x34>)
 80044a8:	490a      	ldr	r1, [pc, #40]	@ (80044d4 <u8g2_Init+0x38>)
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f001 ff32 	bl	8006314 <u8g2_Setup_sh1107_seeed_128x128_f>

    // 初始化U8g2
    u8g2_InitDisplay(u8g2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	0018      	movs	r0, r3
 80044b4:	f004 f857 	bl	8008566 <u8x8_InitDisplay>
    // 唤醒显示器
    u8g2_SetPowerSave(u8g2, 0);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2100      	movs	r1, #0
 80044bc:	0018      	movs	r0, r3
 80044be:	f004 f861 	bl	8008584 <u8x8_SetPowerSave>
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b002      	add	sp, #8
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	080043b5 	.word	0x080043b5
 80044d0:	08004431 	.word	0x08004431
 80044d4:	0800ce04 	.word	0x0800ce04

080044d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044d8:	480d      	ldr	r0, [pc, #52]	@ (8004510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80044dc:	f7ff ff64 	bl	80043a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044e0:	480c      	ldr	r0, [pc, #48]	@ (8004514 <LoopForever+0x6>)
  ldr r1, =_edata
 80044e2:	490d      	ldr	r1, [pc, #52]	@ (8004518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044e4:	4a0d      	ldr	r2, [pc, #52]	@ (800451c <LoopForever+0xe>)
  movs r3, #0
 80044e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044e8:	e002      	b.n	80044f0 <LoopCopyDataInit>

080044ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ee:	3304      	adds	r3, #4

080044f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f4:	d3f9      	bcc.n	80044ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004524 <LoopForever+0x16>)
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044fc:	e001      	b.n	8004502 <LoopFillZerobss>

080044fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004500:	3204      	adds	r2, #4

08004502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004504:	d3fb      	bcc.n	80044fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004506:	f004 fec9 	bl	800929c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800450a:	f7ff f817 	bl	800353c <main>

0800450e <LoopForever>:

LoopForever:
  b LoopForever
 800450e:	e7fe      	b.n	800450e <LoopForever>
  ldr   r0, =_estack
 8004510:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004518:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800451c:	0800d3e8 	.word	0x0800d3e8
  ldr r2, =_sbss
 8004520:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004524:	20000dac 	.word	0x20000dac

08004528 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004528:	e7fe      	b.n	8004528 <ADC1_IRQHandler>
	...

0800452c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004538:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <HAL_Init+0x3c>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b0a      	ldr	r3, [pc, #40]	@ (8004568 <HAL_Init+0x3c>)
 800453e:	2180      	movs	r1, #128	@ 0x80
 8004540:	0049      	lsls	r1, r1, #1
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004546:	2003      	movs	r0, #3
 8004548:	f000 f810 	bl	800456c <HAL_InitTick>
 800454c:	1e03      	subs	r3, r0, #0
 800454e:	d003      	beq.n	8004558 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e001      	b.n	800455c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004558:	f7ff fd38 	bl	8003fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	781b      	ldrb	r3, [r3, #0]
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40022000 	.word	0x40022000

0800456c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004574:	230f      	movs	r3, #15
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800457c:	4b1d      	ldr	r3, [pc, #116]	@ (80045f4 <HAL_InitTick+0x88>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d02b      	beq.n	80045dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004584:	4b1c      	ldr	r3, [pc, #112]	@ (80045f8 <HAL_InitTick+0x8c>)
 8004586:	681c      	ldr	r4, [r3, #0]
 8004588:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <HAL_InitTick+0x88>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	0019      	movs	r1, r3
 800458e:	23fa      	movs	r3, #250	@ 0xfa
 8004590:	0098      	lsls	r0, r3, #2
 8004592:	f7fb fdd3 	bl	800013c <__udivsi3>
 8004596:	0003      	movs	r3, r0
 8004598:	0019      	movs	r1, r3
 800459a:	0020      	movs	r0, r4
 800459c:	f7fb fdce 	bl	800013c <__udivsi3>
 80045a0:	0003      	movs	r3, r0
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 f93d 	bl	8004822 <HAL_SYSTICK_Config>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d112      	bne.n	80045d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d80a      	bhi.n	80045c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	2301      	movs	r3, #1
 80045b6:	425b      	negs	r3, r3
 80045b8:	2200      	movs	r2, #0
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 f90c 	bl	80047d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045c0:	4b0e      	ldr	r3, [pc, #56]	@ (80045fc <HAL_InitTick+0x90>)
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	e00d      	b.n	80045e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80045c8:	230f      	movs	r3, #15
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	2201      	movs	r2, #1
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e008      	b.n	80045e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80045d2:	230f      	movs	r3, #15
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e003      	b.n	80045e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80045dc:	230f      	movs	r3, #15
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80045e4:	230f      	movs	r3, #15
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	781b      	ldrb	r3, [r3, #0]
}
 80045ea:	0018      	movs	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b005      	add	sp, #20
 80045f0:	bd90      	pop	{r4, r7, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	2000000c 	.word	0x2000000c
 80045f8:	20000004 	.word	0x20000004
 80045fc:	20000008 	.word	0x20000008

08004600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004604:	4b05      	ldr	r3, [pc, #20]	@ (800461c <HAL_IncTick+0x1c>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	001a      	movs	r2, r3
 800460a:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <HAL_IncTick+0x20>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	18d2      	adds	r2, r2, r3
 8004610:	4b03      	ldr	r3, [pc, #12]	@ (8004620 <HAL_IncTick+0x20>)
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	46c0      	nop			@ (mov r8, r8)
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	2000000c 	.word	0x2000000c
 8004620:	2000045c 	.word	0x2000045c

08004624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  return uwTick;
 8004628:	4b02      	ldr	r3, [pc, #8]	@ (8004634 <HAL_GetTick+0x10>)
 800462a:	681b      	ldr	r3, [r3, #0]
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	2000045c 	.word	0x2000045c

08004638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004640:	f7ff fff0 	bl	8004624 <HAL_GetTick>
 8004644:	0003      	movs	r3, r0
 8004646:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3301      	adds	r3, #1
 8004650:	d005      	beq.n	800465e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004652:	4b0a      	ldr	r3, [pc, #40]	@ (800467c <HAL_Delay+0x44>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	001a      	movs	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	189b      	adds	r3, r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	f7ff ffe0 	bl	8004624 <HAL_GetTick>
 8004664:	0002      	movs	r2, r0
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	429a      	cmp	r2, r3
 800466e:	d8f7      	bhi.n	8004660 <HAL_Delay+0x28>
  {
  }
}
 8004670:	46c0      	nop			@ (mov r8, r8)
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b004      	add	sp, #16
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	2000000c 	.word	0x2000000c

08004680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	0002      	movs	r2, r0
 8004688:	1dfb      	adds	r3, r7, #7
 800468a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800468c:	1dfb      	adds	r3, r7, #7
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b7f      	cmp	r3, #127	@ 0x7f
 8004692:	d809      	bhi.n	80046a8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004694:	1dfb      	adds	r3, r7, #7
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	001a      	movs	r2, r3
 800469a:	231f      	movs	r3, #31
 800469c:	401a      	ands	r2, r3
 800469e:	4b04      	ldr	r3, [pc, #16]	@ (80046b0 <__NVIC_EnableIRQ+0x30>)
 80046a0:	2101      	movs	r1, #1
 80046a2:	4091      	lsls	r1, r2
 80046a4:	000a      	movs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80046a8:	46c0      	nop			@ (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	0002      	movs	r2, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	1dfb      	adds	r3, r7, #7
 80046c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80046c2:	1dfb      	adds	r3, r7, #7
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80046c8:	d828      	bhi.n	800471c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004788 <__NVIC_SetPriority+0xd4>)
 80046cc:	1dfb      	adds	r3, r7, #7
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b25b      	sxtb	r3, r3
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	33c0      	adds	r3, #192	@ 0xc0
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	589b      	ldr	r3, [r3, r2]
 80046da:	1dfa      	adds	r2, r7, #7
 80046dc:	7812      	ldrb	r2, [r2, #0]
 80046de:	0011      	movs	r1, r2
 80046e0:	2203      	movs	r2, #3
 80046e2:	400a      	ands	r2, r1
 80046e4:	00d2      	lsls	r2, r2, #3
 80046e6:	21ff      	movs	r1, #255	@ 0xff
 80046e8:	4091      	lsls	r1, r2
 80046ea:	000a      	movs	r2, r1
 80046ec:	43d2      	mvns	r2, r2
 80046ee:	401a      	ands	r2, r3
 80046f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	22ff      	movs	r2, #255	@ 0xff
 80046f8:	401a      	ands	r2, r3
 80046fa:	1dfb      	adds	r3, r7, #7
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	0018      	movs	r0, r3
 8004700:	2303      	movs	r3, #3
 8004702:	4003      	ands	r3, r0
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004708:	481f      	ldr	r0, [pc, #124]	@ (8004788 <__NVIC_SetPriority+0xd4>)
 800470a:	1dfb      	adds	r3, r7, #7
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	b25b      	sxtb	r3, r3
 8004710:	089b      	lsrs	r3, r3, #2
 8004712:	430a      	orrs	r2, r1
 8004714:	33c0      	adds	r3, #192	@ 0xc0
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800471a:	e031      	b.n	8004780 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800471c:	4a1b      	ldr	r2, [pc, #108]	@ (800478c <__NVIC_SetPriority+0xd8>)
 800471e:	1dfb      	adds	r3, r7, #7
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	0019      	movs	r1, r3
 8004724:	230f      	movs	r3, #15
 8004726:	400b      	ands	r3, r1
 8004728:	3b08      	subs	r3, #8
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	3306      	adds	r3, #6
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	18d3      	adds	r3, r2, r3
 8004732:	3304      	adds	r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	1dfa      	adds	r2, r7, #7
 8004738:	7812      	ldrb	r2, [r2, #0]
 800473a:	0011      	movs	r1, r2
 800473c:	2203      	movs	r2, #3
 800473e:	400a      	ands	r2, r1
 8004740:	00d2      	lsls	r2, r2, #3
 8004742:	21ff      	movs	r1, #255	@ 0xff
 8004744:	4091      	lsls	r1, r2
 8004746:	000a      	movs	r2, r1
 8004748:	43d2      	mvns	r2, r2
 800474a:	401a      	ands	r2, r3
 800474c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	019b      	lsls	r3, r3, #6
 8004752:	22ff      	movs	r2, #255	@ 0xff
 8004754:	401a      	ands	r2, r3
 8004756:	1dfb      	adds	r3, r7, #7
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	0018      	movs	r0, r3
 800475c:	2303      	movs	r3, #3
 800475e:	4003      	ands	r3, r0
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004764:	4809      	ldr	r0, [pc, #36]	@ (800478c <__NVIC_SetPriority+0xd8>)
 8004766:	1dfb      	adds	r3, r7, #7
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	001c      	movs	r4, r3
 800476c:	230f      	movs	r3, #15
 800476e:	4023      	ands	r3, r4
 8004770:	3b08      	subs	r3, #8
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	430a      	orrs	r2, r1
 8004776:	3306      	adds	r3, #6
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	18c3      	adds	r3, r0, r3
 800477c:	3304      	adds	r3, #4
 800477e:	601a      	str	r2, [r3, #0]
}
 8004780:	46c0      	nop			@ (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b003      	add	sp, #12
 8004786:	bd90      	pop	{r4, r7, pc}
 8004788:	e000e100 	.word	0xe000e100
 800478c:	e000ed00 	.word	0xe000ed00

08004790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	1e5a      	subs	r2, r3, #1
 800479c:	2380      	movs	r3, #128	@ 0x80
 800479e:	045b      	lsls	r3, r3, #17
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d301      	bcc.n	80047a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047a4:	2301      	movs	r3, #1
 80047a6:	e010      	b.n	80047ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047a8:	4b0a      	ldr	r3, [pc, #40]	@ (80047d4 <SysTick_Config+0x44>)
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	3a01      	subs	r2, #1
 80047ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047b0:	2301      	movs	r3, #1
 80047b2:	425b      	negs	r3, r3
 80047b4:	2103      	movs	r1, #3
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7ff ff7c 	bl	80046b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <SysTick_Config+0x44>)
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047c2:	4b04      	ldr	r3, [pc, #16]	@ (80047d4 <SysTick_Config+0x44>)
 80047c4:	2207      	movs	r2, #7
 80047c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	0018      	movs	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b002      	add	sp, #8
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	e000e010 	.word	0xe000e010

080047d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	210f      	movs	r1, #15
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	1c02      	adds	r2, r0, #0
 80047e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	187b      	adds	r3, r7, r1
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	b25b      	sxtb	r3, r3
 80047f2:	0011      	movs	r1, r2
 80047f4:	0018      	movs	r0, r3
 80047f6:	f7ff ff5d 	bl	80046b4 <__NVIC_SetPriority>
}
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b004      	add	sp, #16
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	0002      	movs	r2, r0
 800480a:	1dfb      	adds	r3, r7, #7
 800480c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800480e:	1dfb      	adds	r3, r7, #7
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b25b      	sxtb	r3, r3
 8004814:	0018      	movs	r0, r3
 8004816:	f7ff ff33 	bl	8004680 <__NVIC_EnableIRQ>
}
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	46bd      	mov	sp, r7
 800481e:	b002      	add	sp, #8
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0018      	movs	r0, r3
 800482e:	f7ff ffaf 	bl	8004790 <SysTick_Config>
 8004832:	0003      	movs	r3, r0
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b002      	add	sp, #8
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800484a:	e147      	b.n	8004adc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2101      	movs	r1, #1
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4091      	lsls	r1, r2
 8004856:	000a      	movs	r2, r1
 8004858:	4013      	ands	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d100      	bne.n	8004864 <HAL_GPIO_Init+0x28>
 8004862:	e138      	b.n	8004ad6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2203      	movs	r2, #3
 800486a:	4013      	ands	r3, r2
 800486c:	2b01      	cmp	r3, #1
 800486e:	d005      	beq.n	800487c <HAL_GPIO_Init+0x40>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2203      	movs	r2, #3
 8004876:	4013      	ands	r3, r2
 8004878:	2b02      	cmp	r3, #2
 800487a:	d130      	bne.n	80048de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2203      	movs	r2, #3
 8004888:	409a      	lsls	r2, r3
 800488a:	0013      	movs	r3, r2
 800488c:	43da      	mvns	r2, r3
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	409a      	lsls	r2, r3
 800489e:	0013      	movs	r3, r2
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048b2:	2201      	movs	r2, #1
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	409a      	lsls	r2, r3
 80048b8:	0013      	movs	r3, r2
 80048ba:	43da      	mvns	r2, r3
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	2201      	movs	r2, #1
 80048ca:	401a      	ands	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	409a      	lsls	r2, r3
 80048d0:	0013      	movs	r3, r2
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2203      	movs	r2, #3
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d017      	beq.n	800491a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	2203      	movs	r2, #3
 80048f6:	409a      	lsls	r2, r3
 80048f8:	0013      	movs	r3, r2
 80048fa:	43da      	mvns	r2, r3
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4013      	ands	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	409a      	lsls	r2, r3
 800490c:	0013      	movs	r3, r2
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2203      	movs	r2, #3
 8004920:	4013      	ands	r3, r2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d123      	bne.n	800496e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	08da      	lsrs	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3208      	adds	r2, #8
 800492e:	0092      	lsls	r2, r2, #2
 8004930:	58d3      	ldr	r3, [r2, r3]
 8004932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2207      	movs	r2, #7
 8004938:	4013      	ands	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	220f      	movs	r2, #15
 800493e:	409a      	lsls	r2, r3
 8004940:	0013      	movs	r3, r2
 8004942:	43da      	mvns	r2, r3
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4013      	ands	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2107      	movs	r1, #7
 8004952:	400b      	ands	r3, r1
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	409a      	lsls	r2, r3
 8004958:	0013      	movs	r3, r2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	08da      	lsrs	r2, r3, #3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3208      	adds	r2, #8
 8004968:	0092      	lsls	r2, r2, #2
 800496a:	6939      	ldr	r1, [r7, #16]
 800496c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	2203      	movs	r2, #3
 800497a:	409a      	lsls	r2, r3
 800497c:	0013      	movs	r3, r2
 800497e:	43da      	mvns	r2, r3
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4013      	ands	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2203      	movs	r2, #3
 800498c:	401a      	ands	r2, r3
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	409a      	lsls	r2, r3
 8004994:	0013      	movs	r3, r2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	23c0      	movs	r3, #192	@ 0xc0
 80049a8:	029b      	lsls	r3, r3, #10
 80049aa:	4013      	ands	r3, r2
 80049ac:	d100      	bne.n	80049b0 <HAL_GPIO_Init+0x174>
 80049ae:	e092      	b.n	8004ad6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80049b0:	4a50      	ldr	r2, [pc, #320]	@ (8004af4 <HAL_GPIO_Init+0x2b8>)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	3318      	adds	r3, #24
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	589b      	ldr	r3, [r3, r2]
 80049bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2203      	movs	r2, #3
 80049c2:	4013      	ands	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	220f      	movs	r2, #15
 80049c8:	409a      	lsls	r2, r3
 80049ca:	0013      	movs	r3, r2
 80049cc:	43da      	mvns	r2, r3
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4013      	ands	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	23a0      	movs	r3, #160	@ 0xa0
 80049d8:	05db      	lsls	r3, r3, #23
 80049da:	429a      	cmp	r2, r3
 80049dc:	d013      	beq.n	8004a06 <HAL_GPIO_Init+0x1ca>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a45      	ldr	r2, [pc, #276]	@ (8004af8 <HAL_GPIO_Init+0x2bc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00d      	beq.n	8004a02 <HAL_GPIO_Init+0x1c6>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a44      	ldr	r2, [pc, #272]	@ (8004afc <HAL_GPIO_Init+0x2c0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d007      	beq.n	80049fe <HAL_GPIO_Init+0x1c2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a43      	ldr	r2, [pc, #268]	@ (8004b00 <HAL_GPIO_Init+0x2c4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d101      	bne.n	80049fa <HAL_GPIO_Init+0x1be>
 80049f6:	2303      	movs	r3, #3
 80049f8:	e006      	b.n	8004a08 <HAL_GPIO_Init+0x1cc>
 80049fa:	2305      	movs	r3, #5
 80049fc:	e004      	b.n	8004a08 <HAL_GPIO_Init+0x1cc>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e002      	b.n	8004a08 <HAL_GPIO_Init+0x1cc>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <HAL_GPIO_Init+0x1cc>
 8004a06:	2300      	movs	r3, #0
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	2103      	movs	r1, #3
 8004a0c:	400a      	ands	r2, r1
 8004a0e:	00d2      	lsls	r2, r2, #3
 8004a10:	4093      	lsls	r3, r2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004a18:	4936      	ldr	r1, [pc, #216]	@ (8004af4 <HAL_GPIO_Init+0x2b8>)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	089b      	lsrs	r3, r3, #2
 8004a1e:	3318      	adds	r3, #24
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a26:	4b33      	ldr	r3, [pc, #204]	@ (8004af4 <HAL_GPIO_Init+0x2b8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	2380      	movs	r3, #128	@ 0x80
 8004a3c:	035b      	lsls	r3, r3, #13
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004af4 <HAL_GPIO_Init+0x2b8>)
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004a50:	4b28      	ldr	r3, [pc, #160]	@ (8004af4 <HAL_GPIO_Init+0x2b8>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	039b      	lsls	r3, r3, #14
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a74:	4b1f      	ldr	r3, [pc, #124]	@ (8004af4 <HAL_GPIO_Init+0x2b8>)
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004af4 <HAL_GPIO_Init+0x2b8>)
 8004a7c:	2384      	movs	r3, #132	@ 0x84
 8004a7e:	58d3      	ldr	r3, [r2, r3]
 8004a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	43da      	mvns	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	2380      	movs	r3, #128	@ 0x80
 8004a92:	029b      	lsls	r3, r3, #10
 8004a94:	4013      	ands	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004aa0:	4914      	ldr	r1, [pc, #80]	@ (8004af4 <HAL_GPIO_Init+0x2b8>)
 8004aa2:	2284      	movs	r2, #132	@ 0x84
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004aa8:	4a12      	ldr	r2, [pc, #72]	@ (8004af4 <HAL_GPIO_Init+0x2b8>)
 8004aaa:	2380      	movs	r3, #128	@ 0x80
 8004aac:	58d3      	ldr	r3, [r2, r3]
 8004aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	2380      	movs	r3, #128	@ 0x80
 8004ac0:	025b      	lsls	r3, r3, #9
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d003      	beq.n	8004ace <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ace:	4909      	ldr	r1, [pc, #36]	@ (8004af4 <HAL_GPIO_Init+0x2b8>)
 8004ad0:	2280      	movs	r2, #128	@ 0x80
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	40da      	lsrs	r2, r3
 8004ae4:	1e13      	subs	r3, r2, #0
 8004ae6:	d000      	beq.n	8004aea <HAL_GPIO_Init+0x2ae>
 8004ae8:	e6b0      	b.n	800484c <HAL_GPIO_Init+0x10>
  }
}
 8004aea:	46c0      	nop			@ (mov r8, r8)
 8004aec:	46c0      	nop			@ (mov r8, r8)
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b006      	add	sp, #24
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40021800 	.word	0x40021800
 8004af8:	50000400 	.word	0x50000400
 8004afc:	50000800 	.word	0x50000800
 8004b00:	50000c00 	.word	0x50000c00

08004b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	000a      	movs	r2, r1
 8004b0e:	1cbb      	adds	r3, r7, #2
 8004b10:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	1cba      	adds	r2, r7, #2
 8004b18:	8812      	ldrh	r2, [r2, #0]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004b1e:	230f      	movs	r3, #15
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	e003      	b.n	8004b30 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b28:	230f      	movs	r3, #15
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004b30:	230f      	movs	r3, #15
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	781b      	ldrb	r3, [r3, #0]
}
 8004b36:	0018      	movs	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b004      	add	sp, #16
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	0008      	movs	r0, r1
 8004b48:	0011      	movs	r1, r2
 8004b4a:	1cbb      	adds	r3, r7, #2
 8004b4c:	1c02      	adds	r2, r0, #0
 8004b4e:	801a      	strh	r2, [r3, #0]
 8004b50:	1c7b      	adds	r3, r7, #1
 8004b52:	1c0a      	adds	r2, r1, #0
 8004b54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b56:	1c7b      	adds	r3, r7, #1
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b5e:	1cbb      	adds	r3, r7, #2
 8004b60:	881a      	ldrh	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b66:	e003      	b.n	8004b70 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b68:	1cbb      	adds	r3, r7, #2
 8004b6a:	881a      	ldrh	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b70:	46c0      	nop			@ (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	0002      	movs	r2, r0
 8004b80:	1dbb      	adds	r3, r7, #6
 8004b82:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004b84:	4b10      	ldr	r3, [pc, #64]	@ (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	1dba      	adds	r2, r7, #6
 8004b8a:	8812      	ldrh	r2, [r2, #0]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d008      	beq.n	8004ba2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004b90:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b92:	1dba      	adds	r2, r7, #6
 8004b94:	8812      	ldrh	r2, [r2, #0]
 8004b96:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004b98:	1dbb      	adds	r3, r7, #6
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7ff fae5 	bl	800416c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004ba2:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	1dba      	adds	r2, r7, #6
 8004ba8:	8812      	ldrh	r2, [r2, #0]
 8004baa:	4013      	ands	r3, r2
 8004bac:	d008      	beq.n	8004bc0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004bae:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004bb0:	1dba      	adds	r2, r7, #6
 8004bb2:	8812      	ldrh	r2, [r2, #0]
 8004bb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004bb6:	1dbb      	adds	r3, r7, #6
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f7ff fae0 	bl	8004180 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004bc0:	46c0      	nop			@ (mov r8, r8)
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b002      	add	sp, #8
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021800 	.word	0x40021800

08004bcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004bd4:	4b19      	ldr	r3, [pc, #100]	@ (8004c3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a19      	ldr	r2, [pc, #100]	@ (8004c40 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	0019      	movs	r1, r3
 8004bde:	4b17      	ldr	r3, [pc, #92]	@ (8004c3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	2380      	movs	r3, #128	@ 0x80
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d11f      	bne.n	8004c30 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004bf0:	4b14      	ldr	r3, [pc, #80]	@ (8004c44 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	0013      	movs	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4912      	ldr	r1, [pc, #72]	@ (8004c48 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f7fb fa9c 	bl	800013c <__udivsi3>
 8004c04:	0003      	movs	r3, r0
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c0a:	e008      	b.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e001      	b.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e009      	b.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c1e:	4b07      	ldr	r3, [pc, #28]	@ (8004c3c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	2380      	movs	r3, #128	@ 0x80
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	401a      	ands	r2, r3
 8004c28:	2380      	movs	r3, #128	@ 0x80
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d0ed      	beq.n	8004c0c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	0018      	movs	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b004      	add	sp, #16
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	fffff9ff 	.word	0xfffff9ff
 8004c44:	20000004 	.word	0x20000004
 8004c48:	000f4240 	.word	0x000f4240

08004c4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e2fe      	b.n	800525c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2201      	movs	r2, #1
 8004c64:	4013      	ands	r3, r2
 8004c66:	d100      	bne.n	8004c6a <HAL_RCC_OscConfig+0x1e>
 8004c68:	e07c      	b.n	8004d64 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c6a:	4bc3      	ldr	r3, [pc, #780]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2238      	movs	r2, #56	@ 0x38
 8004c70:	4013      	ands	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c74:	4bc0      	ldr	r3, [pc, #768]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2203      	movs	r2, #3
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d102      	bne.n	8004c8a <HAL_RCC_OscConfig+0x3e>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d002      	beq.n	8004c90 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d10b      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c90:	4bb9      	ldr	r3, [pc, #740]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	2380      	movs	r3, #128	@ 0x80
 8004c96:	029b      	lsls	r3, r3, #10
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d062      	beq.n	8004d62 <HAL_RCC_OscConfig+0x116>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d15e      	bne.n	8004d62 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e2d9      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	2380      	movs	r3, #128	@ 0x80
 8004cae:	025b      	lsls	r3, r3, #9
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d107      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x78>
 8004cb4:	4bb0      	ldr	r3, [pc, #704]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4baf      	ldr	r3, [pc, #700]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004cba:	2180      	movs	r1, #128	@ 0x80
 8004cbc:	0249      	lsls	r1, r1, #9
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e020      	b.n	8004d06 <HAL_RCC_OscConfig+0xba>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	23a0      	movs	r3, #160	@ 0xa0
 8004cca:	02db      	lsls	r3, r3, #11
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d10e      	bne.n	8004cee <HAL_RCC_OscConfig+0xa2>
 8004cd0:	4ba9      	ldr	r3, [pc, #676]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4ba8      	ldr	r3, [pc, #672]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004cd6:	2180      	movs	r1, #128	@ 0x80
 8004cd8:	02c9      	lsls	r1, r1, #11
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	4ba6      	ldr	r3, [pc, #664]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4ba5      	ldr	r3, [pc, #660]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004ce4:	2180      	movs	r1, #128	@ 0x80
 8004ce6:	0249      	lsls	r1, r1, #9
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	e00b      	b.n	8004d06 <HAL_RCC_OscConfig+0xba>
 8004cee:	4ba2      	ldr	r3, [pc, #648]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4ba1      	ldr	r3, [pc, #644]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004cf4:	49a1      	ldr	r1, [pc, #644]	@ (8004f7c <HAL_RCC_OscConfig+0x330>)
 8004cf6:	400a      	ands	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	4b9f      	ldr	r3, [pc, #636]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004d00:	499f      	ldr	r1, [pc, #636]	@ (8004f80 <HAL_RCC_OscConfig+0x334>)
 8004d02:	400a      	ands	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d014      	beq.n	8004d38 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0e:	f7ff fc89 	bl	8004624 <HAL_GetTick>
 8004d12:	0003      	movs	r3, r0
 8004d14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d18:	f7ff fc84 	bl	8004624 <HAL_GetTick>
 8004d1c:	0002      	movs	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	@ 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e298      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2a:	4b93      	ldr	r3, [pc, #588]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	2380      	movs	r3, #128	@ 0x80
 8004d30:	029b      	lsls	r3, r3, #10
 8004d32:	4013      	ands	r3, r2
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0xcc>
 8004d36:	e015      	b.n	8004d64 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7ff fc74 	bl	8004624 <HAL_GetTick>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d42:	f7ff fc6f 	bl	8004624 <HAL_GetTick>
 8004d46:	0002      	movs	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b64      	cmp	r3, #100	@ 0x64
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e283      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d54:	4b88      	ldr	r3, [pc, #544]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	2380      	movs	r3, #128	@ 0x80
 8004d5a:	029b      	lsls	r3, r3, #10
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d1f0      	bne.n	8004d42 <HAL_RCC_OscConfig+0xf6>
 8004d60:	e000      	b.n	8004d64 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d62:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d100      	bne.n	8004d70 <HAL_RCC_OscConfig+0x124>
 8004d6e:	e099      	b.n	8004ea4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d70:	4b81      	ldr	r3, [pc, #516]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2238      	movs	r2, #56	@ 0x38
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2203      	movs	r2, #3
 8004d80:	4013      	ands	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d102      	bne.n	8004d90 <HAL_RCC_OscConfig+0x144>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d002      	beq.n	8004d96 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d135      	bne.n	8004e02 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d96:	4b78      	ldr	r3, [pc, #480]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	2380      	movs	r3, #128	@ 0x80
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d005      	beq.n	8004dae <HAL_RCC_OscConfig+0x162>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e256      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dae:	4b72      	ldr	r3, [pc, #456]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4a74      	ldr	r2, [pc, #464]	@ (8004f84 <HAL_RCC_OscConfig+0x338>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	0019      	movs	r1, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	021a      	lsls	r2, r3, #8
 8004dbe:	4b6e      	ldr	r3, [pc, #440]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d112      	bne.n	8004df0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004dca:	4b6b      	ldr	r3, [pc, #428]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6e      	ldr	r2, [pc, #440]	@ (8004f88 <HAL_RCC_OscConfig+0x33c>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	0019      	movs	r1, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	4b67      	ldr	r3, [pc, #412]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004dde:	4b66      	ldr	r3, [pc, #408]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	0adb      	lsrs	r3, r3, #11
 8004de4:	2207      	movs	r2, #7
 8004de6:	4013      	ands	r3, r2
 8004de8:	4a68      	ldr	r2, [pc, #416]	@ (8004f8c <HAL_RCC_OscConfig+0x340>)
 8004dea:	40da      	lsrs	r2, r3
 8004dec:	4b68      	ldr	r3, [pc, #416]	@ (8004f90 <HAL_RCC_OscConfig+0x344>)
 8004dee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004df0:	4b68      	ldr	r3, [pc, #416]	@ (8004f94 <HAL_RCC_OscConfig+0x348>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff fbb9 	bl	800456c <HAL_InitTick>
 8004dfa:	1e03      	subs	r3, r0, #0
 8004dfc:	d051      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e22c      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d030      	beq.n	8004e6c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004f88 <HAL_RCC_OscConfig+0x33c>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	0019      	movs	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	4b57      	ldr	r3, [pc, #348]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004e1e:	4b56      	ldr	r3, [pc, #344]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b55      	ldr	r3, [pc, #340]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004e24:	2180      	movs	r1, #128	@ 0x80
 8004e26:	0049      	lsls	r1, r1, #1
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7ff fbfa 	bl	8004624 <HAL_GetTick>
 8004e30:	0003      	movs	r3, r0
 8004e32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e36:	f7ff fbf5 	bl	8004624 <HAL_GetTick>
 8004e3a:	0002      	movs	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e209      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e48:	4b4b      	ldr	r3, [pc, #300]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4013      	ands	r3, r2
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	4b48      	ldr	r3, [pc, #288]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4a4a      	ldr	r2, [pc, #296]	@ (8004f84 <HAL_RCC_OscConfig+0x338>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	021a      	lsls	r2, r3, #8
 8004e64:	4b44      	ldr	r3, [pc, #272]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	e01b      	b.n	8004ea4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004e6c:	4b42      	ldr	r3, [pc, #264]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	4b41      	ldr	r3, [pc, #260]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004e72:	4949      	ldr	r1, [pc, #292]	@ (8004f98 <HAL_RCC_OscConfig+0x34c>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7ff fbd4 	bl	8004624 <HAL_GetTick>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e82:	f7ff fbcf 	bl	8004624 <HAL_GetTick>
 8004e86:	0002      	movs	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e1e3      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e94:	4b38      	ldr	r3, [pc, #224]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	2380      	movs	r3, #128	@ 0x80
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d1f0      	bne.n	8004e82 <HAL_RCC_OscConfig+0x236>
 8004ea0:	e000      	b.n	8004ea4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ea2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d047      	beq.n	8004f3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004eae:	4b32      	ldr	r3, [pc, #200]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2238      	movs	r2, #56	@ 0x38
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	2b18      	cmp	r3, #24
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004eba:	4b2f      	ldr	r3, [pc, #188]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d03c      	beq.n	8004f3e <HAL_RCC_OscConfig+0x2f2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d138      	bne.n	8004f3e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e1c5      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d019      	beq.n	8004f0c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004ed8:	4b27      	ldr	r3, [pc, #156]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004eda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004edc:	4b26      	ldr	r3, [pc, #152]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004ede:	2101      	movs	r1, #1
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7ff fb9e 	bl	8004624 <HAL_GetTick>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eee:	f7ff fb99 	bl	8004624 <HAL_GetTick>
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e1ad      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f00:	4b1d      	ldr	r3, [pc, #116]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f04:	2202      	movs	r2, #2
 8004f06:	4013      	ands	r3, r2
 8004f08:	d0f1      	beq.n	8004eee <HAL_RCC_OscConfig+0x2a2>
 8004f0a:	e018      	b.n	8004f3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004f0e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f10:	4b19      	ldr	r3, [pc, #100]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004f12:	2101      	movs	r1, #1
 8004f14:	438a      	bics	r2, r1
 8004f16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7ff fb84 	bl	8004624 <HAL_GetTick>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f22:	f7ff fb7f 	bl	8004624 <HAL_GetTick>
 8004f26:	0002      	movs	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e193      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f34:	4b10      	ldr	r3, [pc, #64]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f38:	2202      	movs	r2, #2
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d1f1      	bne.n	8004f22 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2204      	movs	r2, #4
 8004f44:	4013      	ands	r3, r2
 8004f46:	d100      	bne.n	8004f4a <HAL_RCC_OscConfig+0x2fe>
 8004f48:	e0c6      	b.n	80050d8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4a:	231f      	movs	r3, #31
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	2200      	movs	r2, #0
 8004f50:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004f52:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2238      	movs	r2, #56	@ 0x38
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d11e      	bne.n	8004f9c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004f5e:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <HAL_RCC_OscConfig+0x32c>)
 8004f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f62:	2202      	movs	r2, #2
 8004f64:	4013      	ands	r3, r2
 8004f66:	d100      	bne.n	8004f6a <HAL_RCC_OscConfig+0x31e>
 8004f68:	e0b6      	b.n	80050d8 <HAL_RCC_OscConfig+0x48c>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d000      	beq.n	8004f74 <HAL_RCC_OscConfig+0x328>
 8004f72:	e0b1      	b.n	80050d8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e171      	b.n	800525c <HAL_RCC_OscConfig+0x610>
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	fffeffff 	.word	0xfffeffff
 8004f80:	fffbffff 	.word	0xfffbffff
 8004f84:	ffff80ff 	.word	0xffff80ff
 8004f88:	ffffc7ff 	.word	0xffffc7ff
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	20000004 	.word	0x20000004
 8004f94:	20000008 	.word	0x20000008
 8004f98:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f9c:	4bb1      	ldr	r3, [pc, #708]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8004f9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fa0:	2380      	movs	r3, #128	@ 0x80
 8004fa2:	055b      	lsls	r3, r3, #21
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d101      	bne.n	8004fac <HAL_RCC_OscConfig+0x360>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x362>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d011      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004fb2:	4bac      	ldr	r3, [pc, #688]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8004fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb6:	4bab      	ldr	r3, [pc, #684]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8004fb8:	2180      	movs	r1, #128	@ 0x80
 8004fba:	0549      	lsls	r1, r1, #21
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fc0:	4ba8      	ldr	r3, [pc, #672]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8004fc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fc4:	2380      	movs	r3, #128	@ 0x80
 8004fc6:	055b      	lsls	r3, r3, #21
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004fce:	231f      	movs	r3, #31
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd6:	4ba4      	ldr	r3, [pc, #656]	@ (8005268 <HAL_RCC_OscConfig+0x61c>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	2380      	movs	r3, #128	@ 0x80
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d11a      	bne.n	8005018 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe2:	4ba1      	ldr	r3, [pc, #644]	@ (8005268 <HAL_RCC_OscConfig+0x61c>)
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4ba0      	ldr	r3, [pc, #640]	@ (8005268 <HAL_RCC_OscConfig+0x61c>)
 8004fe8:	2180      	movs	r1, #128	@ 0x80
 8004fea:	0049      	lsls	r1, r1, #1
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004ff0:	f7ff fb18 	bl	8004624 <HAL_GetTick>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffa:	f7ff fb13 	bl	8004624 <HAL_GetTick>
 8004ffe:	0002      	movs	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e127      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800500c:	4b96      	ldr	r3, [pc, #600]	@ (8005268 <HAL_RCC_OscConfig+0x61c>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	4013      	ands	r3, r2
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d106      	bne.n	800502e <HAL_RCC_OscConfig+0x3e2>
 8005020:	4b90      	ldr	r3, [pc, #576]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005022:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005024:	4b8f      	ldr	r3, [pc, #572]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005026:	2101      	movs	r1, #1
 8005028:	430a      	orrs	r2, r1
 800502a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800502c:	e01c      	b.n	8005068 <HAL_RCC_OscConfig+0x41c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b05      	cmp	r3, #5
 8005034:	d10c      	bne.n	8005050 <HAL_RCC_OscConfig+0x404>
 8005036:	4b8b      	ldr	r3, [pc, #556]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005038:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800503a:	4b8a      	ldr	r3, [pc, #552]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800503c:	2104      	movs	r1, #4
 800503e:	430a      	orrs	r2, r1
 8005040:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005042:	4b88      	ldr	r3, [pc, #544]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005044:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005046:	4b87      	ldr	r3, [pc, #540]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005048:	2101      	movs	r1, #1
 800504a:	430a      	orrs	r2, r1
 800504c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800504e:	e00b      	b.n	8005068 <HAL_RCC_OscConfig+0x41c>
 8005050:	4b84      	ldr	r3, [pc, #528]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005052:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005054:	4b83      	ldr	r3, [pc, #524]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005056:	2101      	movs	r1, #1
 8005058:	438a      	bics	r2, r1
 800505a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800505c:	4b81      	ldr	r3, [pc, #516]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800505e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005060:	4b80      	ldr	r3, [pc, #512]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005062:	2104      	movs	r1, #4
 8005064:	438a      	bics	r2, r1
 8005066:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d014      	beq.n	800509a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7ff fad8 	bl	8004624 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005078:	e009      	b.n	800508e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7ff fad3 	bl	8004624 <HAL_GetTick>
 800507e:	0002      	movs	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	4a79      	ldr	r2, [pc, #484]	@ (800526c <HAL_RCC_OscConfig+0x620>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e0e6      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508e:	4b75      	ldr	r3, [pc, #468]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005092:	2202      	movs	r2, #2
 8005094:	4013      	ands	r3, r2
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x42e>
 8005098:	e013      	b.n	80050c2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509a:	f7ff fac3 	bl	8004624 <HAL_GetTick>
 800509e:	0003      	movs	r3, r0
 80050a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050a2:	e009      	b.n	80050b8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a4:	f7ff fabe 	bl	8004624 <HAL_GetTick>
 80050a8:	0002      	movs	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	4a6f      	ldr	r2, [pc, #444]	@ (800526c <HAL_RCC_OscConfig+0x620>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e0d1      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80050ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050bc:	2202      	movs	r2, #2
 80050be:	4013      	ands	r3, r2
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80050c2:	231f      	movs	r3, #31
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d105      	bne.n	80050d8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80050cc:	4b65      	ldr	r3, [pc, #404]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80050ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050d0:	4b64      	ldr	r3, [pc, #400]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80050d2:	4967      	ldr	r1, [pc, #412]	@ (8005270 <HAL_RCC_OscConfig+0x624>)
 80050d4:	400a      	ands	r2, r1
 80050d6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d100      	bne.n	80050e2 <HAL_RCC_OscConfig+0x496>
 80050e0:	e0bb      	b.n	800525a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050e2:	4b60      	ldr	r3, [pc, #384]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2238      	movs	r2, #56	@ 0x38
 80050e8:	4013      	ands	r3, r2
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d100      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4a4>
 80050ee:	e07b      	b.n	80051e8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d156      	bne.n	80051a6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b59      	ldr	r3, [pc, #356]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80050fe:	495d      	ldr	r1, [pc, #372]	@ (8005274 <HAL_RCC_OscConfig+0x628>)
 8005100:	400a      	ands	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7ff fa8e 	bl	8004624 <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510e:	f7ff fa89 	bl	8004624 <HAL_GetTick>
 8005112:	0002      	movs	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e09d      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005120:	4b50      	ldr	r3, [pc, #320]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	@ 0x80
 8005126:	049b      	lsls	r3, r3, #18
 8005128:	4013      	ands	r3, r2
 800512a:	d1f0      	bne.n	800510e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512c:	4b4d      	ldr	r3, [pc, #308]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4a51      	ldr	r2, [pc, #324]	@ (8005278 <HAL_RCC_OscConfig+0x62c>)
 8005132:	4013      	ands	r3, r2
 8005134:	0019      	movs	r1, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005158:	431a      	orrs	r2, r3
 800515a:	4b42      	ldr	r3, [pc, #264]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800515c:	430a      	orrs	r2, r1
 800515e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005160:	4b40      	ldr	r3, [pc, #256]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b3f      	ldr	r3, [pc, #252]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005166:	2180      	movs	r1, #128	@ 0x80
 8005168:	0449      	lsls	r1, r1, #17
 800516a:	430a      	orrs	r2, r1
 800516c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800516e:	4b3d      	ldr	r3, [pc, #244]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	4b3c      	ldr	r3, [pc, #240]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005174:	2180      	movs	r1, #128	@ 0x80
 8005176:	0549      	lsls	r1, r1, #21
 8005178:	430a      	orrs	r2, r1
 800517a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7ff fa52 	bl	8004624 <HAL_GetTick>
 8005180:	0003      	movs	r3, r0
 8005182:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005186:	f7ff fa4d 	bl	8004624 <HAL_GetTick>
 800518a:	0002      	movs	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e061      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005198:	4b32      	ldr	r3, [pc, #200]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	2380      	movs	r3, #128	@ 0x80
 800519e:	049b      	lsls	r3, r3, #18
 80051a0:	4013      	ands	r3, r2
 80051a2:	d0f0      	beq.n	8005186 <HAL_RCC_OscConfig+0x53a>
 80051a4:	e059      	b.n	800525a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b2e      	ldr	r3, [pc, #184]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051ac:	4931      	ldr	r1, [pc, #196]	@ (8005274 <HAL_RCC_OscConfig+0x628>)
 80051ae:	400a      	ands	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7ff fa37 	bl	8004624 <HAL_GetTick>
 80051b6:	0003      	movs	r3, r0
 80051b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051bc:	f7ff fa32 	bl	8004624 <HAL_GetTick>
 80051c0:	0002      	movs	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e046      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ce:	4b25      	ldr	r3, [pc, #148]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	2380      	movs	r3, #128	@ 0x80
 80051d4:	049b      	lsls	r3, r3, #18
 80051d6:	4013      	ands	r3, r2
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80051da:	4b22      	ldr	r3, [pc, #136]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	4b21      	ldr	r3, [pc, #132]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051e0:	4926      	ldr	r1, [pc, #152]	@ (800527c <HAL_RCC_OscConfig+0x630>)
 80051e2:	400a      	ands	r2, r1
 80051e4:	60da      	str	r2, [r3, #12]
 80051e6:	e038      	b.n	800525a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e033      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80051f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2203      	movs	r2, #3
 80051fe:	401a      	ands	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	429a      	cmp	r2, r3
 8005206:	d126      	bne.n	8005256 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2270      	movs	r2, #112	@ 0x70
 800520c:	401a      	ands	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005212:	429a      	cmp	r2, r3
 8005214:	d11f      	bne.n	8005256 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	23fe      	movs	r3, #254	@ 0xfe
 800521a:	01db      	lsls	r3, r3, #7
 800521c:	401a      	ands	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d116      	bne.n	8005256 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	23f8      	movs	r3, #248	@ 0xf8
 800522c:	039b      	lsls	r3, r3, #14
 800522e:	401a      	ands	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d10e      	bne.n	8005256 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	23e0      	movs	r3, #224	@ 0xe0
 800523c:	051b      	lsls	r3, r3, #20
 800523e:	401a      	ands	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d106      	bne.n	8005256 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	0f5b      	lsrs	r3, r3, #29
 800524c:	075a      	lsls	r2, r3, #29
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d001      	beq.n	800525a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	0018      	movs	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	b008      	add	sp, #32
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	40007000 	.word	0x40007000
 800526c:	00001388 	.word	0x00001388
 8005270:	efffffff 	.word	0xefffffff
 8005274:	feffffff 	.word	0xfeffffff
 8005278:	11c1808c 	.word	0x11c1808c
 800527c:	eefefffc 	.word	0xeefefffc

08005280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0e9      	b.n	8005468 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005294:	4b76      	ldr	r3, [pc, #472]	@ (8005470 <HAL_RCC_ClockConfig+0x1f0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2207      	movs	r2, #7
 800529a:	4013      	ands	r3, r2
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d91e      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a2:	4b73      	ldr	r3, [pc, #460]	@ (8005470 <HAL_RCC_ClockConfig+0x1f0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2207      	movs	r2, #7
 80052a8:	4393      	bics	r3, r2
 80052aa:	0019      	movs	r1, r3
 80052ac:	4b70      	ldr	r3, [pc, #448]	@ (8005470 <HAL_RCC_ClockConfig+0x1f0>)
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052b4:	f7ff f9b6 	bl	8004624 <HAL_GetTick>
 80052b8:	0003      	movs	r3, r0
 80052ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052bc:	e009      	b.n	80052d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052be:	f7ff f9b1 	bl	8004624 <HAL_GetTick>
 80052c2:	0002      	movs	r2, r0
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	4a6a      	ldr	r2, [pc, #424]	@ (8005474 <HAL_RCC_ClockConfig+0x1f4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e0ca      	b.n	8005468 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052d2:	4b67      	ldr	r3, [pc, #412]	@ (8005470 <HAL_RCC_ClockConfig+0x1f0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2207      	movs	r2, #7
 80052d8:	4013      	ands	r3, r2
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1ee      	bne.n	80052be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2202      	movs	r2, #2
 80052e6:	4013      	ands	r3, r2
 80052e8:	d015      	beq.n	8005316 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2204      	movs	r2, #4
 80052f0:	4013      	ands	r3, r2
 80052f2:	d006      	beq.n	8005302 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80052f4:	4b60      	ldr	r3, [pc, #384]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	4b5f      	ldr	r3, [pc, #380]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 80052fa:	21e0      	movs	r1, #224	@ 0xe0
 80052fc:	01c9      	lsls	r1, r1, #7
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005302:	4b5d      	ldr	r3, [pc, #372]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	4a5d      	ldr	r2, [pc, #372]	@ (800547c <HAL_RCC_ClockConfig+0x1fc>)
 8005308:	4013      	ands	r3, r2
 800530a:	0019      	movs	r1, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	4b59      	ldr	r3, [pc, #356]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 8005312:	430a      	orrs	r2, r1
 8005314:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2201      	movs	r2, #1
 800531c:	4013      	ands	r3, r2
 800531e:	d057      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d107      	bne.n	8005338 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005328:	4b53      	ldr	r3, [pc, #332]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	029b      	lsls	r3, r3, #10
 8005330:	4013      	ands	r3, r2
 8005332:	d12b      	bne.n	800538c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e097      	b.n	8005468 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d107      	bne.n	8005350 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005340:	4b4d      	ldr	r3, [pc, #308]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	2380      	movs	r3, #128	@ 0x80
 8005346:	049b      	lsls	r3, r3, #18
 8005348:	4013      	ands	r3, r2
 800534a:	d11f      	bne.n	800538c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e08b      	b.n	8005468 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005358:	4b47      	ldr	r3, [pc, #284]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4013      	ands	r3, r2
 8005362:	d113      	bne.n	800538c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e07f      	b.n	8005468 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b03      	cmp	r3, #3
 800536e:	d106      	bne.n	800537e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005370:	4b41      	ldr	r3, [pc, #260]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 8005372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005374:	2202      	movs	r2, #2
 8005376:	4013      	ands	r3, r2
 8005378:	d108      	bne.n	800538c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e074      	b.n	8005468 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537e:	4b3e      	ldr	r3, [pc, #248]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 8005380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005382:	2202      	movs	r2, #2
 8005384:	4013      	ands	r3, r2
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e06d      	b.n	8005468 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800538c:	4b3a      	ldr	r3, [pc, #232]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2207      	movs	r2, #7
 8005392:	4393      	bics	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	4b37      	ldr	r3, [pc, #220]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 800539c:	430a      	orrs	r2, r1
 800539e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a0:	f7ff f940 	bl	8004624 <HAL_GetTick>
 80053a4:	0003      	movs	r3, r0
 80053a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a8:	e009      	b.n	80053be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053aa:	f7ff f93b 	bl	8004624 <HAL_GetTick>
 80053ae:	0002      	movs	r2, r0
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005474 <HAL_RCC_ClockConfig+0x1f4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e054      	b.n	8005468 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053be:	4b2e      	ldr	r3, [pc, #184]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2238      	movs	r2, #56	@ 0x38
 80053c4:	401a      	ands	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d1ec      	bne.n	80053aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053d0:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <HAL_RCC_ClockConfig+0x1f0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2207      	movs	r2, #7
 80053d6:	4013      	ands	r3, r2
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d21e      	bcs.n	800541c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053de:	4b24      	ldr	r3, [pc, #144]	@ (8005470 <HAL_RCC_ClockConfig+0x1f0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2207      	movs	r2, #7
 80053e4:	4393      	bics	r3, r2
 80053e6:	0019      	movs	r1, r3
 80053e8:	4b21      	ldr	r3, [pc, #132]	@ (8005470 <HAL_RCC_ClockConfig+0x1f0>)
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053f0:	f7ff f918 	bl	8004624 <HAL_GetTick>
 80053f4:	0003      	movs	r3, r0
 80053f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053f8:	e009      	b.n	800540e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fa:	f7ff f913 	bl	8004624 <HAL_GetTick>
 80053fe:	0002      	movs	r2, r0
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	4a1b      	ldr	r2, [pc, #108]	@ (8005474 <HAL_RCC_ClockConfig+0x1f4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e02c      	b.n	8005468 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800540e:	4b18      	ldr	r3, [pc, #96]	@ (8005470 <HAL_RCC_ClockConfig+0x1f0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2207      	movs	r2, #7
 8005414:	4013      	ands	r3, r2
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d1ee      	bne.n	80053fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2204      	movs	r2, #4
 8005422:	4013      	ands	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005426:	4b14      	ldr	r3, [pc, #80]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <HAL_RCC_ClockConfig+0x200>)
 800542c:	4013      	ands	r3, r2
 800542e:	0019      	movs	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	4b10      	ldr	r3, [pc, #64]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 8005436:	430a      	orrs	r2, r1
 8005438:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800543a:	f000 f829 	bl	8005490 <HAL_RCC_GetSysClockFreq>
 800543e:	0001      	movs	r1, r0
 8005440:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <HAL_RCC_ClockConfig+0x1f8>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	220f      	movs	r2, #15
 8005448:	401a      	ands	r2, r3
 800544a:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <HAL_RCC_ClockConfig+0x204>)
 800544c:	0092      	lsls	r2, r2, #2
 800544e:	58d3      	ldr	r3, [r2, r3]
 8005450:	221f      	movs	r2, #31
 8005452:	4013      	ands	r3, r2
 8005454:	000a      	movs	r2, r1
 8005456:	40da      	lsrs	r2, r3
 8005458:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <HAL_RCC_ClockConfig+0x208>)
 800545a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800545c:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <HAL_RCC_ClockConfig+0x20c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	0018      	movs	r0, r3
 8005462:	f7ff f883 	bl	800456c <HAL_InitTick>
 8005466:	0003      	movs	r3, r0
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b004      	add	sp, #16
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40022000 	.word	0x40022000
 8005474:	00001388 	.word	0x00001388
 8005478:	40021000 	.word	0x40021000
 800547c:	fffff0ff 	.word	0xfffff0ff
 8005480:	ffff8fff 	.word	0xffff8fff
 8005484:	0800c564 	.word	0x0800c564
 8005488:	20000004 	.word	0x20000004
 800548c:	20000008 	.word	0x20000008

08005490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005496:	4b3c      	ldr	r3, [pc, #240]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2238      	movs	r2, #56	@ 0x38
 800549c:	4013      	ands	r3, r2
 800549e:	d10f      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80054a0:	4b39      	ldr	r3, [pc, #228]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	0adb      	lsrs	r3, r3, #11
 80054a6:	2207      	movs	r2, #7
 80054a8:	4013      	ands	r3, r2
 80054aa:	2201      	movs	r2, #1
 80054ac:	409a      	lsls	r2, r3
 80054ae:	0013      	movs	r3, r2
 80054b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	4835      	ldr	r0, [pc, #212]	@ (800558c <HAL_RCC_GetSysClockFreq+0xfc>)
 80054b6:	f7fa fe41 	bl	800013c <__udivsi3>
 80054ba:	0003      	movs	r3, r0
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e05d      	b.n	800557c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054c0:	4b31      	ldr	r3, [pc, #196]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2238      	movs	r2, #56	@ 0x38
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d102      	bne.n	80054d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054cc:	4b30      	ldr	r3, [pc, #192]	@ (8005590 <HAL_RCC_GetSysClockFreq+0x100>)
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	e054      	b.n	800557c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2238      	movs	r2, #56	@ 0x38
 80054d8:	4013      	ands	r3, r2
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d138      	bne.n	8005550 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80054de:	4b2a      	ldr	r3, [pc, #168]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2203      	movs	r2, #3
 80054e4:	4013      	ands	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054e8:	4b27      	ldr	r3, [pc, #156]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	2207      	movs	r2, #7
 80054f0:	4013      	ands	r3, r2
 80054f2:	3301      	adds	r3, #1
 80054f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d10d      	bne.n	8005518 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	4824      	ldr	r0, [pc, #144]	@ (8005590 <HAL_RCC_GetSysClockFreq+0x100>)
 8005500:	f7fa fe1c 	bl	800013c <__udivsi3>
 8005504:	0003      	movs	r3, r0
 8005506:	0019      	movs	r1, r3
 8005508:	4b1f      	ldr	r3, [pc, #124]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	0a1b      	lsrs	r3, r3, #8
 800550e:	227f      	movs	r2, #127	@ 0x7f
 8005510:	4013      	ands	r3, r2
 8005512:	434b      	muls	r3, r1
 8005514:	617b      	str	r3, [r7, #20]
        break;
 8005516:	e00d      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	481c      	ldr	r0, [pc, #112]	@ (800558c <HAL_RCC_GetSysClockFreq+0xfc>)
 800551c:	f7fa fe0e 	bl	800013c <__udivsi3>
 8005520:	0003      	movs	r3, r0
 8005522:	0019      	movs	r1, r3
 8005524:	4b18      	ldr	r3, [pc, #96]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	0a1b      	lsrs	r3, r3, #8
 800552a:	227f      	movs	r2, #127	@ 0x7f
 800552c:	4013      	ands	r3, r2
 800552e:	434b      	muls	r3, r1
 8005530:	617b      	str	r3, [r7, #20]
        break;
 8005532:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005534:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	0f5b      	lsrs	r3, r3, #29
 800553a:	2207      	movs	r2, #7
 800553c:	4013      	ands	r3, r2
 800553e:	3301      	adds	r3, #1
 8005540:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	6978      	ldr	r0, [r7, #20]
 8005546:	f7fa fdf9 	bl	800013c <__udivsi3>
 800554a:	0003      	movs	r3, r0
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e015      	b.n	800557c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005550:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2238      	movs	r2, #56	@ 0x38
 8005556:	4013      	ands	r3, r2
 8005558:	2b20      	cmp	r3, #32
 800555a:	d103      	bne.n	8005564 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800555c:	2380      	movs	r3, #128	@ 0x80
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	e00b      	b.n	800557c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005564:	4b08      	ldr	r3, [pc, #32]	@ (8005588 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2238      	movs	r2, #56	@ 0x38
 800556a:	4013      	ands	r3, r2
 800556c:	2b18      	cmp	r3, #24
 800556e:	d103      	bne.n	8005578 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005570:	23fa      	movs	r3, #250	@ 0xfa
 8005572:	01db      	lsls	r3, r3, #7
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	e001      	b.n	800557c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800557c:	693b      	ldr	r3, [r7, #16]
}
 800557e:	0018      	movs	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	b006      	add	sp, #24
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	40021000 	.word	0x40021000
 800558c:	00f42400 	.word	0x00f42400
 8005590:	007a1200 	.word	0x007a1200

08005594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e0a8      	b.n	80056f8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	2382      	movs	r3, #130	@ 0x82
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d009      	beq.n	80055ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	61da      	str	r2, [r3, #28]
 80055c0:	e005      	b.n	80055ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	225d      	movs	r2, #93	@ 0x5d
 80055d8:	5c9b      	ldrb	r3, [r3, r2]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d107      	bne.n	80055f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	225c      	movs	r2, #92	@ 0x5c
 80055e4:	2100      	movs	r1, #0
 80055e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	0018      	movs	r0, r3
 80055ec:	f7fe fd12 	bl	8004014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	225d      	movs	r2, #93	@ 0x5d
 80055f4:	2102      	movs	r1, #2
 80055f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2140      	movs	r1, #64	@ 0x40
 8005604:	438a      	bics	r2, r1
 8005606:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	23e0      	movs	r3, #224	@ 0xe0
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	429a      	cmp	r2, r3
 8005612:	d902      	bls.n	800561a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e002      	b.n	8005620 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800561a:	2380      	movs	r3, #128	@ 0x80
 800561c:	015b      	lsls	r3, r3, #5
 800561e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	23f0      	movs	r3, #240	@ 0xf0
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	429a      	cmp	r2, r3
 800562a:	d008      	beq.n	800563e <HAL_SPI_Init+0xaa>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	23e0      	movs	r3, #224	@ 0xe0
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	429a      	cmp	r2, r3
 8005636:	d002      	beq.n	800563e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	2382      	movs	r3, #130	@ 0x82
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	401a      	ands	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6899      	ldr	r1, [r3, #8]
 800564c:	2384      	movs	r3, #132	@ 0x84
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	400b      	ands	r3, r1
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	2102      	movs	r1, #2
 800565a:	400b      	ands	r3, r1
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2101      	movs	r1, #1
 8005664:	400b      	ands	r3, r1
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6999      	ldr	r1, [r3, #24]
 800566c:	2380      	movs	r3, #128	@ 0x80
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	400b      	ands	r3, r1
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	2138      	movs	r1, #56	@ 0x38
 800567a:	400b      	ands	r3, r1
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	2180      	movs	r1, #128	@ 0x80
 8005684:	400b      	ands	r3, r1
 8005686:	431a      	orrs	r2, r3
 8005688:	0011      	movs	r1, r2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800568e:	2380      	movs	r3, #128	@ 0x80
 8005690:	019b      	lsls	r3, r3, #6
 8005692:	401a      	ands	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	0c1b      	lsrs	r3, r3, #16
 80056a2:	2204      	movs	r2, #4
 80056a4:	401a      	ands	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056aa:	2110      	movs	r1, #16
 80056ac:	400b      	ands	r3, r1
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b4:	2108      	movs	r1, #8
 80056b6:	400b      	ands	r3, r1
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68d9      	ldr	r1, [r3, #12]
 80056be:	23f0      	movs	r3, #240	@ 0xf0
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	400b      	ands	r3, r1
 80056c4:	431a      	orrs	r2, r3
 80056c6:	0011      	movs	r1, r2
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	2380      	movs	r3, #128	@ 0x80
 80056cc:	015b      	lsls	r3, r3, #5
 80056ce:	401a      	ands	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69da      	ldr	r2, [r3, #28]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4907      	ldr	r1, [pc, #28]	@ (8005700 <HAL_SPI_Init+0x16c>)
 80056e4:	400a      	ands	r2, r1
 80056e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	225d      	movs	r2, #93	@ 0x5d
 80056f2:	2101      	movs	r1, #1
 80056f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	0018      	movs	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b004      	add	sp, #16
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	fffff7ff 	.word	0xfffff7ff

08005704 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	1dbb      	adds	r3, r7, #6
 8005712:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005714:	231f      	movs	r3, #31
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	225c      	movs	r2, #92	@ 0x5c
 8005720:	5c9b      	ldrb	r3, [r3, r2]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_SPI_Transmit+0x26>
 8005726:	2302      	movs	r3, #2
 8005728:	e147      	b.n	80059ba <HAL_SPI_Transmit+0x2b6>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	225c      	movs	r2, #92	@ 0x5c
 800572e:	2101      	movs	r1, #1
 8005730:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005732:	f7fe ff77 	bl	8004624 <HAL_GetTick>
 8005736:	0003      	movs	r3, r0
 8005738:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800573a:	2316      	movs	r3, #22
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	1dba      	adds	r2, r7, #6
 8005740:	8812      	ldrh	r2, [r2, #0]
 8005742:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	225d      	movs	r2, #93	@ 0x5d
 8005748:	5c9b      	ldrb	r3, [r3, r2]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d004      	beq.n	800575a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005750:	231f      	movs	r3, #31
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	2202      	movs	r2, #2
 8005756:	701a      	strb	r2, [r3, #0]
    goto error;
 8005758:	e128      	b.n	80059ac <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_SPI_Transmit+0x64>
 8005760:	1dbb      	adds	r3, r7, #6
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005768:	231f      	movs	r3, #31
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	2201      	movs	r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005770:	e11c      	b.n	80059ac <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	225d      	movs	r2, #93	@ 0x5d
 8005776:	2103      	movs	r1, #3
 8005778:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1dba      	adds	r2, r7, #6
 800578a:	8812      	ldrh	r2, [r2, #0]
 800578c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1dba      	adds	r2, r7, #6
 8005792:	8812      	ldrh	r2, [r2, #0]
 8005794:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2244      	movs	r2, #68	@ 0x44
 80057a0:	2100      	movs	r1, #0
 80057a2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2246      	movs	r2, #70	@ 0x46
 80057a8:	2100      	movs	r1, #0
 80057aa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	2380      	movs	r3, #128	@ 0x80
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d110      	bne.n	80057e6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2140      	movs	r1, #64	@ 0x40
 80057d0:	438a      	bics	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2180      	movs	r1, #128	@ 0x80
 80057e0:	01c9      	lsls	r1, r1, #7
 80057e2:	430a      	orrs	r2, r1
 80057e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2240      	movs	r2, #64	@ 0x40
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b40      	cmp	r3, #64	@ 0x40
 80057f2:	d007      	beq.n	8005804 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2140      	movs	r1, #64	@ 0x40
 8005800:	430a      	orrs	r2, r1
 8005802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	23e0      	movs	r3, #224	@ 0xe0
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	429a      	cmp	r2, r3
 800580e:	d952      	bls.n	80058b6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <HAL_SPI_Transmit+0x11e>
 8005818:	2316      	movs	r3, #22
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d143      	bne.n	80058aa <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005826:	881a      	ldrh	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005832:	1c9a      	adds	r2, r3, #2
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005846:	e030      	b.n	80058aa <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	2202      	movs	r2, #2
 8005850:	4013      	ands	r3, r2
 8005852:	2b02      	cmp	r3, #2
 8005854:	d112      	bne.n	800587c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585a:	881a      	ldrh	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005866:	1c9a      	adds	r2, r3, #2
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800587a:	e016      	b.n	80058aa <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800587c:	f7fe fed2 	bl	8004624 <HAL_GetTick>
 8005880:	0002      	movs	r2, r0
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d802      	bhi.n	8005892 <HAL_SPI_Transmit+0x18e>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	d102      	bne.n	8005898 <HAL_SPI_Transmit+0x194>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d108      	bne.n	80058aa <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005898:	231f      	movs	r3, #31
 800589a:	18fb      	adds	r3, r7, r3
 800589c:	2203      	movs	r2, #3
 800589e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	225d      	movs	r2, #93	@ 0x5d
 80058a4:	2101      	movs	r1, #1
 80058a6:	5499      	strb	r1, [r3, r2]
          goto error;
 80058a8:	e080      	b.n	80059ac <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1c9      	bne.n	8005848 <HAL_SPI_Transmit+0x144>
 80058b4:	e053      	b.n	800595e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d004      	beq.n	80058c8 <HAL_SPI_Transmit+0x1c4>
 80058be:	2316      	movs	r3, #22
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d145      	bne.n	8005954 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	330c      	adds	r3, #12
 80058d2:	7812      	ldrb	r2, [r2, #0]
 80058d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80058ee:	e031      	b.n	8005954 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2202      	movs	r2, #2
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d113      	bne.n	8005926 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	7812      	ldrb	r2, [r2, #0]
 800590a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005924:	e016      	b.n	8005954 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005926:	f7fe fe7d 	bl	8004624 <HAL_GetTick>
 800592a:	0002      	movs	r2, r0
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d802      	bhi.n	800593c <HAL_SPI_Transmit+0x238>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	3301      	adds	r3, #1
 800593a:	d102      	bne.n	8005942 <HAL_SPI_Transmit+0x23e>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d108      	bne.n	8005954 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005942:	231f      	movs	r3, #31
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	2203      	movs	r2, #3
 8005948:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	225d      	movs	r2, #93	@ 0x5d
 800594e:	2101      	movs	r1, #1
 8005950:	5499      	strb	r1, [r3, r2]
          goto error;
 8005952:	e02b      	b.n	80059ac <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1c8      	bne.n	80058f0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	0018      	movs	r0, r3
 8005966:	f000 f95d 	bl	8005c24 <SPI_EndRxTxTransaction>
 800596a:	1e03      	subs	r3, r0, #0
 800596c:	d002      	beq.n	8005974 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800597c:	2300      	movs	r3, #0
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005996:	2b00      	cmp	r3, #0
 8005998:	d004      	beq.n	80059a4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800599a:	231f      	movs	r3, #31
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	e003      	b.n	80059ac <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	225d      	movs	r2, #93	@ 0x5d
 80059a8:	2101      	movs	r1, #1
 80059aa:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	225c      	movs	r2, #92	@ 0x5c
 80059b0:	2100      	movs	r1, #0
 80059b2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80059b4:	231f      	movs	r3, #31
 80059b6:	18fb      	adds	r3, r7, r3
 80059b8:	781b      	ldrb	r3, [r3, #0]
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b008      	add	sp, #32
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	1dfb      	adds	r3, r7, #7
 80059d2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059d4:	f7fe fe26 	bl	8004624 <HAL_GetTick>
 80059d8:	0002      	movs	r2, r0
 80059da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059dc:	1a9b      	subs	r3, r3, r2
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	18d3      	adds	r3, r2, r3
 80059e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059e4:	f7fe fe1e 	bl	8004624 <HAL_GetTick>
 80059e8:	0003      	movs	r3, r0
 80059ea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059ec:	4b3a      	ldr	r3, [pc, #232]	@ (8005ad8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	015b      	lsls	r3, r3, #5
 80059f2:	0d1b      	lsrs	r3, r3, #20
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	4353      	muls	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059fa:	e058      	b.n	8005aae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	3301      	adds	r3, #1
 8005a00:	d055      	beq.n	8005aae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a02:	f7fe fe0f 	bl	8004624 <HAL_GetTick>
 8005a06:	0002      	movs	r2, r0
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d902      	bls.n	8005a18 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d142      	bne.n	8005a9e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	21e0      	movs	r1, #224	@ 0xe0
 8005a24:	438a      	bics	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	2382      	movs	r3, #130	@ 0x82
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d113      	bne.n	8005a5c <SPI_WaitFlagStateUntilTimeout+0x98>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	2380      	movs	r3, #128	@ 0x80
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d005      	beq.n	8005a4c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	2380      	movs	r3, #128	@ 0x80
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d107      	bne.n	8005a5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2140      	movs	r1, #64	@ 0x40
 8005a58:	438a      	bics	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a60:	2380      	movs	r3, #128	@ 0x80
 8005a62:	019b      	lsls	r3, r3, #6
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d110      	bne.n	8005a8a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	491a      	ldr	r1, [pc, #104]	@ (8005adc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2180      	movs	r1, #128	@ 0x80
 8005a84:	0189      	lsls	r1, r1, #6
 8005a86:	430a      	orrs	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	225d      	movs	r2, #93	@ 0x5d
 8005a8e:	2101      	movs	r1, #1
 8005a90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	225c      	movs	r2, #92	@ 0x5c
 8005a96:	2100      	movs	r1, #0
 8005a98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e017      	b.n	8005ace <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	425a      	negs	r2, r3
 8005abe:	4153      	adcs	r3, r2
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d197      	bne.n	80059fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b008      	add	sp, #32
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	20000004 	.word	0x20000004
 8005adc:	ffffdfff 	.word	0xffffdfff

08005ae0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	@ 0x28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005aee:	2317      	movs	r3, #23
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005af6:	f7fe fd95 	bl	8004624 <HAL_GetTick>
 8005afa:	0002      	movs	r2, r0
 8005afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	18d3      	adds	r3, r2, r3
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005b06:	f7fe fd8d 	bl	8004624 <HAL_GetTick>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	330c      	adds	r3, #12
 8005b14:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b16:	4b41      	ldr	r3, [pc, #260]	@ (8005c1c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	0013      	movs	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	189b      	adds	r3, r3, r2
 8005b20:	00da      	lsls	r2, r3, #3
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	0d1b      	lsrs	r3, r3, #20
 8005b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b28:	4353      	muls	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b2c:	e068      	b.n	8005c00 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	23c0      	movs	r3, #192	@ 0xc0
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d10a      	bne.n	8005b4e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	2117      	movs	r1, #23
 8005b46:	187b      	adds	r3, r7, r1
 8005b48:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b4a:	187b      	adds	r3, r7, r1
 8005b4c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	3301      	adds	r3, #1
 8005b52:	d055      	beq.n	8005c00 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b54:	f7fe fd66 	bl	8004624 <HAL_GetTick>
 8005b58:	0002      	movs	r2, r0
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d902      	bls.n	8005b6a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d142      	bne.n	8005bf0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	21e0      	movs	r1, #224	@ 0xe0
 8005b76:	438a      	bics	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	2382      	movs	r3, #130	@ 0x82
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d113      	bne.n	8005bae <SPI_WaitFifoStateUntilTimeout+0xce>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	2380      	movs	r3, #128	@ 0x80
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d005      	beq.n	8005b9e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	2380      	movs	r3, #128	@ 0x80
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d107      	bne.n	8005bae <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2140      	movs	r1, #64	@ 0x40
 8005baa:	438a      	bics	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bb2:	2380      	movs	r3, #128	@ 0x80
 8005bb4:	019b      	lsls	r3, r3, #6
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d110      	bne.n	8005bdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4916      	ldr	r1, [pc, #88]	@ (8005c20 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005bc6:	400a      	ands	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2180      	movs	r1, #128	@ 0x80
 8005bd6:	0189      	lsls	r1, r1, #6
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	225d      	movs	r2, #93	@ 0x5d
 8005be0:	2101      	movs	r1, #1
 8005be2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	225c      	movs	r2, #92	@ 0x5c
 8005be8:	2100      	movs	r1, #0
 8005bea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e010      	b.n	8005c12 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d18e      	bne.n	8005b2e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	0018      	movs	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b00a      	add	sp, #40	@ 0x28
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			@ (mov r8, r8)
 8005c1c:	20000004 	.word	0x20000004
 8005c20:	ffffdfff 	.word	0xffffdfff

08005c24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	23c0      	movs	r3, #192	@ 0xc0
 8005c34:	0159      	lsls	r1, r3, #5
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	0013      	movs	r3, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f7ff ff4e 	bl	8005ae0 <SPI_WaitFifoStateUntilTimeout>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d007      	beq.n	8005c58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e027      	b.n	8005ca8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	0013      	movs	r3, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	2180      	movs	r1, #128	@ 0x80
 8005c66:	f7ff fead 	bl	80059c4 <SPI_WaitFlagStateUntilTimeout>
 8005c6a:	1e03      	subs	r3, r0, #0
 8005c6c:	d007      	beq.n	8005c7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c72:	2220      	movs	r2, #32
 8005c74:	431a      	orrs	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e014      	b.n	8005ca8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	23c0      	movs	r3, #192	@ 0xc0
 8005c82:	00d9      	lsls	r1, r3, #3
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	0013      	movs	r3, r2
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f7ff ff27 	bl	8005ae0 <SPI_WaitFifoStateUntilTimeout>
 8005c92:	1e03      	subs	r3, r0, #0
 8005c94:	d007      	beq.n	8005ca6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e000      	b.n	8005ca8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	0018      	movs	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b004      	add	sp, #16
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e04a      	b.n	8005d58 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	223d      	movs	r2, #61	@ 0x3d
 8005cc6:	5c9b      	ldrb	r3, [r3, r2]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d107      	bne.n	8005cde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	223c      	movs	r2, #60	@ 0x3c
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f7fe f9e7 	bl	80040ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	223d      	movs	r2, #61	@ 0x3d
 8005ce2:	2102      	movs	r1, #2
 8005ce4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	0019      	movs	r1, r3
 8005cf0:	0010      	movs	r0, r2
 8005cf2:	f000 f9b9 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2248      	movs	r2, #72	@ 0x48
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	223e      	movs	r2, #62	@ 0x3e
 8005d02:	2101      	movs	r1, #1
 8005d04:	5499      	strb	r1, [r3, r2]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	223f      	movs	r2, #63	@ 0x3f
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	5499      	strb	r1, [r3, r2]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2240      	movs	r2, #64	@ 0x40
 8005d12:	2101      	movs	r1, #1
 8005d14:	5499      	strb	r1, [r3, r2]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2241      	movs	r2, #65	@ 0x41
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	5499      	strb	r1, [r3, r2]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2242      	movs	r2, #66	@ 0x42
 8005d22:	2101      	movs	r1, #1
 8005d24:	5499      	strb	r1, [r3, r2]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2243      	movs	r2, #67	@ 0x43
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2244      	movs	r2, #68	@ 0x44
 8005d32:	2101      	movs	r1, #1
 8005d34:	5499      	strb	r1, [r3, r2]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2245      	movs	r2, #69	@ 0x45
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	5499      	strb	r1, [r3, r2]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2246      	movs	r2, #70	@ 0x46
 8005d42:	2101      	movs	r1, #1
 8005d44:	5499      	strb	r1, [r3, r2]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2247      	movs	r2, #71	@ 0x47
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	223d      	movs	r2, #61	@ 0x3d
 8005d52:	2101      	movs	r1, #1
 8005d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	0018      	movs	r0, r3
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	b002      	add	sp, #8
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	223d      	movs	r2, #61	@ 0x3d
 8005d6c:	5c9b      	ldrb	r3, [r3, r2]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d001      	beq.n	8005d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e03d      	b.n	8005df4 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	223d      	movs	r2, #61	@ 0x3d
 8005d7c:	2102      	movs	r1, #2
 8005d7e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a19      	ldr	r2, [pc, #100]	@ (8005dfc <HAL_TIM_Base_Start_IT+0x9c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00a      	beq.n	8005db0 <HAL_TIM_Base_Start_IT+0x50>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	2380      	movs	r3, #128	@ 0x80
 8005da0:	05db      	lsls	r3, r3, #23
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d004      	beq.n	8005db0 <HAL_TIM_Base_Start_IT+0x50>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a15      	ldr	r2, [pc, #84]	@ (8005e00 <HAL_TIM_Base_Start_IT+0xa0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d116      	bne.n	8005dde <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	4a13      	ldr	r2, [pc, #76]	@ (8005e04 <HAL_TIM_Base_Start_IT+0xa4>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b06      	cmp	r3, #6
 8005dc0:	d016      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x90>
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	2380      	movs	r3, #128	@ 0x80
 8005dc6:	025b      	lsls	r3, r3, #9
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d011      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ddc:	e008      	b.n	8005df0 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2101      	movs	r1, #1
 8005dea:	430a      	orrs	r2, r1
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e000      	b.n	8005df2 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	0018      	movs	r0, r3
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b004      	add	sp, #16
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40000400 	.word	0x40000400
 8005e04:	00010007 	.word	0x00010007

08005e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2202      	movs	r2, #2
 8005e24:	4013      	ands	r3, r2
 8005e26:	d021      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d01d      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2203      	movs	r2, #3
 8005e36:	4252      	negs	r2, r2
 8005e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	2203      	movs	r2, #3
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 f8f2 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e007      	b.n	8005e66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 f8e5 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	0018      	movs	r0, r3
 8005e62:	f000 f8f1 	bl	8006048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2204      	movs	r2, #4
 8005e70:	4013      	ands	r3, r2
 8005e72:	d022      	beq.n	8005eba <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2204      	movs	r2, #4
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d01e      	beq.n	8005eba <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2205      	movs	r2, #5
 8005e82:	4252      	negs	r2, r2
 8005e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	23c0      	movs	r3, #192	@ 0xc0
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4013      	ands	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 f8cb 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005ea2:	e007      	b.n	8005eb4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f000 f8be 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f000 f8ca 	bl	8006048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d021      	beq.n	8005f06 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	d01d      	beq.n	8005f06 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2209      	movs	r2, #9
 8005ed0:	4252      	negs	r2, r2
 8005ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2204      	movs	r2, #4
 8005ed8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f000 f8a5 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005eee:	e007      	b.n	8005f00 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 f898 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	0018      	movs	r0, r3
 8005efc:	f000 f8a4 	bl	8006048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2210      	movs	r2, #16
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d022      	beq.n	8005f54 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2210      	movs	r2, #16
 8005f12:	4013      	ands	r3, r2
 8005f14:	d01e      	beq.n	8005f54 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2211      	movs	r2, #17
 8005f1c:	4252      	negs	r2, r2
 8005f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2208      	movs	r2, #8
 8005f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	23c0      	movs	r3, #192	@ 0xc0
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4013      	ands	r3, r2
 8005f32:	d004      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	0018      	movs	r0, r3
 8005f38:	f000 f87e 	bl	8006038 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e007      	b.n	8005f4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	0018      	movs	r0, r3
 8005f42:	f000 f871 	bl	8006028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 f87d 	bl	8006048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2201      	movs	r2, #1
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d00c      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	4013      	ands	r3, r2
 8005f62:	d008      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	4252      	negs	r2, r2
 8005f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f000 f851 	bl	8006018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2280      	movs	r2, #128	@ 0x80
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d104      	bne.n	8005f88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	2380      	movs	r3, #128	@ 0x80
 8005f82:	019b      	lsls	r3, r3, #6
 8005f84:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f86:	d00b      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2280      	movs	r2, #128	@ 0x80
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a1e      	ldr	r2, [pc, #120]	@ (8006010 <HAL_TIM_IRQHandler+0x208>)
 8005f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f000 f8f0 	bl	8006180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	2380      	movs	r3, #128	@ 0x80
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d00b      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2280      	movs	r2, #128	@ 0x80
 8005fae:	4013      	ands	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a17      	ldr	r2, [pc, #92]	@ (8006014 <HAL_TIM_IRQHandler+0x20c>)
 8005fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 f8e7 	bl	8006190 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2240      	movs	r2, #64	@ 0x40
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d00c      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2240      	movs	r2, #64	@ 0x40
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d008      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2241      	movs	r2, #65	@ 0x41
 8005fd8:	4252      	negs	r2, r2
 8005fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f000 f83a 	bl	8006058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	4013      	ands	r3, r2
 8005fea:	d00c      	beq.n	8006006 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d008      	beq.n	8006006 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2221      	movs	r2, #33	@ 0x21
 8005ffa:	4252      	negs	r2, r2
 8005ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	0018      	movs	r0, r3
 8006002:	f000 f8b5 	bl	8006170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	46bd      	mov	sp, r7
 800600a:	b004      	add	sp, #16
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			@ (mov r8, r8)
 8006010:	ffffdf7f 	.word	0xffffdf7f
 8006014:	fffffeff 	.word	0xfffffeff

08006018 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006020:	46c0      	nop			@ (mov r8, r8)
 8006022:	46bd      	mov	sp, r7
 8006024:	b002      	add	sp, #8
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006030:	46c0      	nop			@ (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	b002      	add	sp, #8
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006040:	46c0      	nop			@ (mov r8, r8)
 8006042:	46bd      	mov	sp, r7
 8006044:	b002      	add	sp, #8
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006050:	46c0      	nop			@ (mov r8, r8)
 8006052:	46bd      	mov	sp, r7
 8006054:	b002      	add	sp, #8
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006060:	46c0      	nop			@ (mov r8, r8)
 8006062:	46bd      	mov	sp, r7
 8006064:	b002      	add	sp, #8
 8006066:	bd80      	pop	{r7, pc}

08006068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a37      	ldr	r2, [pc, #220]	@ (8006158 <TIM_Base_SetConfig+0xf0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d008      	beq.n	8006092 <TIM_Base_SetConfig+0x2a>
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	2380      	movs	r3, #128	@ 0x80
 8006084:	05db      	lsls	r3, r3, #23
 8006086:	429a      	cmp	r2, r3
 8006088:	d003      	beq.n	8006092 <TIM_Base_SetConfig+0x2a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a33      	ldr	r2, [pc, #204]	@ (800615c <TIM_Base_SetConfig+0xf4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d108      	bne.n	80060a4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2270      	movs	r2, #112	@ 0x70
 8006096:	4393      	bics	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006158 <TIM_Base_SetConfig+0xf0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d014      	beq.n	80060d6 <TIM_Base_SetConfig+0x6e>
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	2380      	movs	r3, #128	@ 0x80
 80060b0:	05db      	lsls	r3, r3, #23
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d00f      	beq.n	80060d6 <TIM_Base_SetConfig+0x6e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a28      	ldr	r2, [pc, #160]	@ (800615c <TIM_Base_SetConfig+0xf4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00b      	beq.n	80060d6 <TIM_Base_SetConfig+0x6e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a27      	ldr	r2, [pc, #156]	@ (8006160 <TIM_Base_SetConfig+0xf8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d007      	beq.n	80060d6 <TIM_Base_SetConfig+0x6e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a26      	ldr	r2, [pc, #152]	@ (8006164 <TIM_Base_SetConfig+0xfc>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_Base_SetConfig+0x6e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a25      	ldr	r2, [pc, #148]	@ (8006168 <TIM_Base_SetConfig+0x100>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d108      	bne.n	80060e8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a24      	ldr	r2, [pc, #144]	@ (800616c <TIM_Base_SetConfig+0x104>)
 80060da:	4013      	ands	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2280      	movs	r2, #128	@ 0x80
 80060ec:	4393      	bics	r3, r2
 80060ee:	001a      	movs	r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a11      	ldr	r2, [pc, #68]	@ (8006158 <TIM_Base_SetConfig+0xf0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d007      	beq.n	8006126 <TIM_Base_SetConfig+0xbe>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a12      	ldr	r2, [pc, #72]	@ (8006164 <TIM_Base_SetConfig+0xfc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <TIM_Base_SetConfig+0xbe>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a11      	ldr	r2, [pc, #68]	@ (8006168 <TIM_Base_SetConfig+0x100>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d103      	bne.n	800612e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2201      	movs	r2, #1
 800613a:	4013      	ands	r3, r2
 800613c:	2b01      	cmp	r3, #1
 800613e:	d106      	bne.n	800614e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2201      	movs	r2, #1
 8006146:	4393      	bics	r3, r2
 8006148:	001a      	movs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	611a      	str	r2, [r3, #16]
  }
}
 800614e:	46c0      	nop			@ (mov r8, r8)
 8006150:	46bd      	mov	sp, r7
 8006152:	b004      	add	sp, #16
 8006154:	bd80      	pop	{r7, pc}
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40000400 	.word	0x40000400
 8006160:	40002000 	.word	0x40002000
 8006164:	40014400 	.word	0x40014400
 8006168:	40014800 	.word	0x40014800
 800616c:	fffffcff 	.word	0xfffffcff

08006170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006178:	46c0      	nop			@ (mov r8, r8)
 800617a:	46bd      	mov	sp, r7
 800617c:	b002      	add	sp, #8
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006188:	46c0      	nop			@ (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	b002      	add	sp, #8
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006198:	46c0      	nop			@ (mov r8, r8)
 800619a:	46bd      	mov	sp, r7
 800619c:	b002      	add	sp, #8
 800619e:	bd80      	pop	{r7, pc}

080061a0 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	7c1b      	ldrb	r3, [r3, #16]
 80061ae:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2238      	movs	r2, #56	@ 0x38
 80061b4:	5c9b      	ldrb	r3, [r3, r2]
 80061b6:	001a      	movs	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4353      	muls	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	2100      	movs	r1, #0
 80061cc:	0018      	movs	r0, r3
 80061ce:	f003 f805 	bl	80091dc <memset>
}
 80061d2:	46c0      	nop			@ (mov r8, r8)
 80061d4:	46bd      	mov	sp, r7
 80061d6:	b004      	add	sp, #16
 80061d8:	bd80      	pop	{r7, pc}

080061da <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80061da:	b590      	push	{r4, r7, lr}
 80061dc:	b087      	sub	sp, #28
 80061de:	af02      	add	r7, sp, #8
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	0008      	movs	r0, r1
 80061e4:	0011      	movs	r1, r2
 80061e6:	1cfb      	adds	r3, r7, #3
 80061e8:	1c02      	adds	r2, r0, #0
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	1cbb      	adds	r3, r7, #2
 80061ee:	1c0a      	adds	r2, r1, #0
 80061f0:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	240f      	movs	r4, #15
 80061f8:	193b      	adds	r3, r7, r4
 80061fa:	7c12      	ldrb	r2, [r2, #16]
 80061fc:	701a      	strb	r2, [r3, #0]
  offset = src_tile_row;
 80061fe:	210c      	movs	r1, #12
 8006200:	187b      	adds	r3, r7, r1
 8006202:	1cfa      	adds	r2, r7, #3
 8006204:	7812      	ldrb	r2, [r2, #0]
 8006206:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800620c:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800620e:	193b      	adds	r3, r7, r4
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	b29a      	uxth	r2, r3
 8006214:	187b      	adds	r3, r7, r1
 8006216:	0008      	movs	r0, r1
 8006218:	1879      	adds	r1, r7, r1
 800621a:	8809      	ldrh	r1, [r1, #0]
 800621c:	434a      	muls	r2, r1
 800621e:	801a      	strh	r2, [r3, #0]
  offset *= 8;
 8006220:	0001      	movs	r1, r0
 8006222:	187b      	adds	r3, r7, r1
 8006224:	187a      	adds	r2, r7, r1
 8006226:	8812      	ldrh	r2, [r2, #0]
 8006228:	00d2      	lsls	r2, r2, #3
 800622a:	801a      	strh	r2, [r3, #0]
  ptr += offset;
 800622c:	187b      	adds	r3, r7, r1
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	18d3      	adds	r3, r2, r3
 8006234:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8006236:	193b      	adds	r3, r7, r4
 8006238:	7819      	ldrb	r1, [r3, #0]
 800623a:	1cbb      	adds	r3, r7, #2
 800623c:	781a      	ldrb	r2, [r3, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	000b      	movs	r3, r1
 8006246:	2100      	movs	r1, #0
 8006248:	f002 f952 	bl	80084f0 <u8x8_DrawTile>
}
 800624c:	46c0      	nop			@ (mov r8, r8)
 800624e:	46bd      	mov	sp, r7
 8006250:	b005      	add	sp, #20
 8006252:	bd90      	pop	{r4, r7, pc}

08006254 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8006254:	b5b0      	push	{r4, r5, r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800625c:	230f      	movs	r3, #15
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
  src_max = u8g2->tile_buf_height;
 8006264:	230d      	movs	r3, #13
 8006266:	18fb      	adds	r3, r7, r3
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	2138      	movs	r1, #56	@ 0x38
 800626c:	5c52      	ldrb	r2, [r2, r1]
 800626e:	701a      	strb	r2, [r3, #0]
  dest_row = u8g2->tile_curr_row;
 8006270:	230e      	movs	r3, #14
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	2139      	movs	r1, #57	@ 0x39
 8006278:	5c52      	ldrb	r2, [r2, r1]
 800627a:	701a      	strb	r2, [r3, #0]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	230c      	movs	r3, #12
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	7c52      	ldrb	r2, [r2, #17]
 8006286:	701a      	strb	r2, [r3, #0]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8006288:	250e      	movs	r5, #14
 800628a:	197b      	adds	r3, r7, r5
 800628c:	781a      	ldrb	r2, [r3, #0]
 800628e:	240f      	movs	r4, #15
 8006290:	193b      	adds	r3, r7, r4
 8006292:	7819      	ldrb	r1, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	0018      	movs	r0, r3
 8006298:	f7ff ff9f 	bl	80061da <u8g2_send_tile_row>
    src_row++;
 800629c:	0021      	movs	r1, r4
 800629e:	187b      	adds	r3, r7, r1
 80062a0:	781a      	ldrb	r2, [r3, #0]
 80062a2:	187b      	adds	r3, r7, r1
 80062a4:	3201      	adds	r2, #1
 80062a6:	701a      	strb	r2, [r3, #0]
    dest_row++;
 80062a8:	197b      	adds	r3, r7, r5
 80062aa:	781a      	ldrb	r2, [r3, #0]
 80062ac:	197b      	adds	r3, r7, r5
 80062ae:	3201      	adds	r2, #1
 80062b0:	701a      	strb	r2, [r3, #0]
  } while( src_row < src_max && dest_row < dest_max );
 80062b2:	187a      	adds	r2, r7, r1
 80062b4:	230d      	movs	r3, #13
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d206      	bcs.n	80062ce <u8g2_send_buffer+0x7a>
 80062c0:	197a      	adds	r2, r7, r5
 80062c2:	230c      	movs	r3, #12
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	7812      	ldrb	r2, [r2, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d3dc      	bcc.n	8006288 <u8g2_send_buffer+0x34>
}
 80062ce:	46c0      	nop			@ (mov r8, r8)
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b004      	add	sp, #16
 80062d4:	bdb0      	pop	{r4, r5, r7, pc}

080062d6 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	0018      	movs	r0, r3
 80062e2:	f7ff ffb7 	bl	8006254 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f002 f95e 	bl	80085aa <u8x8_RefreshDisplay>
}
 80062ee:	46c0      	nop			@ (mov r8, r8)
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b002      	add	sp, #8
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <u8g2_m_16_16_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_16_f(uint8_t *page_cnt)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 16;
  return 0;
  #else
  static uint8_t buf[2048];
  *page_cnt = 16;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2210      	movs	r2, #16
 8006304:	701a      	strb	r2, [r3, #0]
  return buf;
 8006306:	4b02      	ldr	r3, [pc, #8]	@ (8006310 <u8g2_m_16_16_f+0x18>)
  #endif
}
 8006308:	0018      	movs	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	b002      	add	sp, #8
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000460 	.word	0x20000460

08006314 <u8g2_Setup_sh1107_seeed_128x128_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1107_pimoroni_128x128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_16_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_sh1107_seeed_128x128_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b089      	sub	sp, #36	@ 0x24
 8006318:	af02      	add	r7, sp, #8
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1107_seeed_128x128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8006322:	687c      	ldr	r4, [r7, #4]
 8006324:	4a0e      	ldr	r2, [pc, #56]	@ (8006360 <u8g2_Setup_sh1107_seeed_128x128_f+0x4c>)
 8006326:	490f      	ldr	r1, [pc, #60]	@ (8006364 <u8g2_Setup_sh1107_seeed_128x128_f+0x50>)
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	0023      	movs	r3, r4
 8006330:	f002 f9a4 	bl	800867c <u8x8_Setup>
  buf = u8g2_m_16_16_f(&tile_buf_height);
 8006334:	2413      	movs	r4, #19
 8006336:	193b      	adds	r3, r7, r4
 8006338:	0018      	movs	r0, r3
 800633a:	f7ff ffdd 	bl	80062f8 <u8g2_m_16_16_f>
 800633e:	0003      	movs	r3, r0
 8006340:	617b      	str	r3, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8006342:	193b      	adds	r3, r7, r4
 8006344:	781a      	ldrb	r2, [r3, #0]
 8006346:	4c08      	ldr	r4, [pc, #32]	@ (8006368 <u8g2_Setup_sh1107_seeed_128x128_f+0x54>)
 8006348:	6979      	ldr	r1, [r7, #20]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	0023      	movs	r3, r4
 8006352:	f001 fc8f 	bl	8007c74 <u8g2_SetupBuffer>
}
 8006356:	46c0      	nop			@ (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	b007      	add	sp, #28
 800635c:	bd90      	pop	{r4, r7, pc}
 800635e:	46c0      	nop			@ (mov r8, r8)
 8006360:	08008191 	.word	0x08008191
 8006364:	080083cd 	.word	0x080083cd
 8006368:	08007a79 	.word	0x08007a79

0800636c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	000a      	movs	r2, r1
 8006376:	1cfb      	adds	r3, r7, #3
 8006378:	701a      	strb	r2, [r3, #0]
  font += offset;
 800637a:	1cfb      	adds	r3, r7, #3
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	18d3      	adds	r3, r2, r3
 8006382:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	781b      	ldrb	r3, [r3, #0]
}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	b002      	add	sp, #8
 800638e:	bd80      	pop	{r7, pc}

08006390 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	000a      	movs	r2, r1
 800639a:	1cfb      	adds	r3, r7, #3
 800639c:	701a      	strb	r2, [r3, #0]
    uint16_t pos;
    font += offset;
 800639e:	1cfb      	adds	r3, r7, #3
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	18d3      	adds	r3, r2, r3
 80063a6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	200e      	movs	r0, #14
 80063ae:	183b      	adds	r3, r7, r0
 80063b0:	801a      	strh	r2, [r3, #0]
    font++;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3301      	adds	r3, #1
 80063b6:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80063b8:	183b      	adds	r3, r7, r0
 80063ba:	183a      	adds	r2, r7, r0
 80063bc:	8812      	ldrh	r2, [r2, #0]
 80063be:	0212      	lsls	r2, r2, #8
 80063c0:	801a      	strh	r2, [r3, #0]
    pos += u8x8_pgm_read( font);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	0019      	movs	r1, r3
 80063c8:	183b      	adds	r3, r7, r0
 80063ca:	183a      	adds	r2, r7, r0
 80063cc:	8812      	ldrh	r2, [r2, #0]
 80063ce:	188a      	adds	r2, r1, r2
 80063d0:	801a      	strh	r2, [r3, #0]
    return pos;
 80063d2:	183b      	adds	r3, r7, r0
 80063d4:	881b      	ldrh	r3, [r3, #0]
}
 80063d6:	0018      	movs	r0, r3
 80063d8:	46bd      	mov	sp, r7
 80063da:	b004      	add	sp, #16
 80063dc:	bd80      	pop	{r7, pc}

080063de <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2100      	movs	r1, #0
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7ff ffbd 	bl	800636c <u8g2_font_get_byte>
 80063f2:	0003      	movs	r3, r0
 80063f4:	001a      	movs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2101      	movs	r1, #1
 80063fe:	0018      	movs	r0, r3
 8006400:	f7ff ffb4 	bl	800636c <u8g2_font_get_byte>
 8006404:	0003      	movs	r3, r0
 8006406:	001a      	movs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2102      	movs	r1, #2
 8006410:	0018      	movs	r0, r3
 8006412:	f7ff ffab 	bl	800636c <u8g2_font_get_byte>
 8006416:	0003      	movs	r3, r0
 8006418:	001a      	movs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2103      	movs	r1, #3
 8006422:	0018      	movs	r0, r3
 8006424:	f7ff ffa2 	bl	800636c <u8g2_font_get_byte>
 8006428:	0003      	movs	r3, r0
 800642a:	001a      	movs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2104      	movs	r1, #4
 8006434:	0018      	movs	r0, r3
 8006436:	f7ff ff99 	bl	800636c <u8g2_font_get_byte>
 800643a:	0003      	movs	r3, r0
 800643c:	001a      	movs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2105      	movs	r1, #5
 8006446:	0018      	movs	r0, r3
 8006448:	f7ff ff90 	bl	800636c <u8g2_font_get_byte>
 800644c:	0003      	movs	r3, r0
 800644e:	001a      	movs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2106      	movs	r1, #6
 8006458:	0018      	movs	r0, r3
 800645a:	f7ff ff87 	bl	800636c <u8g2_font_get_byte>
 800645e:	0003      	movs	r3, r0
 8006460:	001a      	movs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2107      	movs	r1, #7
 800646a:	0018      	movs	r0, r3
 800646c:	f7ff ff7e 	bl	800636c <u8g2_font_get_byte>
 8006470:	0003      	movs	r3, r0
 8006472:	001a      	movs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2108      	movs	r1, #8
 800647c:	0018      	movs	r0, r3
 800647e:	f7ff ff75 	bl	800636c <u8g2_font_get_byte>
 8006482:	0003      	movs	r3, r0
 8006484:	001a      	movs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2109      	movs	r1, #9
 800648e:	0018      	movs	r0, r3
 8006490:	f7ff ff6c 	bl	800636c <u8g2_font_get_byte>
 8006494:	0003      	movs	r3, r0
 8006496:	b25a      	sxtb	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	210a      	movs	r1, #10
 80064a0:	0018      	movs	r0, r3
 80064a2:	f7ff ff63 	bl	800636c <u8g2_font_get_byte>
 80064a6:	0003      	movs	r3, r0
 80064a8:	b25a      	sxtb	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	210b      	movs	r1, #11
 80064b2:	0018      	movs	r0, r3
 80064b4:	f7ff ff5a 	bl	800636c <u8g2_font_get_byte>
 80064b8:	0003      	movs	r3, r0
 80064ba:	b25a      	sxtb	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	210c      	movs	r1, #12
 80064c4:	0018      	movs	r0, r3
 80064c6:	f7ff ff51 	bl	800636c <u8g2_font_get_byte>
 80064ca:	0003      	movs	r3, r0
 80064cc:	b25a      	sxtb	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	210d      	movs	r1, #13
 80064d6:	0018      	movs	r0, r3
 80064d8:	f7ff ff48 	bl	800636c <u8g2_font_get_byte>
 80064dc:	0003      	movs	r3, r0
 80064de:	b25a      	sxtb	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	210e      	movs	r1, #14
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7ff ff3f 	bl	800636c <u8g2_font_get_byte>
 80064ee:	0003      	movs	r3, r0
 80064f0:	b25a      	sxtb	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	210f      	movs	r1, #15
 80064fa:	0018      	movs	r0, r3
 80064fc:	f7ff ff36 	bl	800636c <u8g2_font_get_byte>
 8006500:	0003      	movs	r3, r0
 8006502:	b25a      	sxtb	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2110      	movs	r1, #16
 800650c:	0018      	movs	r0, r3
 800650e:	f7ff ff2d 	bl	800636c <u8g2_font_get_byte>
 8006512:	0003      	movs	r3, r0
 8006514:	b25a      	sxtb	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2111      	movs	r1, #17
 800651e:	0018      	movs	r0, r3
 8006520:	f7ff ff36 	bl	8006390 <u8g2_font_get_word>
 8006524:	0003      	movs	r3, r0
 8006526:	001a      	movs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2113      	movs	r1, #19
 8006530:	0018      	movs	r0, r3
 8006532:	f7ff ff2d 	bl	8006390 <u8g2_font_get_word>
 8006536:	0003      	movs	r3, r0
 8006538:	001a      	movs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2115      	movs	r1, #21
 8006542:	0018      	movs	r0, r3
 8006544:	f7ff ff24 	bl	8006390 <u8g2_font_get_word>
 8006548:	0003      	movs	r3, r0
 800654a:	001a      	movs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	82da      	strh	r2, [r3, #22]
#endif
}
 8006550:	46c0      	nop			@ (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b002      	add	sp, #8
 8006556:	bd80      	pop	{r7, pc}

08006558 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8006558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	000a      	movs	r2, r1
 8006562:	1cfb      	adds	r3, r7, #3
 8006564:	701a      	strb	r2, [r3, #0]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8006566:	250d      	movs	r5, #13
 8006568:	197b      	adds	r3, r7, r5
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	7b12      	ldrb	r2, [r2, #12]
 800656e:	701a      	strb	r2, [r3, #0]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	240f      	movs	r4, #15
 8006576:	193b      	adds	r3, r7, r4
 8006578:	7812      	ldrb	r2, [r2, #0]
 800657a:	701a      	strb	r2, [r3, #0]
  
  val >>= bit_pos;
 800657c:	193b      	adds	r3, r7, r4
 800657e:	781a      	ldrb	r2, [r3, #0]
 8006580:	197b      	adds	r3, r7, r5
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	411a      	asrs	r2, r3
 8006586:	193b      	adds	r3, r7, r4
 8006588:	701a      	strb	r2, [r3, #0]
  bit_pos_plus_cnt = bit_pos;
 800658a:	200e      	movs	r0, #14
 800658c:	183b      	adds	r3, r7, r0
 800658e:	197a      	adds	r2, r7, r5
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	701a      	strb	r2, [r3, #0]
  bit_pos_plus_cnt += cnt;
 8006594:	183b      	adds	r3, r7, r0
 8006596:	1839      	adds	r1, r7, r0
 8006598:	1cfa      	adds	r2, r7, #3
 800659a:	7809      	ldrb	r1, [r1, #0]
 800659c:	7812      	ldrb	r2, [r2, #0]
 800659e:	188a      	adds	r2, r1, r2
 80065a0:	701a      	strb	r2, [r3, #0]
  if ( bit_pos_plus_cnt >= 8 )
 80065a2:	183b      	adds	r3, r7, r0
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b07      	cmp	r3, #7
 80065a8:	d924      	bls.n	80065f4 <u8g2_font_decode_get_unsigned_bits+0x9c>
  {
    uint8_t s = 8;
 80065aa:	260c      	movs	r6, #12
 80065ac:	19bb      	adds	r3, r7, r6
 80065ae:	2208      	movs	r2, #8
 80065b0:	701a      	strb	r2, [r3, #0]
    s -= bit_pos;
 80065b2:	19bb      	adds	r3, r7, r6
 80065b4:	19b9      	adds	r1, r7, r6
 80065b6:	197a      	adds	r2, r7, r5
 80065b8:	7809      	ldrb	r1, [r1, #0]
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	1a8a      	subs	r2, r1, r2
 80065be:	701a      	strb	r2, [r3, #0]
    f->decode_ptr++;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	001a      	movs	r2, r3
 80065d2:	19bb      	adds	r3, r7, r6
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	409a      	lsls	r2, r3
 80065d8:	0013      	movs	r3, r2
 80065da:	b25a      	sxtb	r2, r3
 80065dc:	193b      	adds	r3, r7, r4
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	b25b      	sxtb	r3, r3
 80065e2:	4313      	orrs	r3, r2
 80065e4:	b25a      	sxtb	r2, r3
 80065e6:	193b      	adds	r3, r7, r4
 80065e8:	701a      	strb	r2, [r3, #0]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80065ea:	183b      	adds	r3, r7, r0
 80065ec:	183a      	adds	r2, r7, r0
 80065ee:	7812      	ldrb	r2, [r2, #0]
 80065f0:	3a08      	subs	r2, #8
 80065f2:	701a      	strb	r2, [r3, #0]
  }
  val &= (1U<<cnt)-1;
 80065f4:	1cfb      	adds	r3, r7, #3
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2201      	movs	r2, #1
 80065fa:	4252      	negs	r2, r2
 80065fc:	409a      	lsls	r2, r3
 80065fe:	0013      	movs	r3, r2
 8006600:	b2db      	uxtb	r3, r3
 8006602:	43db      	mvns	r3, r3
 8006604:	b2da      	uxtb	r2, r3
 8006606:	200f      	movs	r0, #15
 8006608:	183b      	adds	r3, r7, r0
 800660a:	1839      	adds	r1, r7, r0
 800660c:	7809      	ldrb	r1, [r1, #0]
 800660e:	400a      	ands	r2, r1
 8006610:	701a      	strb	r2, [r3, #0]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	220e      	movs	r2, #14
 8006616:	18ba      	adds	r2, r7, r2
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	731a      	strb	r2, [r3, #12]
  return val;
 800661c:	183b      	adds	r3, r7, r0
 800661e:	781b      	ldrb	r3, [r3, #0]
}
 8006620:	0018      	movs	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	b005      	add	sp, #20
 8006626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006628 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	000a      	movs	r2, r1
 8006632:	1cfb      	adds	r3, r7, #3
 8006634:	701a      	strb	r2, [r3, #0]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8006636:	1cfb      	adds	r3, r7, #3
 8006638:	781a      	ldrb	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	0011      	movs	r1, r2
 800663e:	0018      	movs	r0, r3
 8006640:	f7ff ff8a 	bl	8006558 <u8g2_font_decode_get_unsigned_bits>
 8006644:	0003      	movs	r3, r0
 8006646:	001a      	movs	r2, r3
 8006648:	210f      	movs	r1, #15
 800664a:	187b      	adds	r3, r7, r1
 800664c:	701a      	strb	r2, [r3, #0]
  d = 1;
 800664e:	200e      	movs	r0, #14
 8006650:	183b      	adds	r3, r7, r0
 8006652:	2201      	movs	r2, #1
 8006654:	701a      	strb	r2, [r3, #0]
  cnt--;
 8006656:	1cfb      	adds	r3, r7, #3
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	1cfb      	adds	r3, r7, #3
 800665c:	3a01      	subs	r2, #1
 800665e:	701a      	strb	r2, [r3, #0]
  d <<= cnt;
 8006660:	183b      	adds	r3, r7, r0
 8006662:	2200      	movs	r2, #0
 8006664:	569a      	ldrsb	r2, [r3, r2]
 8006666:	1cfb      	adds	r3, r7, #3
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	409a      	lsls	r2, r3
 800666c:	183b      	adds	r3, r7, r0
 800666e:	701a      	strb	r2, [r3, #0]
  v -= d;
 8006670:	187b      	adds	r3, r7, r1
 8006672:	781a      	ldrb	r2, [r3, #0]
 8006674:	183b      	adds	r3, r7, r0
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	b2da      	uxtb	r2, r3
 800667c:	187b      	adds	r3, r7, r1
 800667e:	701a      	strb	r2, [r3, #0]
  return v;
 8006680:	187b      	adds	r3, r7, r1
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	b25b      	sxtb	r3, r3
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8006686:	0018      	movs	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	b004      	add	sp, #16
 800668c:	bd80      	pop	{r7, pc}

0800668e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800668e:	b5b0      	push	{r4, r5, r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	0005      	movs	r5, r0
 8006696:	000c      	movs	r4, r1
 8006698:	0010      	movs	r0, r2
 800669a:	0019      	movs	r1, r3
 800669c:	1dbb      	adds	r3, r7, #6
 800669e:	1c2a      	adds	r2, r5, #0
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	1d7b      	adds	r3, r7, #5
 80066a4:	1c22      	adds	r2, r4, #0
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	1d3b      	adds	r3, r7, #4
 80066aa:	1c02      	adds	r2, r0, #0
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	1cfb      	adds	r3, r7, #3
 80066b0:	1c0a      	adds	r2, r1, #0
 80066b2:	701a      	strb	r2, [r3, #0]
  switch(dir)
 80066b4:	1cfb      	adds	r3, r7, #3
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d019      	beq.n	80066f0 <u8g2_add_vector_y+0x62>
 80066bc:	dc22      	bgt.n	8006704 <u8g2_add_vector_y+0x76>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <u8g2_add_vector_y+0x3a>
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d00a      	beq.n	80066dc <u8g2_add_vector_y+0x4e>
 80066c6:	e01d      	b.n	8006704 <u8g2_add_vector_y+0x76>
  {
    case 0:
      dy += y;
 80066c8:	1d3b      	adds	r3, r7, #4
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	b25b      	sxtb	r3, r3
 80066ce:	b299      	uxth	r1, r3
 80066d0:	1dbb      	adds	r3, r7, #6
 80066d2:	1dba      	adds	r2, r7, #6
 80066d4:	8812      	ldrh	r2, [r2, #0]
 80066d6:	188a      	adds	r2, r1, r2
 80066d8:	801a      	strh	r2, [r3, #0]
      break;
 80066da:	e01d      	b.n	8006718 <u8g2_add_vector_y+0x8a>
    case 1:
      dy += x;
 80066dc:	1d7b      	adds	r3, r7, #5
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	b25b      	sxtb	r3, r3
 80066e2:	b299      	uxth	r1, r3
 80066e4:	1dbb      	adds	r3, r7, #6
 80066e6:	1dba      	adds	r2, r7, #6
 80066e8:	8812      	ldrh	r2, [r2, #0]
 80066ea:	188a      	adds	r2, r1, r2
 80066ec:	801a      	strh	r2, [r3, #0]
      break;
 80066ee:	e013      	b.n	8006718 <u8g2_add_vector_y+0x8a>
    case 2:
      dy -= y;
 80066f0:	1d3b      	adds	r3, r7, #4
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	b25b      	sxtb	r3, r3
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	1dbb      	adds	r3, r7, #6
 80066fa:	1db9      	adds	r1, r7, #6
 80066fc:	8809      	ldrh	r1, [r1, #0]
 80066fe:	1a8a      	subs	r2, r1, r2
 8006700:	801a      	strh	r2, [r3, #0]
      break;
 8006702:	e009      	b.n	8006718 <u8g2_add_vector_y+0x8a>
    default:
      dy -= x;
 8006704:	1d7b      	adds	r3, r7, #5
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	b25b      	sxtb	r3, r3
 800670a:	b29a      	uxth	r2, r3
 800670c:	1dbb      	adds	r3, r7, #6
 800670e:	1db9      	adds	r1, r7, #6
 8006710:	8809      	ldrh	r1, [r1, #0]
 8006712:	1a8a      	subs	r2, r1, r2
 8006714:	801a      	strh	r2, [r3, #0]
      break;      
 8006716:	46c0      	nop			@ (mov r8, r8)
  }
  return dy;
 8006718:	1dbb      	adds	r3, r7, #6
 800671a:	881b      	ldrh	r3, [r3, #0]
}
 800671c:	0018      	movs	r0, r3
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bdb0      	pop	{r4, r5, r7, pc}

08006724 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8006724:	b5b0      	push	{r4, r5, r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	0005      	movs	r5, r0
 800672c:	000c      	movs	r4, r1
 800672e:	0010      	movs	r0, r2
 8006730:	0019      	movs	r1, r3
 8006732:	1dbb      	adds	r3, r7, #6
 8006734:	1c2a      	adds	r2, r5, #0
 8006736:	801a      	strh	r2, [r3, #0]
 8006738:	1d7b      	adds	r3, r7, #5
 800673a:	1c22      	adds	r2, r4, #0
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	1d3b      	adds	r3, r7, #4
 8006740:	1c02      	adds	r2, r0, #0
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	1cfb      	adds	r3, r7, #3
 8006746:	1c0a      	adds	r2, r1, #0
 8006748:	701a      	strb	r2, [r3, #0]
  switch(dir)
 800674a:	1cfb      	adds	r3, r7, #3
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d019      	beq.n	8006786 <u8g2_add_vector_x+0x62>
 8006752:	dc22      	bgt.n	800679a <u8g2_add_vector_x+0x76>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <u8g2_add_vector_x+0x3a>
 8006758:	2b01      	cmp	r3, #1
 800675a:	d00a      	beq.n	8006772 <u8g2_add_vector_x+0x4e>
 800675c:	e01d      	b.n	800679a <u8g2_add_vector_x+0x76>
  {
    case 0:
      dx += x;
 800675e:	1d7b      	adds	r3, r7, #5
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	b25b      	sxtb	r3, r3
 8006764:	b299      	uxth	r1, r3
 8006766:	1dbb      	adds	r3, r7, #6
 8006768:	1dba      	adds	r2, r7, #6
 800676a:	8812      	ldrh	r2, [r2, #0]
 800676c:	188a      	adds	r2, r1, r2
 800676e:	801a      	strh	r2, [r3, #0]
      break;
 8006770:	e01d      	b.n	80067ae <u8g2_add_vector_x+0x8a>
    case 1:
      dx -= y;
 8006772:	1d3b      	adds	r3, r7, #4
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	b25b      	sxtb	r3, r3
 8006778:	b29a      	uxth	r2, r3
 800677a:	1dbb      	adds	r3, r7, #6
 800677c:	1db9      	adds	r1, r7, #6
 800677e:	8809      	ldrh	r1, [r1, #0]
 8006780:	1a8a      	subs	r2, r1, r2
 8006782:	801a      	strh	r2, [r3, #0]
      break;
 8006784:	e013      	b.n	80067ae <u8g2_add_vector_x+0x8a>
    case 2:
      dx -= x;
 8006786:	1d7b      	adds	r3, r7, #5
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	b25b      	sxtb	r3, r3
 800678c:	b29a      	uxth	r2, r3
 800678e:	1dbb      	adds	r3, r7, #6
 8006790:	1db9      	adds	r1, r7, #6
 8006792:	8809      	ldrh	r1, [r1, #0]
 8006794:	1a8a      	subs	r2, r1, r2
 8006796:	801a      	strh	r2, [r3, #0]
      break;
 8006798:	e009      	b.n	80067ae <u8g2_add_vector_x+0x8a>
    default:
      dx += y;
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	b25b      	sxtb	r3, r3
 80067a0:	b299      	uxth	r1, r3
 80067a2:	1dbb      	adds	r3, r7, #6
 80067a4:	1dba      	adds	r2, r7, #6
 80067a6:	8812      	ldrh	r2, [r2, #0]
 80067a8:	188a      	adds	r2, r1, r2
 80067aa:	801a      	strh	r2, [r3, #0]
      break;      
 80067ac:	46c0      	nop			@ (mov r8, r8)
  }
  return dx;
 80067ae:	1dbb      	adds	r3, r7, #6
 80067b0:	881b      	ldrh	r3, [r3, #0]
}
 80067b2:	0018      	movs	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b002      	add	sp, #8
 80067b8:	bdb0      	pop	{r4, r5, r7, pc}

080067ba <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80067ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067bc:	b089      	sub	sp, #36	@ 0x24
 80067be:	af02      	add	r7, sp, #8
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	0008      	movs	r0, r1
 80067c4:	0011      	movs	r1, r2
 80067c6:	1cfb      	adds	r3, r7, #3
 80067c8:	1c02      	adds	r2, r0, #0
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	1cbb      	adds	r3, r7, #2
 80067ce:	1c0a      	adds	r2, r1, #0
 80067d0:	701a      	strb	r2, [r3, #0]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3360      	adds	r3, #96	@ 0x60
 80067d6:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80067d8:	2317      	movs	r3, #23
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	1cfa      	adds	r2, r7, #3
 80067de:	7812      	ldrb	r2, [r2, #0]
 80067e0:	701a      	strb	r2, [r3, #0]
  
  /* get the local position */
  lx = decode->x;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2208      	movs	r2, #8
 80067e6:	569a      	ldrsb	r2, [r3, r2]
 80067e8:	2315      	movs	r3, #21
 80067ea:	18fb      	adds	r3, r7, r3
 80067ec:	701a      	strb	r2, [r3, #0]
  ly = decode->y;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2209      	movs	r2, #9
 80067f2:	569a      	ldrsb	r2, [r3, r2]
 80067f4:	2314      	movs	r3, #20
 80067f6:	18fb      	adds	r3, r7, r3
 80067f8:	701a      	strb	r2, [r3, #0]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	220a      	movs	r2, #10
 80067fe:	569a      	ldrsb	r2, [r3, r2]
 8006800:	200f      	movs	r0, #15
 8006802:	183b      	adds	r3, r7, r0
 8006804:	701a      	strb	r2, [r3, #0]
    rem -= lx;
 8006806:	183b      	adds	r3, r7, r0
 8006808:	1839      	adds	r1, r7, r0
 800680a:	2215      	movs	r2, #21
 800680c:	18ba      	adds	r2, r7, r2
 800680e:	7809      	ldrb	r1, [r1, #0]
 8006810:	7812      	ldrb	r2, [r2, #0]
 8006812:	1a8a      	subs	r2, r1, r2
 8006814:	701a      	strb	r2, [r3, #0]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8006816:	2116      	movs	r1, #22
 8006818:	187b      	adds	r3, r7, r1
 800681a:	183a      	adds	r2, r7, r0
 800681c:	7812      	ldrb	r2, [r2, #0]
 800681e:	701a      	strb	r2, [r3, #0]
    if ( cnt < rem )
 8006820:	2417      	movs	r4, #23
 8006822:	193a      	adds	r2, r7, r4
 8006824:	183b      	adds	r3, r7, r0
 8006826:	7812      	ldrb	r2, [r2, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d203      	bcs.n	8006836 <u8g2_font_decode_len+0x7c>
      current = cnt;
 800682e:	187b      	adds	r3, r7, r1
 8006830:	193a      	adds	r2, r7, r4
 8006832:	7812      	ldrb	r2, [r2, #0]
 8006834:	701a      	strb	r2, [r3, #0]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8006836:	260c      	movs	r6, #12
 8006838:	19bb      	adds	r3, r7, r6
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	8892      	ldrh	r2, [r2, #4]
 800683e:	801a      	strh	r2, [r3, #0]
    y = decode->target_y;
 8006840:	230a      	movs	r3, #10
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	88d2      	ldrh	r2, [r2, #6]
 8006848:	801a      	strh	r2, [r3, #0]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800684a:	2215      	movs	r2, #21
 800684c:	18bb      	adds	r3, r7, r2
 800684e:	2100      	movs	r1, #0
 8006850:	5659      	ldrsb	r1, [r3, r1]
 8006852:	2014      	movs	r0, #20
 8006854:	183b      	adds	r3, r7, r0
 8006856:	2200      	movs	r2, #0
 8006858:	569a      	ldrsb	r2, [r3, r2]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	7c1d      	ldrb	r5, [r3, #16]
 800685e:	19bc      	adds	r4, r7, r6
 8006860:	19bb      	adds	r3, r7, r6
 8006862:	8818      	ldrh	r0, [r3, #0]
 8006864:	002b      	movs	r3, r5
 8006866:	f7ff ff5d 	bl	8006724 <u8g2_add_vector_x>
 800686a:	0003      	movs	r3, r0
 800686c:	8023      	strh	r3, [r4, #0]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800686e:	2215      	movs	r2, #21
 8006870:	18bb      	adds	r3, r7, r2
 8006872:	2100      	movs	r1, #0
 8006874:	5659      	ldrsb	r1, [r3, r1]
 8006876:	2014      	movs	r0, #20
 8006878:	183b      	adds	r3, r7, r0
 800687a:	2200      	movs	r2, #0
 800687c:	569a      	ldrsb	r2, [r3, r2]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	7c1d      	ldrb	r5, [r3, #16]
 8006882:	230a      	movs	r3, #10
 8006884:	18fc      	adds	r4, r7, r3
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	8818      	ldrh	r0, [r3, #0]
 800688a:	002b      	movs	r3, r5
 800688c:	f7ff feff 	bl	800668e <u8g2_add_vector_y>
 8006890:	0003      	movs	r3, r0
 8006892:	8023      	strh	r3, [r4, #0]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8006894:	1cbb      	adds	r3, r7, #2
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d016      	beq.n	80068ca <u8g2_font_decode_len+0x110>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	7b99      	ldrb	r1, [r3, #14]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2292      	movs	r2, #146	@ 0x92
 80068a4:	5499      	strb	r1, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 80068a6:	2116      	movs	r1, #22
 80068a8:	187b      	adds	r3, r7, r1
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	b29d      	uxth	r5, r3
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	7c1b      	ldrb	r3, [r3, #16]
 80068b2:	220a      	movs	r2, #10
 80068b4:	18ba      	adds	r2, r7, r2
 80068b6:	8814      	ldrh	r4, [r2, #0]
 80068b8:	19ba      	adds	r2, r7, r6
 80068ba:	8811      	ldrh	r1, [r2, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	002b      	movs	r3, r5
 80068c2:	0022      	movs	r2, r4
 80068c4:	f000 fe13 	bl	80074ee <u8g2_DrawHVLine>
 80068c8:	e01a      	b.n	8006900 <u8g2_font_decode_len+0x146>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	7b5b      	ldrb	r3, [r3, #13]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d116      	bne.n	8006900 <u8g2_font_decode_len+0x146>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	7bd9      	ldrb	r1, [r3, #15]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2292      	movs	r2, #146	@ 0x92
 80068da:	5499      	strb	r1, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 80068dc:	2316      	movs	r3, #22
 80068de:	18fb      	adds	r3, r7, r3
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b29d      	uxth	r5, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	7c1b      	ldrb	r3, [r3, #16]
 80068e8:	220a      	movs	r2, #10
 80068ea:	18ba      	adds	r2, r7, r2
 80068ec:	8814      	ldrh	r4, [r2, #0]
 80068ee:	220c      	movs	r2, #12
 80068f0:	18ba      	adds	r2, r7, r2
 80068f2:	8811      	ldrh	r1, [r2, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	002b      	movs	r3, r5
 80068fa:	0022      	movs	r2, r4
 80068fc:	f000 fdf7 	bl	80074ee <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8006900:	2117      	movs	r1, #23
 8006902:	187a      	adds	r2, r7, r1
 8006904:	200f      	movs	r0, #15
 8006906:	183b      	adds	r3, r7, r0
 8006908:	7812      	ldrb	r2, [r2, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d311      	bcc.n	8006934 <u8g2_font_decode_len+0x17a>
      break;
    cnt -= rem;
 8006910:	187b      	adds	r3, r7, r1
 8006912:	1879      	adds	r1, r7, r1
 8006914:	183a      	adds	r2, r7, r0
 8006916:	7809      	ldrb	r1, [r1, #0]
 8006918:	7812      	ldrb	r2, [r2, #0]
 800691a:	1a8a      	subs	r2, r1, r2
 800691c:	701a      	strb	r2, [r3, #0]
    lx = 0;
 800691e:	2315      	movs	r3, #21
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	2200      	movs	r2, #0
 8006924:	701a      	strb	r2, [r3, #0]
    ly++;
 8006926:	2114      	movs	r1, #20
 8006928:	187b      	adds	r3, r7, r1
 800692a:	781a      	ldrb	r2, [r3, #0]
 800692c:	187b      	adds	r3, r7, r1
 800692e:	3201      	adds	r2, #1
 8006930:	701a      	strb	r2, [r3, #0]
    rem = decode->glyph_width;
 8006932:	e762      	b.n	80067fa <u8g2_font_decode_len+0x40>
      break;
 8006934:	46c0      	nop			@ (mov r8, r8)
  }
  lx += cnt;
 8006936:	2015      	movs	r0, #21
 8006938:	183b      	adds	r3, r7, r0
 800693a:	1839      	adds	r1, r7, r0
 800693c:	2217      	movs	r2, #23
 800693e:	18ba      	adds	r2, r7, r2
 8006940:	7809      	ldrb	r1, [r1, #0]
 8006942:	7812      	ldrb	r2, [r2, #0]
 8006944:	188a      	adds	r2, r1, r2
 8006946:	701a      	strb	r2, [r3, #0]
  
  decode->x = lx;
 8006948:	183b      	adds	r3, r7, r0
 800694a:	2200      	movs	r2, #0
 800694c:	569a      	ldrsb	r2, [r3, r2]
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8006952:	2314      	movs	r3, #20
 8006954:	18fb      	adds	r3, r7, r3
 8006956:	2200      	movs	r2, #0
 8006958:	569a      	ldrsb	r2, [r3, r2]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	725a      	strb	r2, [r3, #9]
}
 800695e:	46c0      	nop			@ (mov r8, r8)
 8006960:	46bd      	mov	sp, r7
 8006962:	b007      	add	sp, #28
 8006964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006966 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3360      	adds	r3, #96	@ 0x60
 8006974:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2278      	movs	r2, #120	@ 0x78
 8006986:	5c9a      	ldrb	r2, [r3, r2]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	0011      	movs	r1, r2
 800698c:	0018      	movs	r0, r3
 800698e:	f7ff fde3 	bl	8006558 <u8g2_font_decode_get_unsigned_bits>
 8006992:	0003      	movs	r3, r0
 8006994:	b25a      	sxtb	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2279      	movs	r2, #121	@ 0x79
 800699e:	5c9a      	ldrb	r2, [r3, r2]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	0011      	movs	r1, r2
 80069a4:	0018      	movs	r0, r3
 80069a6:	f7ff fdd7 	bl	8006558 <u8g2_font_decode_get_unsigned_bits>
 80069aa:	0003      	movs	r3, r0
 80069ac:	b25a      	sxtb	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2292      	movs	r2, #146	@ 0x92
 80069b6:	5c9a      	ldrb	r2, [r3, r2]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	7b9b      	ldrb	r3, [r3, #14]
 80069c0:	425a      	negs	r2, r3
 80069c2:	4153      	adcs	r3, r2
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	001a      	movs	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	73da      	strb	r2, [r3, #15]
}
 80069cc:	46c0      	nop			@ (mov r8, r8)
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b004      	add	sp, #16
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80069d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d6:	b08b      	sub	sp, #44	@ 0x2c
 80069d8:	af02      	add	r7, sp, #8
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3360      	adds	r3, #96	@ 0x60
 80069e2:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0011      	movs	r1, r2
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7ff ffbb 	bl	8006966 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80069f0:	2513      	movs	r5, #19
 80069f2:	197b      	adds	r3, r7, r5
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	216b      	movs	r1, #107	@ 0x6b
 80069f8:	5c52      	ldrb	r2, [r2, r1]
 80069fa:	701a      	strb	r2, [r3, #0]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	227a      	movs	r2, #122	@ 0x7a
 8006a00:	5c9a      	ldrb	r2, [r3, r2]
 8006a02:	2612      	movs	r6, #18
 8006a04:	19bc      	adds	r4, r7, r6
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	0011      	movs	r1, r2
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f7ff fe0c 	bl	8006628 <u8g2_font_decode_get_signed_bits>
 8006a10:	0003      	movs	r3, r0
 8006a12:	7023      	strb	r3, [r4, #0]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	227b      	movs	r2, #123	@ 0x7b
 8006a18:	5c9a      	ldrb	r2, [r3, r2]
 8006a1a:	2311      	movs	r3, #17
 8006a1c:	18fc      	adds	r4, r7, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	0011      	movs	r1, r2
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7ff fe00 	bl	8006628 <u8g2_font_decode_get_signed_bits>
 8006a28:	0003      	movs	r3, r0
 8006a2a:	7023      	strb	r3, [r4, #0]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	227c      	movs	r2, #124	@ 0x7c
 8006a30:	5c9a      	ldrb	r2, [r3, r2]
 8006a32:	2110      	movs	r1, #16
 8006a34:	187c      	adds	r4, r7, r1
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	0011      	movs	r1, r2
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f7ff fdf4 	bl	8006628 <u8g2_font_decode_get_signed_bits>
 8006a40:	0003      	movs	r3, r0
 8006a42:	7023      	strb	r3, [r4, #0]
  
  if ( decode->glyph_width > 0 )
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	7a9b      	ldrb	r3, [r3, #10]
 8006a48:	b25b      	sxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	dc00      	bgt.n	8006a50 <u8g2_font_decode_glyph+0x7c>
 8006a4e:	e134      	b.n	8006cba <u8g2_font_decode_glyph+0x2e6>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	8898      	ldrh	r0, [r3, #4]
 8006a54:	197b      	adds	r3, r7, r5
 8006a56:	781a      	ldrb	r2, [r3, #0]
 8006a58:	2311      	movs	r3, #17
 8006a5a:	18fb      	adds	r3, r7, r3
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	18d3      	adds	r3, r2, r3
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	425b      	negs	r3, r3
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	b25a      	sxtb	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	7c1c      	ldrb	r4, [r3, #16]
 8006a6c:	19bb      	adds	r3, r7, r6
 8006a6e:	2100      	movs	r1, #0
 8006a70:	5659      	ldrsb	r1, [r3, r1]
 8006a72:	0023      	movs	r3, r4
 8006a74:	f7ff fe56 	bl	8006724 <u8g2_add_vector_x>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	001a      	movs	r2, r3
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	88d8      	ldrh	r0, [r3, #6]
 8006a84:	197b      	adds	r3, r7, r5
 8006a86:	781a      	ldrb	r2, [r3, #0]
 8006a88:	2311      	movs	r3, #17
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	18d3      	adds	r3, r2, r3
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	425b      	negs	r3, r3
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	b25a      	sxtb	r2, r3
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	7c1c      	ldrb	r4, [r3, #16]
 8006a9c:	19bb      	adds	r3, r7, r6
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	5659      	ldrsb	r1, [r3, r1]
 8006aa2:	0023      	movs	r3, r4
 8006aa4:	f7ff fdf3 	bl	800668e <u8g2_add_vector_y>
 8006aa8:	0003      	movs	r3, r0
 8006aaa:	001a      	movs	r2, r3
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8006ab0:	211e      	movs	r1, #30
 8006ab2:	187b      	adds	r3, r7, r1
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	8892      	ldrh	r2, [r2, #4]
 8006ab8:	801a      	strh	r2, [r3, #0]
      y0 = decode->target_y;
 8006aba:	201a      	movs	r0, #26
 8006abc:	183b      	adds	r3, r7, r0
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	88d2      	ldrh	r2, [r2, #6]
 8006ac2:	801a      	strh	r2, [r3, #0]
      x1 = x0;
 8006ac4:	231c      	movs	r3, #28
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	187a      	adds	r2, r7, r1
 8006aca:	8812      	ldrh	r2, [r2, #0]
 8006acc:	801a      	strh	r2, [r3, #0]
      y1 = y0;
 8006ace:	2318      	movs	r3, #24
 8006ad0:	18fb      	adds	r3, r7, r3
 8006ad2:	183a      	adds	r2, r7, r0
 8006ad4:	8812      	ldrh	r2, [r2, #0]
 8006ad6:	801a      	strh	r2, [r3, #0]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	7c1b      	ldrb	r3, [r3, #16]
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d100      	bne.n	8006ae2 <u8g2_font_decode_glyph+0x10e>
 8006ae0:	e06d      	b.n	8006bbe <u8g2_font_decode_glyph+0x1ea>
 8006ae2:	dd00      	ble.n	8006ae6 <u8g2_font_decode_glyph+0x112>
 8006ae4:	e08c      	b.n	8006c00 <u8g2_font_decode_glyph+0x22c>
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d03d      	beq.n	8006b66 <u8g2_font_decode_glyph+0x192>
 8006aea:	dd00      	ble.n	8006aee <u8g2_font_decode_glyph+0x11a>
 8006aec:	e088      	b.n	8006c00 <u8g2_font_decode_glyph+0x22c>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <u8g2_font_decode_glyph+0x124>
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d016      	beq.n	8006b24 <u8g2_font_decode_glyph+0x150>
 8006af6:	e083      	b.n	8006c00 <u8g2_font_decode_glyph+0x22c>
      {
	case 0:
	    x1 += decode->glyph_width;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	7a9b      	ldrb	r3, [r3, #10]
 8006afc:	b25b      	sxtb	r3, r3
 8006afe:	b299      	uxth	r1, r3
 8006b00:	221c      	movs	r2, #28
 8006b02:	18bb      	adds	r3, r7, r2
 8006b04:	18ba      	adds	r2, r7, r2
 8006b06:	8812      	ldrh	r2, [r2, #0]
 8006b08:	188a      	adds	r2, r1, r2
 8006b0a:	801a      	strh	r2, [r3, #0]
	    y1 += h;
 8006b0c:	2313      	movs	r3, #19
 8006b0e:	18fb      	adds	r3, r7, r3
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	b25b      	sxtb	r3, r3
 8006b14:	b299      	uxth	r1, r3
 8006b16:	2218      	movs	r2, #24
 8006b18:	18bb      	adds	r3, r7, r2
 8006b1a:	18ba      	adds	r2, r7, r2
 8006b1c:	8812      	ldrh	r2, [r2, #0]
 8006b1e:	188a      	adds	r2, r1, r2
 8006b20:	801a      	strh	r2, [r3, #0]
	    break;
 8006b22:	e06d      	b.n	8006c00 <u8g2_font_decode_glyph+0x22c>
	case 1:
	    x0 -= h;
 8006b24:	2313      	movs	r3, #19
 8006b26:	18fb      	adds	r3, r7, r3
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	b25b      	sxtb	r3, r3
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	201e      	movs	r0, #30
 8006b30:	183b      	adds	r3, r7, r0
 8006b32:	1839      	adds	r1, r7, r0
 8006b34:	8809      	ldrh	r1, [r1, #0]
 8006b36:	1a8a      	subs	r2, r1, r2
 8006b38:	801a      	strh	r2, [r3, #0]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006b3a:	183b      	adds	r3, r7, r0
 8006b3c:	881a      	ldrh	r2, [r3, #0]
 8006b3e:	183b      	adds	r3, r7, r0
 8006b40:	3201      	adds	r2, #1
 8006b42:	801a      	strh	r2, [r3, #0]
	    x1++;
 8006b44:	211c      	movs	r1, #28
 8006b46:	187b      	adds	r3, r7, r1
 8006b48:	881a      	ldrh	r2, [r3, #0]
 8006b4a:	187b      	adds	r3, r7, r1
 8006b4c:	3201      	adds	r2, #1
 8006b4e:	801a      	strh	r2, [r3, #0]
	    y1 += decode->glyph_width;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	7a9b      	ldrb	r3, [r3, #10]
 8006b54:	b25b      	sxtb	r3, r3
 8006b56:	b299      	uxth	r1, r3
 8006b58:	2218      	movs	r2, #24
 8006b5a:	18bb      	adds	r3, r7, r2
 8006b5c:	18ba      	adds	r2, r7, r2
 8006b5e:	8812      	ldrh	r2, [r2, #0]
 8006b60:	188a      	adds	r2, r1, r2
 8006b62:	801a      	strh	r2, [r3, #0]
	    break;
 8006b64:	e04c      	b.n	8006c00 <u8g2_font_decode_glyph+0x22c>
	case 2:
	    x0 -= decode->glyph_width;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	7a9b      	ldrb	r3, [r3, #10]
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	201e      	movs	r0, #30
 8006b70:	183b      	adds	r3, r7, r0
 8006b72:	1839      	adds	r1, r7, r0
 8006b74:	8809      	ldrh	r1, [r1, #0]
 8006b76:	1a8a      	subs	r2, r1, r2
 8006b78:	801a      	strh	r2, [r3, #0]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006b7a:	183b      	adds	r3, r7, r0
 8006b7c:	881a      	ldrh	r2, [r3, #0]
 8006b7e:	183b      	adds	r3, r7, r0
 8006b80:	3201      	adds	r2, #1
 8006b82:	801a      	strh	r2, [r3, #0]
	    x1++;
 8006b84:	211c      	movs	r1, #28
 8006b86:	187b      	adds	r3, r7, r1
 8006b88:	881a      	ldrh	r2, [r3, #0]
 8006b8a:	187b      	adds	r3, r7, r1
 8006b8c:	3201      	adds	r2, #1
 8006b8e:	801a      	strh	r2, [r3, #0]
	    y0 -= h;
 8006b90:	2313      	movs	r3, #19
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	b25b      	sxtb	r3, r3
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	201a      	movs	r0, #26
 8006b9c:	183b      	adds	r3, r7, r0
 8006b9e:	1839      	adds	r1, r7, r0
 8006ba0:	8809      	ldrh	r1, [r1, #0]
 8006ba2:	1a8a      	subs	r2, r1, r2
 8006ba4:	801a      	strh	r2, [r3, #0]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006ba6:	183b      	adds	r3, r7, r0
 8006ba8:	881a      	ldrh	r2, [r3, #0]
 8006baa:	183b      	adds	r3, r7, r0
 8006bac:	3201      	adds	r2, #1
 8006bae:	801a      	strh	r2, [r3, #0]
	    y1++;
 8006bb0:	2118      	movs	r1, #24
 8006bb2:	187b      	adds	r3, r7, r1
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	3201      	adds	r2, #1
 8006bba:	801a      	strh	r2, [r3, #0]
	    break;	  
 8006bbc:	e020      	b.n	8006c00 <u8g2_font_decode_glyph+0x22c>
	case 3:
	    x1 += h;
 8006bbe:	2313      	movs	r3, #19
 8006bc0:	18fb      	adds	r3, r7, r3
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	b25b      	sxtb	r3, r3
 8006bc6:	b299      	uxth	r1, r3
 8006bc8:	221c      	movs	r2, #28
 8006bca:	18bb      	adds	r3, r7, r2
 8006bcc:	18ba      	adds	r2, r7, r2
 8006bce:	8812      	ldrh	r2, [r2, #0]
 8006bd0:	188a      	adds	r2, r1, r2
 8006bd2:	801a      	strh	r2, [r3, #0]
	    y0 -= decode->glyph_width;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	7a9b      	ldrb	r3, [r3, #10]
 8006bd8:	b25b      	sxtb	r3, r3
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	201a      	movs	r0, #26
 8006bde:	183b      	adds	r3, r7, r0
 8006be0:	1839      	adds	r1, r7, r0
 8006be2:	8809      	ldrh	r1, [r1, #0]
 8006be4:	1a8a      	subs	r2, r1, r2
 8006be6:	801a      	strh	r2, [r3, #0]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006be8:	183b      	adds	r3, r7, r0
 8006bea:	881a      	ldrh	r2, [r3, #0]
 8006bec:	183b      	adds	r3, r7, r0
 8006bee:	3201      	adds	r2, #1
 8006bf0:	801a      	strh	r2, [r3, #0]
	    y1++;
 8006bf2:	2118      	movs	r1, #24
 8006bf4:	187b      	adds	r3, r7, r1
 8006bf6:	881a      	ldrh	r2, [r3, #0]
 8006bf8:	187b      	adds	r3, r7, r1
 8006bfa:	3201      	adds	r2, #1
 8006bfc:	801a      	strh	r2, [r3, #0]
	    break;	  
 8006bfe:	46c0      	nop			@ (mov r8, r8)
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8006c00:	231c      	movs	r3, #28
 8006c02:	18fb      	adds	r3, r7, r3
 8006c04:	881c      	ldrh	r4, [r3, #0]
 8006c06:	231a      	movs	r3, #26
 8006c08:	18fb      	adds	r3, r7, r3
 8006c0a:	881a      	ldrh	r2, [r3, #0]
 8006c0c:	231e      	movs	r3, #30
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	8819      	ldrh	r1, [r3, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	2318      	movs	r3, #24
 8006c16:	18fb      	adds	r3, r7, r3
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	0023      	movs	r3, r4
 8006c1e:	f000 fdd3 	bl	80077c8 <u8g2_IsIntersection>
 8006c22:	1e03      	subs	r3, r0, #0
 8006c24:	d104      	bne.n	8006c30 <u8g2_font_decode_glyph+0x25c>
	return d;
 8006c26:	2310      	movs	r3, #16
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	b25b      	sxtb	r3, r3
 8006c2e:	e048      	b.n	8006cc2 <u8g2_font_decode_glyph+0x2ee>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2200      	movs	r2, #0
 8006c34:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2276      	movs	r2, #118	@ 0x76
 8006c40:	5c9a      	ldrb	r2, [r3, r2]
 8006c42:	230f      	movs	r3, #15
 8006c44:	18fc      	adds	r4, r7, r3
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	0011      	movs	r1, r2
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f7ff fc84 	bl	8006558 <u8g2_font_decode_get_unsigned_bits>
 8006c50:	0003      	movs	r3, r0
 8006c52:	7023      	strb	r3, [r4, #0]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2277      	movs	r2, #119	@ 0x77
 8006c58:	5c9a      	ldrb	r2, [r3, r2]
 8006c5a:	230e      	movs	r3, #14
 8006c5c:	18fc      	adds	r4, r7, r3
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	0011      	movs	r1, r2
 8006c62:	0018      	movs	r0, r3
 8006c64:	f7ff fc78 	bl	8006558 <u8g2_font_decode_get_unsigned_bits>
 8006c68:	0003      	movs	r3, r0
 8006c6a:	7023      	strb	r3, [r4, #0]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8006c6c:	230f      	movs	r3, #15
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	7819      	ldrb	r1, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	0018      	movs	r0, r3
 8006c78:	f7ff fd9f 	bl	80067ba <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8006c7c:	230e      	movs	r3, #14
 8006c7e:	18fb      	adds	r3, r7, r3
 8006c80:	7819      	ldrb	r1, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	0018      	movs	r0, r3
 8006c88:	f7ff fd97 	bl	80067ba <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2101      	movs	r1, #1
 8006c90:	0018      	movs	r0, r3
 8006c92:	f7ff fc61 	bl	8006558 <u8g2_font_decode_get_unsigned_bits>
 8006c96:	1e03      	subs	r3, r0, #0
 8006c98:	d1e8      	bne.n	8006c6c <u8g2_font_decode_glyph+0x298>

      if ( decode->y >= h )
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	7a5b      	ldrb	r3, [r3, #9]
 8006c9e:	b25b      	sxtb	r3, r3
 8006ca0:	2213      	movs	r2, #19
 8006ca2:	18ba      	adds	r2, r7, r2
 8006ca4:	7812      	ldrb	r2, [r2, #0]
 8006ca6:	b252      	sxtb	r2, r2
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	dd00      	ble.n	8006cae <u8g2_font_decode_glyph+0x2da>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006cac:	e7c6      	b.n	8006c3c <u8g2_font_decode_glyph+0x268>
	break;
 8006cae:	46c0      	nop			@ (mov r8, r8)
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	7b99      	ldrb	r1, [r3, #14]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2292      	movs	r2, #146	@ 0x92
 8006cb8:	5499      	strb	r1, [r3, r2]
  }
  return d;
 8006cba:	2310      	movs	r3, #16
 8006cbc:	18fb      	adds	r3, r7, r3
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b25b      	sxtb	r3, r3
}
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	b009      	add	sp, #36	@ 0x24
 8006cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cca <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8006cca:	b5b0      	push	{r4, r5, r7, lr}
 8006ccc:	b086      	sub	sp, #24
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	000a      	movs	r2, r1
 8006cd4:	1cbb      	adds	r3, r7, #2
 8006cd6:	801a      	strh	r2, [r3, #0]
  const uint8_t *font = u8g2->font;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cdc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	3317      	adds	r3, #23
 8006ce2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8006ce4:	1cbb      	adds	r3, r7, #2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	2bff      	cmp	r3, #255	@ 0xff
 8006cea:	d82d      	bhi.n	8006d48 <u8g2_font_get_glyph_data+0x7e>
  {
    if ( encoding >= 'a' )
 8006cec:	1cbb      	adds	r3, r7, #2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	2b60      	cmp	r3, #96	@ 0x60
 8006cf2:	d907      	bls.n	8006d04 <u8g2_font_get_glyph_data+0x3a>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2288      	movs	r2, #136	@ 0x88
 8006cf8:	5a9b      	ldrh	r3, [r3, r2]
 8006cfa:	001a      	movs	r2, r3
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	189b      	adds	r3, r3, r2
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	e00a      	b.n	8006d1a <u8g2_font_get_glyph_data+0x50>
    }
    else if ( encoding >= 'A' )
 8006d04:	1cbb      	adds	r3, r7, #2
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	2b40      	cmp	r3, #64	@ 0x40
 8006d0a:	d906      	bls.n	8006d1a <u8g2_font_get_glyph_data+0x50>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2286      	movs	r2, #134	@ 0x86
 8006d10:	5a9b      	ldrh	r3, [r3, r2]
 8006d12:	001a      	movs	r2, r3
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	189b      	adds	r3, r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d05e      	beq.n	8006de2 <u8g2_font_get_glyph_data+0x118>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	001a      	movs	r2, r3
 8006d2a:	1cbb      	adds	r3, r7, #2
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d102      	bne.n	8006d38 <u8g2_font_get_glyph_data+0x6e>
      {
	return font+2;	/* skip encoding and glyph size */
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	3302      	adds	r3, #2
 8006d36:	e058      	b.n	8006dea <u8g2_font_get_glyph_data+0x120>
      }
      font += u8x8_pgm_read( font + 1 );
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	001a      	movs	r2, r3
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	189b      	adds	r3, r3, r2
 8006d44:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006d46:	e7e8      	b.n	8006d1a <u8g2_font_get_glyph_data+0x50>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	228a      	movs	r2, #138	@ 0x8a
 8006d4c:	5a9b      	ldrh	r3, [r3, r2]
 8006d4e:	001a      	movs	r2, r3
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	189b      	adds	r3, r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7ff fb16 	bl	8006390 <u8g2_font_get_word>
 8006d64:	0003      	movs	r3, r0
 8006d66:	001a      	movs	r2, r3
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	189b      	adds	r3, r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8006d6e:	250e      	movs	r5, #14
 8006d70:	197c      	adds	r4, r7, r5
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2102      	movs	r1, #2
 8006d76:	0018      	movs	r0, r3
 8006d78:	f7ff fb0a 	bl	8006390 <u8g2_font_get_word>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	8023      	strh	r3, [r4, #0]
      unicode_lookup_table+=4;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	3304      	adds	r3, #4
 8006d84:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8006d86:	197a      	adds	r2, r7, r5
 8006d88:	1cbb      	adds	r3, r7, #2
 8006d8a:	8812      	ldrh	r2, [r2, #0]
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d3e3      	bcc.n	8006d5a <u8g2_font_get_glyph_data+0x90>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	781a      	ldrb	r2, [r3, #0]
 8006d96:	200e      	movs	r0, #14
 8006d98:	183b      	adds	r3, r7, r0
 8006d9a:	801a      	strh	r2, [r3, #0]
      e <<= 8;
 8006d9c:	183b      	adds	r3, r7, r0
 8006d9e:	183a      	adds	r2, r7, r0
 8006da0:	8812      	ldrh	r2, [r2, #0]
 8006da2:	0212      	lsls	r2, r2, #8
 8006da4:	801a      	strh	r2, [r3, #0]
      e |= u8x8_pgm_read( font + 1 );
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	3301      	adds	r3, #1
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	0019      	movs	r1, r3
 8006dae:	183b      	adds	r3, r7, r0
 8006db0:	183a      	adds	r2, r7, r0
 8006db2:	8812      	ldrh	r2, [r2, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	801a      	strh	r2, [r3, #0]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8006db8:	183b      	adds	r3, r7, r0
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d012      	beq.n	8006de6 <u8g2_font_get_glyph_data+0x11c>
	break;
  
      if ( e == encoding )
 8006dc0:	183a      	adds	r2, r7, r0
 8006dc2:	1cbb      	adds	r3, r7, #2
 8006dc4:	8812      	ldrh	r2, [r2, #0]
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d102      	bne.n	8006dd2 <u8g2_font_get_glyph_data+0x108>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	3303      	adds	r3, #3
 8006dd0:	e00b      	b.n	8006dea <u8g2_font_get_glyph_data+0x120>
      }
      font += u8x8_pgm_read( font + 2 );
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	001a      	movs	r2, r3
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	189b      	adds	r3, r3, r2
 8006dde:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8006de0:	e7d7      	b.n	8006d92 <u8g2_font_get_glyph_data+0xc8>
	break;
 8006de2:	46c0      	nop			@ (mov r8, r8)
 8006de4:	e000      	b.n	8006de8 <u8g2_font_get_glyph_data+0x11e>
	break;
 8006de6:	46c0      	nop			@ (mov r8, r8)
    }  
  }
#endif
  
  return NULL;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	0018      	movs	r0, r3
 8006dec:	46bd      	mov	sp, r7
 8006dee:	b006      	add	sp, #24
 8006df0:	bdb0      	pop	{r4, r5, r7, pc}

08006df2 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df4:	b087      	sub	sp, #28
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	000c      	movs	r4, r1
 8006dfc:	0010      	movs	r0, r2
 8006dfe:	0019      	movs	r1, r3
 8006e00:	250a      	movs	r5, #10
 8006e02:	197b      	adds	r3, r7, r5
 8006e04:	1c22      	adds	r2, r4, #0
 8006e06:	801a      	strh	r2, [r3, #0]
 8006e08:	2408      	movs	r4, #8
 8006e0a:	193b      	adds	r3, r7, r4
 8006e0c:	1c02      	adds	r2, r0, #0
 8006e0e:	801a      	strh	r2, [r3, #0]
 8006e10:	1dbb      	adds	r3, r7, #6
 8006e12:	1c0a      	adds	r2, r1, #0
 8006e14:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t dx = 0;
 8006e16:	2616      	movs	r6, #22
 8006e18:	19bb      	adds	r3, r7, r6
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	801a      	strh	r2, [r3, #0]
  u8g2->font_decode.target_x = x;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	197a      	adds	r2, r7, r5
 8006e22:	2164      	movs	r1, #100	@ 0x64
 8006e24:	8812      	ldrh	r2, [r2, #0]
 8006e26:	525a      	strh	r2, [r3, r1]
  u8g2->font_decode.target_y = y;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	193a      	adds	r2, r7, r4
 8006e2c:	2166      	movs	r1, #102	@ 0x66
 8006e2e:	8812      	ldrh	r2, [r2, #0]
 8006e30:	525a      	strh	r2, [r3, r1]
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8006e32:	1dbb      	adds	r3, r7, #6
 8006e34:	881a      	ldrh	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	0011      	movs	r1, r2
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f7ff ff45 	bl	8006cca <u8g2_font_get_glyph_data>
 8006e40:	0003      	movs	r3, r0
 8006e42:	613b      	str	r3, [r7, #16]
  if ( glyph_data != NULL )
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <u8g2_font_draw_glyph+0x6c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	0011      	movs	r1, r2
 8006e50:	0018      	movs	r0, r3
 8006e52:	f7ff fdbf 	bl	80069d4 <u8g2_font_decode_glyph>
 8006e56:	0003      	movs	r3, r0
 8006e58:	001a      	movs	r2, r3
 8006e5a:	19bb      	adds	r3, r7, r6
 8006e5c:	801a      	strh	r2, [r3, #0]
  }
  return dx;
 8006e5e:	2316      	movs	r3, #22
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	881b      	ldrh	r3, [r3, #0]
}
 8006e64:	0018      	movs	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b007      	add	sp, #28
 8006e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e6c <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	000a      	movs	r2, r1
 8006e76:	1cbb      	adds	r3, r7, #2
 8006e78:	801a      	strh	r2, [r3, #0]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8006e7a:	1cbb      	adds	r3, r7, #2
 8006e7c:	881a      	ldrh	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	0011      	movs	r1, r2
 8006e82:	0018      	movs	r0, r3
 8006e84:	f7ff ff21 	bl	8006cca <u8g2_font_get_glyph_data>
 8006e88:	0003      	movs	r3, r0
 8006e8a:	60fb      	str	r3, [r7, #12]
  if ( glyph_data == NULL )
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <u8g2_GetGlyphWidth+0x2a>
    return 0; 
 8006e92:	2300      	movs	r3, #0
 8006e94:	e029      	b.n	8006eea <u8g2_GetGlyphWidth+0x7e>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	0011      	movs	r1, r2
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7ff fd62 	bl	8006966 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3360      	adds	r3, #96	@ 0x60
 8006ea6:	001a      	movs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	217a      	movs	r1, #122	@ 0x7a
 8006eac:	5c5b      	ldrb	r3, [r3, r1]
 8006eae:	0019      	movs	r1, r3
 8006eb0:	0010      	movs	r0, r2
 8006eb2:	f7ff fbb9 	bl	8006628 <u8g2_font_decode_get_signed_bits>
 8006eb6:	0003      	movs	r3, r0
 8006eb8:	0019      	movs	r1, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2290      	movs	r2, #144	@ 0x90
 8006ebe:	5499      	strb	r1, [r3, r2]
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3360      	adds	r3, #96	@ 0x60
 8006ec4:	001a      	movs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	217b      	movs	r1, #123	@ 0x7b
 8006eca:	5c5b      	ldrb	r3, [r3, r1]
 8006ecc:	0019      	movs	r1, r3
 8006ece:	0010      	movs	r0, r2
 8006ed0:	f7ff fbaa 	bl	8006628 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3360      	adds	r3, #96	@ 0x60
 8006ed8:	001a      	movs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	217c      	movs	r1, #124	@ 0x7c
 8006ede:	5c5b      	ldrb	r3, [r3, r1]
 8006ee0:	0019      	movs	r1, r3
 8006ee2:	0010      	movs	r0, r2
 8006ee4:	f7ff fba0 	bl	8006628 <u8g2_font_decode_get_signed_bits>
 8006ee8:	0003      	movs	r3, r0
}
 8006eea:	0018      	movs	r0, r3
 8006eec:	46bd      	mov	sp, r7
 8006eee:	b004      	add	sp, #16
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006ef2:	b590      	push	{r4, r7, lr}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	000c      	movs	r4, r1
 8006efc:	0010      	movs	r0, r2
 8006efe:	0019      	movs	r1, r3
 8006f00:	230a      	movs	r3, #10
 8006f02:	18fb      	adds	r3, r7, r3
 8006f04:	1c22      	adds	r2, r4, #0
 8006f06:	801a      	strh	r2, [r3, #0]
 8006f08:	2308      	movs	r3, #8
 8006f0a:	18fb      	adds	r3, r7, r3
 8006f0c:	1c02      	adds	r2, r0, #0
 8006f0e:	801a      	strh	r2, [r3, #0]
 8006f10:	1dbb      	adds	r3, r7, #6
 8006f12:	1c0a      	adds	r2, r1, #0
 8006f14:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2270      	movs	r2, #112	@ 0x70
 8006f1a:	5c9b      	ldrb	r3, [r3, r2]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d032      	beq.n	8006f86 <u8g2_DrawGlyph+0x94>
 8006f20:	dc3f      	bgt.n	8006fa2 <u8g2_DrawGlyph+0xb0>
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d021      	beq.n	8006f6a <u8g2_DrawGlyph+0x78>
 8006f26:	dc3c      	bgt.n	8006fa2 <u8g2_DrawGlyph+0xb0>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <u8g2_DrawGlyph+0x40>
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d00e      	beq.n	8006f4e <u8g2_DrawGlyph+0x5c>
 8006f30:	e037      	b.n	8006fa2 <u8g2_DrawGlyph+0xb0>
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	0010      	movs	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	0003      	movs	r3, r0
 8006f3e:	0019      	movs	r1, r3
 8006f40:	2208      	movs	r2, #8
 8006f42:	18bb      	adds	r3, r7, r2
 8006f44:	18ba      	adds	r2, r7, r2
 8006f46:	8812      	ldrh	r2, [r2, #0]
 8006f48:	188a      	adds	r2, r1, r2
 8006f4a:	801a      	strh	r2, [r3, #0]
      break;
 8006f4c:	e029      	b.n	8006fa2 <u8g2_DrawGlyph+0xb0>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	0010      	movs	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	0003      	movs	r3, r0
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	18bb      	adds	r3, r7, r2
 8006f60:	18ba      	adds	r2, r7, r2
 8006f62:	8812      	ldrh	r2, [r2, #0]
 8006f64:	1a52      	subs	r2, r2, r1
 8006f66:	801a      	strh	r2, [r3, #0]
      break;
 8006f68:	e01b      	b.n	8006fa2 <u8g2_DrawGlyph+0xb0>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	0010      	movs	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	0003      	movs	r3, r0
 8006f76:	0019      	movs	r1, r3
 8006f78:	2208      	movs	r2, #8
 8006f7a:	18bb      	adds	r3, r7, r2
 8006f7c:	18ba      	adds	r2, r7, r2
 8006f7e:	8812      	ldrh	r2, [r2, #0]
 8006f80:	1a52      	subs	r2, r2, r1
 8006f82:	801a      	strh	r2, [r3, #0]
      break;
 8006f84:	e00d      	b.n	8006fa2 <u8g2_DrawGlyph+0xb0>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	0010      	movs	r0, r2
 8006f8e:	4798      	blx	r3
 8006f90:	0003      	movs	r3, r0
 8006f92:	0019      	movs	r1, r3
 8006f94:	220a      	movs	r2, #10
 8006f96:	18bb      	adds	r3, r7, r2
 8006f98:	18ba      	adds	r2, r7, r2
 8006f9a:	8812      	ldrh	r2, [r2, #0]
 8006f9c:	188a      	adds	r2, r1, r2
 8006f9e:	801a      	strh	r2, [r3, #0]
      break;
 8006fa0:	46c0      	nop			@ (mov r8, r8)
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8006fa2:	1dbb      	adds	r3, r7, #6
 8006fa4:	881c      	ldrh	r4, [r3, #0]
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	881a      	ldrh	r2, [r3, #0]
 8006fac:	230a      	movs	r3, #10
 8006fae:	18fb      	adds	r3, r7, r3
 8006fb0:	8819      	ldrh	r1, [r3, #0]
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	0023      	movs	r3, r4
 8006fb6:	f7ff ff1c 	bl	8006df2 <u8g2_font_draw_glyph>
 8006fba:	0003      	movs	r3, r0
}
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	b005      	add	sp, #20
 8006fc2:	bd90      	pop	{r4, r7, pc}

08006fc4 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006fc4:	b5b0      	push	{r4, r5, r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	0008      	movs	r0, r1
 8006fce:	0011      	movs	r1, r2
 8006fd0:	607b      	str	r3, [r7, #4]
 8006fd2:	230a      	movs	r3, #10
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	1c02      	adds	r2, r0, #0
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	2308      	movs	r3, #8
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	1c0a      	adds	r2, r1, #0
 8006fe0:	801a      	strh	r2, [r3, #0]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f000 ffb0 	bl	8007f4a <u8x8_utf8_init>
  sum = 0;
 8006fea:	2316      	movs	r3, #22
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	2200      	movs	r2, #0
 8006ff0:	801a      	strh	r2, [r3, #0]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	7811      	ldrb	r1, [r2, #0]
 8006ffa:	2514      	movs	r5, #20
 8006ffc:	197c      	adds	r4, r7, r5
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	0010      	movs	r0, r2
 8007002:	4798      	blx	r3
 8007004:	0003      	movs	r3, r0
 8007006:	8023      	strh	r3, [r4, #0]
    if ( e == 0x0ffff )
 8007008:	0029      	movs	r1, r5
 800700a:	187b      	adds	r3, r7, r1
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	4a31      	ldr	r2, [pc, #196]	@ (80070d4 <u8g2_draw_string+0x110>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d057      	beq.n	80070c4 <u8g2_draw_string+0x100>
      break;
    str++;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3301      	adds	r3, #1
 8007018:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800701a:	187b      	adds	r3, r7, r1
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	4a2e      	ldr	r2, [pc, #184]	@ (80070d8 <u8g2_draw_string+0x114>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d0e6      	beq.n	8006ff2 <u8g2_draw_string+0x2e>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8007024:	2312      	movs	r3, #18
 8007026:	18fc      	adds	r4, r7, r3
 8007028:	187b      	adds	r3, r7, r1
 800702a:	881d      	ldrh	r5, [r3, #0]
 800702c:	2308      	movs	r3, #8
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	881a      	ldrh	r2, [r3, #0]
 8007032:	230a      	movs	r3, #10
 8007034:	18fb      	adds	r3, r7, r3
 8007036:	8819      	ldrh	r1, [r3, #0]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	002b      	movs	r3, r5
 800703c:	f7ff ff59 	bl	8006ef2 <u8g2_DrawGlyph>
 8007040:	0003      	movs	r3, r0
 8007042:	8023      	strh	r3, [r4, #0]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2270      	movs	r2, #112	@ 0x70
 8007048:	5c9b      	ldrb	r3, [r3, r2]
 800704a:	2b03      	cmp	r3, #3
 800704c:	d026      	beq.n	800709c <u8g2_draw_string+0xd8>
 800704e:	dc2f      	bgt.n	80070b0 <u8g2_draw_string+0xec>
 8007050:	2b02      	cmp	r3, #2
 8007052:	d019      	beq.n	8007088 <u8g2_draw_string+0xc4>
 8007054:	dc2c      	bgt.n	80070b0 <u8g2_draw_string+0xec>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <u8g2_draw_string+0x9c>
 800705a:	2b01      	cmp	r3, #1
 800705c:	d00a      	beq.n	8007074 <u8g2_draw_string+0xb0>
 800705e:	e027      	b.n	80070b0 <u8g2_draw_string+0xec>
      {
	case 0:
	  x += delta;
 8007060:	220a      	movs	r2, #10
 8007062:	18bb      	adds	r3, r7, r2
 8007064:	18b9      	adds	r1, r7, r2
 8007066:	2212      	movs	r2, #18
 8007068:	18ba      	adds	r2, r7, r2
 800706a:	8809      	ldrh	r1, [r1, #0]
 800706c:	8812      	ldrh	r2, [r2, #0]
 800706e:	188a      	adds	r2, r1, r2
 8007070:	801a      	strh	r2, [r3, #0]
	  break;
 8007072:	e01d      	b.n	80070b0 <u8g2_draw_string+0xec>
	case 1:
	  y += delta;
 8007074:	2208      	movs	r2, #8
 8007076:	18bb      	adds	r3, r7, r2
 8007078:	18b9      	adds	r1, r7, r2
 800707a:	2212      	movs	r2, #18
 800707c:	18ba      	adds	r2, r7, r2
 800707e:	8809      	ldrh	r1, [r1, #0]
 8007080:	8812      	ldrh	r2, [r2, #0]
 8007082:	188a      	adds	r2, r1, r2
 8007084:	801a      	strh	r2, [r3, #0]
	  break;
 8007086:	e013      	b.n	80070b0 <u8g2_draw_string+0xec>
	case 2:
	  x -= delta;
 8007088:	220a      	movs	r2, #10
 800708a:	18bb      	adds	r3, r7, r2
 800708c:	18b9      	adds	r1, r7, r2
 800708e:	2212      	movs	r2, #18
 8007090:	18ba      	adds	r2, r7, r2
 8007092:	8809      	ldrh	r1, [r1, #0]
 8007094:	8812      	ldrh	r2, [r2, #0]
 8007096:	1a8a      	subs	r2, r1, r2
 8007098:	801a      	strh	r2, [r3, #0]
	  break;
 800709a:	e009      	b.n	80070b0 <u8g2_draw_string+0xec>
	case 3:
	  y -= delta;
 800709c:	2208      	movs	r2, #8
 800709e:	18bb      	adds	r3, r7, r2
 80070a0:	18b9      	adds	r1, r7, r2
 80070a2:	2212      	movs	r2, #18
 80070a4:	18ba      	adds	r2, r7, r2
 80070a6:	8809      	ldrh	r1, [r1, #0]
 80070a8:	8812      	ldrh	r2, [r2, #0]
 80070aa:	1a8a      	subs	r2, r1, r2
 80070ac:	801a      	strh	r2, [r3, #0]
	  break;
 80070ae:	46c0      	nop			@ (mov r8, r8)

#else
      x += delta;
#endif

      sum += delta;    
 80070b0:	2216      	movs	r2, #22
 80070b2:	18bb      	adds	r3, r7, r2
 80070b4:	18b9      	adds	r1, r7, r2
 80070b6:	2212      	movs	r2, #18
 80070b8:	18ba      	adds	r2, r7, r2
 80070ba:	8809      	ldrh	r1, [r1, #0]
 80070bc:	8812      	ldrh	r2, [r2, #0]
 80070be:	188a      	adds	r2, r1, r2
 80070c0:	801a      	strh	r2, [r3, #0]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80070c2:	e796      	b.n	8006ff2 <u8g2_draw_string+0x2e>
      break;
 80070c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sum;
 80070c6:	2316      	movs	r3, #22
 80070c8:	18fb      	adds	r3, r7, r3
 80070ca:	881b      	ldrh	r3, [r3, #0]
}
 80070cc:	0018      	movs	r0, r3
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b006      	add	sp, #24
 80070d2:	bdb0      	pop	{r4, r5, r7, pc}
 80070d4:	0000ffff 	.word	0x0000ffff
 80070d8:	0000fffe 	.word	0x0000fffe

080070dc <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80070dc:	b5b0      	push	{r4, r5, r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	0008      	movs	r0, r1
 80070e6:	0011      	movs	r1, r2
 80070e8:	607b      	str	r3, [r7, #4]
 80070ea:	250a      	movs	r5, #10
 80070ec:	197b      	adds	r3, r7, r5
 80070ee:	1c02      	adds	r2, r0, #0
 80070f0:	801a      	strh	r2, [r3, #0]
 80070f2:	2008      	movs	r0, #8
 80070f4:	183b      	adds	r3, r7, r0
 80070f6:	1c0a      	adds	r2, r1, #0
 80070f8:	801a      	strh	r2, [r3, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4a07      	ldr	r2, [pc, #28]	@ (800711c <u8g2_DrawStr+0x40>)
 80070fe:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8007100:	687c      	ldr	r4, [r7, #4]
 8007102:	183b      	adds	r3, r7, r0
 8007104:	881a      	ldrh	r2, [r3, #0]
 8007106:	197b      	adds	r3, r7, r5
 8007108:	8819      	ldrh	r1, [r3, #0]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	0023      	movs	r3, r4
 800710e:	f7ff ff59 	bl	8006fc4 <u8g2_draw_string>
 8007112:	0003      	movs	r3, r0
}
 8007114:	0018      	movs	r0, r3
 8007116:	46bd      	mov	sp, r7
 8007118:	b004      	add	sp, #16
 800711a:	bdb0      	pop	{r4, r5, r7, pc}
 800711c:	08007f65 	.word	0x08007f65

08007120 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712c:	2b00      	cmp	r3, #0
 800712e:	d05d      	beq.n	80071ec <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2281      	movs	r2, #129	@ 0x81
 8007134:	5699      	ldrsb	r1, [r3, r2]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	228e      	movs	r2, #142	@ 0x8e
 800713a:	5499      	strb	r1, [r3, r2]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2282      	movs	r2, #130	@ 0x82
 8007140:	5699      	ldrsb	r1, [r3, r2]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	228f      	movs	r2, #143	@ 0x8f
 8007146:	5499      	strb	r1, [r3, r2]
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	228d      	movs	r2, #141	@ 0x8d
 800714c:	5c9b      	ldrb	r3, [r3, r2]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d04d      	beq.n	80071ee <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	228d      	movs	r2, #141	@ 0x8d
 8007156:	5c9b      	ldrb	r3, [r3, r2]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d11c      	bne.n	8007196 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	228e      	movs	r2, #142	@ 0x8e
 8007160:	569a      	ldrsb	r2, [r3, r2]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2183      	movs	r1, #131	@ 0x83
 8007166:	565b      	ldrsb	r3, [r3, r1]
 8007168:	429a      	cmp	r2, r3
 800716a:	da05      	bge.n	8007178 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2283      	movs	r2, #131	@ 0x83
 8007170:	5699      	ldrsb	r1, [r3, r2]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	228e      	movs	r2, #142	@ 0x8e
 8007176:	5499      	strb	r1, [r3, r2]
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	228f      	movs	r2, #143	@ 0x8f
 800717c:	569a      	ldrsb	r2, [r3, r2]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2184      	movs	r1, #132	@ 0x84
 8007182:	565b      	ldrsb	r3, [r3, r1]
 8007184:	429a      	cmp	r2, r3
 8007186:	dd32      	ble.n	80071ee <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2284      	movs	r2, #132	@ 0x84
 800718c:	5699      	ldrsb	r1, [r3, r2]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	228f      	movs	r2, #143	@ 0x8f
 8007192:	5499      	strb	r1, [r3, r2]
 8007194:	e02b      	b.n	80071ee <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	228e      	movs	r2, #142	@ 0x8e
 800719a:	569b      	ldrsb	r3, [r3, r2]
 800719c:	0019      	movs	r1, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	227e      	movs	r2, #126	@ 0x7e
 80071a2:	569b      	ldrsb	r3, [r3, r2]
 80071a4:	0018      	movs	r0, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2280      	movs	r2, #128	@ 0x80
 80071aa:	569b      	ldrsb	r3, [r3, r2]
 80071ac:	18c3      	adds	r3, r0, r3
 80071ae:	4299      	cmp	r1, r3
 80071b0:	da0d      	bge.n	80071ce <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	227e      	movs	r2, #126	@ 0x7e
 80071b6:	569b      	ldrsb	r3, [r3, r2]
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2180      	movs	r1, #128	@ 0x80
 80071be:	565b      	ldrsb	r3, [r3, r1]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	18d3      	adds	r3, r2, r3
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	b259      	sxtb	r1, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	228e      	movs	r2, #142	@ 0x8e
 80071cc:	5499      	strb	r1, [r3, r2]
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	228f      	movs	r2, #143	@ 0x8f
 80071d2:	569a      	ldrsb	r2, [r3, r2]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2180      	movs	r1, #128	@ 0x80
 80071d8:	565b      	ldrsb	r3, [r3, r1]
 80071da:	429a      	cmp	r2, r3
 80071dc:	dd07      	ble.n	80071ee <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2280      	movs	r2, #128	@ 0x80
 80071e2:	5699      	ldrsb	r1, [r3, r2]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	228f      	movs	r2, #143	@ 0x8f
 80071e8:	5499      	strb	r1, [r3, r2]
 80071ea:	e000      	b.n	80071ee <u8g2_UpdateRefHeight+0xce>
    return;
 80071ec:	46c0      	nop			@ (mov r8, r8)
  }  
}
 80071ee:	46bd      	mov	sp, r7
 80071f0:	b002      	add	sp, #8
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  return 0;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	0018      	movs	r0, r3
 8007200:	46bd      	mov	sp, r7
 8007202:	b002      	add	sp, #8
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a03      	ldr	r2, [pc, #12]	@ (8007220 <u8g2_SetFontPosBaseline+0x18>)
 8007214:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007216:	46c0      	nop			@ (mov r8, r8)
 8007218:	46bd      	mov	sp, r7
 800721a:	b002      	add	sp, #8
 800721c:	bd80      	pop	{r7, pc}
 800721e:	46c0      	nop			@ (mov r8, r8)
 8007220:	080071f5 	.word	0x080071f5

08007224 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d00d      	beq.n	8007254 <u8g2_SetFont+0x30>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	659a      	str	r2, [r3, #88]	@ 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3374      	adds	r3, #116	@ 0x74
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	0011      	movs	r1, r2
 8007246:	0018      	movs	r0, r3
 8007248:	f7ff f8c9 	bl	80063de <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	0018      	movs	r0, r3
 8007250:	f7ff ff66 	bl	8007120 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8007254:	46c0      	nop			@ (mov r8, r8)
 8007256:	46bd      	mov	sp, r7
 8007258:	b002      	add	sp, #8
 800725a:	bd80      	pop	{r7, pc}

0800725c <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 800725c:	b5b0      	push	{r4, r5, r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
  int8_t initial_x_offset = -64;
 8007266:	230b      	movs	r3, #11
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	22c0      	movs	r2, #192	@ 0xc0
 800726c:	701a      	strb	r2, [r3, #0]
#endif 
  
  u8g2->font_decode.glyph_width = 0;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	226a      	movs	r2, #106	@ 0x6a
 8007272:	2100      	movs	r1, #0
 8007274:	5499      	strb	r1, [r3, r2]
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	0018      	movs	r0, r3
 800727a:	f000 fe66 	bl	8007f4a <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 800727e:	230e      	movs	r3, #14
 8007280:	18fb      	adds	r3, r7, r3
 8007282:	2200      	movs	r2, #0
 8007284:	801a      	strh	r2, [r3, #0]
  dx = 0;
 8007286:	230c      	movs	r3, #12
 8007288:	18fb      	adds	r3, r7, r3
 800728a:	2200      	movs	r2, #0
 800728c:	801a      	strh	r2, [r3, #0]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	7811      	ldrb	r1, [r2, #0]
 8007296:	2508      	movs	r5, #8
 8007298:	197c      	adds	r4, r7, r5
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	0010      	movs	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	0003      	movs	r3, r0
 80072a2:	8023      	strh	r3, [r4, #0]
    if ( e == 0x0ffff )
 80072a4:	0029      	movs	r1, r5
 80072a6:	187b      	adds	r3, r7, r1
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	4a31      	ldr	r2, [pc, #196]	@ (8007370 <u8g2_string_width+0x114>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d028      	beq.n	8007302 <u8g2_string_width+0xa6>
      break;
    str++;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	3301      	adds	r3, #1
 80072b4:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 80072b6:	187b      	adds	r3, r7, r1
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	4a2e      	ldr	r2, [pc, #184]	@ (8007374 <u8g2_string_width+0x118>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d0e6      	beq.n	800728e <u8g2_string_width+0x32>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph, side effect: updates u8g2->glyph_x_offset */
 80072c0:	187b      	adds	r3, r7, r1
 80072c2:	881a      	ldrh	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	0011      	movs	r1, r2
 80072c8:	0018      	movs	r0, r3
 80072ca:	f7ff fdcf 	bl	8006e6c <u8g2_GetGlyphWidth>
 80072ce:	0003      	movs	r3, r0
 80072d0:	001a      	movs	r2, r3
 80072d2:	230c      	movs	r3, #12
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
      if ( initial_x_offset == -64 )
 80072d8:	220b      	movs	r2, #11
 80072da:	18bb      	adds	r3, r7, r2
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b25b      	sxtb	r3, r3
 80072e0:	3340      	adds	r3, #64	@ 0x40
 80072e2:	d104      	bne.n	80072ee <u8g2_string_width+0x92>
        initial_x_offset = u8g2->glyph_x_offset;
 80072e4:	18bb      	adds	r3, r7, r2
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	2190      	movs	r1, #144	@ 0x90
 80072ea:	5c52      	ldrb	r2, [r2, r1]
 80072ec:	701a      	strb	r2, [r3, #0]
#endif 
      //printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
      w += dx;
 80072ee:	220e      	movs	r2, #14
 80072f0:	18bb      	adds	r3, r7, r2
 80072f2:	18b9      	adds	r1, r7, r2
 80072f4:	220c      	movs	r2, #12
 80072f6:	18ba      	adds	r2, r7, r2
 80072f8:	8809      	ldrh	r1, [r1, #0]
 80072fa:	8812      	ldrh	r2, [r2, #0]
 80072fc:	188a      	adds	r2, r1, r2
 80072fe:	801a      	strh	r2, [r3, #0]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8007300:	e7c5      	b.n	800728e <u8g2_string_width+0x32>
      break;
 8007302:	46c0      	nop			@ (mov r8, r8)
    }
  }
  //printf("\n");
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	226a      	movs	r2, #106	@ 0x6a
 8007308:	569b      	ldrsb	r3, [r3, r2]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d029      	beq.n	8007362 <u8g2_string_width+0x106>
  {
    //printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
    w -= dx;
 800730e:	200e      	movs	r0, #14
 8007310:	183b      	adds	r3, r7, r0
 8007312:	1839      	adds	r1, r7, r0
 8007314:	220c      	movs	r2, #12
 8007316:	18ba      	adds	r2, r7, r2
 8007318:	8809      	ldrh	r1, [r1, #0]
 800731a:	8812      	ldrh	r2, [r2, #0]
 800731c:	1a8a      	subs	r2, r1, r2
 800731e:	801a      	strh	r2, [r3, #0]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	226a      	movs	r2, #106	@ 0x6a
 8007324:	569b      	ldrsb	r3, [r3, r2]
 8007326:	b299      	uxth	r1, r3
 8007328:	183b      	adds	r3, r7, r0
 800732a:	183a      	adds	r2, r7, r0
 800732c:	8812      	ldrh	r2, [r2, #0]
 800732e:	188a      	adds	r2, r1, r2
 8007330:	801a      	strh	r2, [r3, #0]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2290      	movs	r2, #144	@ 0x90
 8007336:	569b      	ldrsb	r3, [r3, r2]
 8007338:	b299      	uxth	r1, r3
 800733a:	183b      	adds	r3, r7, r0
 800733c:	183a      	adds	r2, r7, r0
 800733e:	8812      	ldrh	r2, [r2, #0]
 8007340:	188a      	adds	r2, r1, r2
 8007342:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
    /* https://github.com/olikraus/u8g2/issues/1561 */
    if ( initial_x_offset > 0 )
 8007344:	220b      	movs	r2, #11
 8007346:	18bb      	adds	r3, r7, r2
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b25b      	sxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	dd08      	ble.n	8007362 <u8g2_string_width+0x106>
      w+=initial_x_offset;
 8007350:	18bb      	adds	r3, r7, r2
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	b25b      	sxtb	r3, r3
 8007356:	b299      	uxth	r1, r3
 8007358:	183b      	adds	r3, r7, r0
 800735a:	183a      	adds	r2, r7, r0
 800735c:	8812      	ldrh	r2, [r2, #0]
 800735e:	188a      	adds	r2, r1, r2
 8007360:	801a      	strh	r2, [r3, #0]
#endif 
  }
  // printf("w=%d \n", w);
  
  return w;  
 8007362:	230e      	movs	r3, #14
 8007364:	18fb      	adds	r3, r7, r3
 8007366:	881b      	ldrh	r3, [r3, #0]
}
 8007368:	0018      	movs	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	b004      	add	sp, #16
 800736e:	bdb0      	pop	{r4, r5, r7, pc}
 8007370:	0000ffff 	.word	0x0000ffff
 8007374:	0000fffe 	.word	0x0000fffe

08007378 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a06      	ldr	r2, [pc, #24]	@ (80073a0 <u8g2_GetStrWidth+0x28>)
 8007386:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	0011      	movs	r1, r2
 800738e:	0018      	movs	r0, r3
 8007390:	f7ff ff64 	bl	800725c <u8g2_string_width>
 8007394:	0003      	movs	r3, r0
}
 8007396:	0018      	movs	r0, r3
 8007398:	46bd      	mov	sp, r7
 800739a:	b002      	add	sp, #8
 800739c:	bd80      	pop	{r7, pc}
 800739e:	46c0      	nop			@ (mov r8, r8)
 80073a0:	08007f65 	.word	0x08007f65

080073a4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80073a4:	b590      	push	{r4, r7, lr}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	0019      	movs	r1, r3
 80073b0:	1dbb      	adds	r3, r7, #6
 80073b2:	801a      	strh	r2, [r3, #0]
 80073b4:	1d3b      	adds	r3, r7, #4
 80073b6:	1c0a      	adds	r2, r1, #0
 80073b8:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t a = *ap;
 80073ba:	2416      	movs	r4, #22
 80073bc:	193b      	adds	r3, r7, r4
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	8812      	ldrh	r2, [r2, #0]
 80073c2:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t b;
  b  = a;
 80073c4:	2014      	movs	r0, #20
 80073c6:	183b      	adds	r3, r7, r0
 80073c8:	193a      	adds	r2, r7, r4
 80073ca:	8812      	ldrh	r2, [r2, #0]
 80073cc:	801a      	strh	r2, [r3, #0]
  b += *len;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	8819      	ldrh	r1, [r3, #0]
 80073d2:	183b      	adds	r3, r7, r0
 80073d4:	183a      	adds	r2, r7, r0
 80073d6:	8812      	ldrh	r2, [r2, #0]
 80073d8:	188a      	adds	r2, r1, r2
 80073da:	801a      	strh	r2, [r3, #0]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80073dc:	193a      	adds	r2, r7, r4
 80073de:	0001      	movs	r1, r0
 80073e0:	187b      	adds	r3, r7, r1
 80073e2:	8812      	ldrh	r2, [r2, #0]
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d914      	bls.n	8007414 <u8g2_clip_intersection2+0x70>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80073ea:	193a      	adds	r2, r7, r4
 80073ec:	1d3b      	adds	r3, r7, #4
 80073ee:	8812      	ldrh	r2, [r2, #0]
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d209      	bcs.n	800740a <u8g2_clip_intersection2+0x66>
    {
      b = d;
 80073f6:	187b      	adds	r3, r7, r1
 80073f8:	1d3a      	adds	r2, r7, #4
 80073fa:	8812      	ldrh	r2, [r2, #0]
 80073fc:	801a      	strh	r2, [r3, #0]
      b--;
 80073fe:	187b      	adds	r3, r7, r1
 8007400:	881a      	ldrh	r2, [r3, #0]
 8007402:	187b      	adds	r3, r7, r1
 8007404:	3a01      	subs	r2, #1
 8007406:	801a      	strh	r2, [r3, #0]
 8007408:	e004      	b.n	8007414 <u8g2_clip_intersection2+0x70>
    }
    else
    {
      a = c;
 800740a:	2316      	movs	r3, #22
 800740c:	18fb      	adds	r3, r7, r3
 800740e:	1dba      	adds	r2, r7, #6
 8007410:	8812      	ldrh	r2, [r2, #0]
 8007412:	801a      	strh	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8007414:	2316      	movs	r3, #22
 8007416:	18fa      	adds	r2, r7, r3
 8007418:	1d3b      	adds	r3, r7, #4
 800741a:	8812      	ldrh	r2, [r2, #0]
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d301      	bcc.n	8007426 <u8g2_clip_intersection2+0x82>
    return 0;
 8007422:	2300      	movs	r3, #0
 8007424:	e030      	b.n	8007488 <u8g2_clip_intersection2+0xe4>
  if ( b <= c )
 8007426:	2314      	movs	r3, #20
 8007428:	18fa      	adds	r2, r7, r3
 800742a:	1dbb      	adds	r3, r7, #6
 800742c:	8812      	ldrh	r2, [r2, #0]
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d801      	bhi.n	8007438 <u8g2_clip_intersection2+0x94>
    return 0;
 8007434:	2300      	movs	r3, #0
 8007436:	e027      	b.n	8007488 <u8g2_clip_intersection2+0xe4>
  if ( a < c )		
 8007438:	2116      	movs	r1, #22
 800743a:	187a      	adds	r2, r7, r1
 800743c:	1dbb      	adds	r3, r7, #6
 800743e:	8812      	ldrh	r2, [r2, #0]
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d203      	bcs.n	800744e <u8g2_clip_intersection2+0xaa>
    a = c;
 8007446:	187b      	adds	r3, r7, r1
 8007448:	1dba      	adds	r2, r7, #6
 800744a:	8812      	ldrh	r2, [r2, #0]
 800744c:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 800744e:	2114      	movs	r1, #20
 8007450:	187a      	adds	r2, r7, r1
 8007452:	1d3b      	adds	r3, r7, #4
 8007454:	8812      	ldrh	r2, [r2, #0]
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d903      	bls.n	8007464 <u8g2_clip_intersection2+0xc0>
    b = d;
 800745c:	187b      	adds	r3, r7, r1
 800745e:	1d3a      	adds	r2, r7, #4
 8007460:	8812      	ldrh	r2, [r2, #0]
 8007462:	801a      	strh	r2, [r3, #0]
  
  *ap = a;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2416      	movs	r4, #22
 8007468:	193a      	adds	r2, r7, r4
 800746a:	8812      	ldrh	r2, [r2, #0]
 800746c:	801a      	strh	r2, [r3, #0]
  b -= a;
 800746e:	2014      	movs	r0, #20
 8007470:	183b      	adds	r3, r7, r0
 8007472:	1839      	adds	r1, r7, r0
 8007474:	193a      	adds	r2, r7, r4
 8007476:	8809      	ldrh	r1, [r1, #0]
 8007478:	8812      	ldrh	r2, [r2, #0]
 800747a:	1a8a      	subs	r2, r1, r2
 800747c:	801a      	strh	r2, [r3, #0]
  *len = b;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	183a      	adds	r2, r7, r0
 8007482:	8812      	ldrh	r2, [r2, #0]
 8007484:	801a      	strh	r2, [r3, #0]
  return 1;
 8007486:	2301      	movs	r3, #1
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b007      	add	sp, #28
 800748e:	bd90      	pop	{r4, r7, pc}

08007490 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007492:	b087      	sub	sp, #28
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	000c      	movs	r4, r1
 800749a:	0010      	movs	r0, r2
 800749c:	0019      	movs	r1, r3
 800749e:	260a      	movs	r6, #10
 80074a0:	19bb      	adds	r3, r7, r6
 80074a2:	1c22      	adds	r2, r4, #0
 80074a4:	801a      	strh	r2, [r3, #0]
 80074a6:	2408      	movs	r4, #8
 80074a8:	193b      	adds	r3, r7, r4
 80074aa:	1c02      	adds	r2, r0, #0
 80074ac:	801a      	strh	r2, [r3, #0]
 80074ae:	1dbb      	adds	r3, r7, #6
 80074b0:	1c0a      	adds	r2, r1, #0
 80074b2:	801a      	strh	r2, [r3, #0]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80074b8:	0020      	movs	r0, r4
 80074ba:	183b      	adds	r3, r7, r0
 80074bc:	1839      	adds	r1, r7, r0
 80074be:	8809      	ldrh	r1, [r1, #0]
 80074c0:	1a8a      	subs	r2, r1, r2
 80074c2:	801a      	strh	r2, [r3, #0]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80074c8:	1dbb      	adds	r3, r7, #6
 80074ca:	881d      	ldrh	r5, [r3, #0]
 80074cc:	183b      	adds	r3, r7, r0
 80074ce:	881a      	ldrh	r2, [r3, #0]
 80074d0:	19bb      	adds	r3, r7, r6
 80074d2:	8819      	ldrh	r1, [r3, #0]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	2320      	movs	r3, #32
 80074d8:	2608      	movs	r6, #8
 80074da:	199b      	adds	r3, r3, r6
 80074dc:	19db      	adds	r3, r3, r7
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	002b      	movs	r3, r5
 80074e4:	47a0      	blx	r4
}
 80074e6:	46c0      	nop			@ (mov r8, r8)
 80074e8:	46bd      	mov	sp, r7
 80074ea:	b005      	add	sp, #20
 80074ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074ee <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80074ee:	b5b0      	push	{r4, r5, r7, lr}
 80074f0:	b086      	sub	sp, #24
 80074f2:	af02      	add	r7, sp, #8
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	000c      	movs	r4, r1
 80074f8:	0010      	movs	r0, r2
 80074fa:	0019      	movs	r1, r3
 80074fc:	250a      	movs	r5, #10
 80074fe:	197b      	adds	r3, r7, r5
 8007500:	1c22      	adds	r2, r4, #0
 8007502:	801a      	strh	r2, [r3, #0]
 8007504:	2308      	movs	r3, #8
 8007506:	18fb      	adds	r3, r7, r3
 8007508:	1c02      	adds	r2, r0, #0
 800750a:	801a      	strh	r2, [r3, #0]
 800750c:	1dbb      	adds	r3, r7, #6
 800750e:	1c0a      	adds	r2, r1, #0
 8007510:	801a      	strh	r2, [r3, #0]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	228c      	movs	r2, #140	@ 0x8c
 8007516:	5c9b      	ldrb	r3, [r3, r2]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d100      	bne.n	800751e <u8g2_DrawHVLine+0x30>
 800751c:	e090      	b.n	8007640 <u8g2_DrawHVLine+0x152>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800751e:	1dbb      	adds	r3, r7, #6
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d100      	bne.n	8007528 <u8g2_DrawHVLine+0x3a>
 8007526:	e08b      	b.n	8007640 <u8g2_DrawHVLine+0x152>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8007528:	1dbb      	adds	r3, r7, #6
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d927      	bls.n	8007580 <u8g2_DrawHVLine+0x92>
      {
	if ( dir == 2 )
 8007530:	2320      	movs	r3, #32
 8007532:	18fb      	adds	r3, r7, r3
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d10e      	bne.n	8007558 <u8g2_DrawHVLine+0x6a>
	{
	  x -= len;
 800753a:	197b      	adds	r3, r7, r5
 800753c:	881a      	ldrh	r2, [r3, #0]
 800753e:	1dbb      	adds	r3, r7, #6
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	b29a      	uxth	r2, r3
 8007546:	197b      	adds	r3, r7, r5
 8007548:	801a      	strh	r2, [r3, #0]
	  x++;
 800754a:	197b      	adds	r3, r7, r5
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	197b      	adds	r3, r7, r5
 8007554:	801a      	strh	r2, [r3, #0]
 8007556:	e013      	b.n	8007580 <u8g2_DrawHVLine+0x92>
	}
	else if ( dir == 3 )
 8007558:	2320      	movs	r3, #32
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b03      	cmp	r3, #3
 8007560:	d10e      	bne.n	8007580 <u8g2_DrawHVLine+0x92>
	{
	  y -= len;
 8007562:	2108      	movs	r1, #8
 8007564:	187b      	adds	r3, r7, r1
 8007566:	881a      	ldrh	r2, [r3, #0]
 8007568:	1dbb      	adds	r3, r7, #6
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	b29a      	uxth	r2, r3
 8007570:	187b      	adds	r3, r7, r1
 8007572:	801a      	strh	r2, [r3, #0]
	  y++;
 8007574:	187b      	adds	r3, r7, r1
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	187b      	adds	r3, r7, r1
 800757e:	801a      	strh	r2, [r3, #0]
	}
      }
      dir &= 1;  
 8007580:	2020      	movs	r0, #32
 8007582:	183b      	adds	r3, r7, r0
 8007584:	183a      	adds	r2, r7, r0
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	2101      	movs	r1, #1
 800758a:	400a      	ands	r2, r1
 800758c:	701a      	strb	r2, [r3, #0]
      
      /* clip against the user window */
      if ( dir == 0 )
 800758e:	183b      	adds	r3, r7, r0
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d11c      	bne.n	80075d0 <u8g2_DrawHVLine+0xe2>
      {
	if ( y < u8g2->user_y0 )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	224c      	movs	r2, #76	@ 0x4c
 800759a:	5a9a      	ldrh	r2, [r3, r2]
 800759c:	2108      	movs	r1, #8
 800759e:	187b      	adds	r3, r7, r1
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d843      	bhi.n	800762e <u8g2_DrawHVLine+0x140>
	  return;
	if ( y >= u8g2->user_y1 )
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	224e      	movs	r2, #78	@ 0x4e
 80075aa:	5a9a      	ldrh	r2, [r3, r2]
 80075ac:	187b      	adds	r3, r7, r1
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d93e      	bls.n	8007632 <u8g2_DrawHVLine+0x144>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2248      	movs	r2, #72	@ 0x48
 80075b8:	5a9a      	ldrh	r2, [r3, r2]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	214a      	movs	r1, #74	@ 0x4a
 80075be:	5a5b      	ldrh	r3, [r3, r1]
 80075c0:	1db9      	adds	r1, r7, #6
 80075c2:	200a      	movs	r0, #10
 80075c4:	1838      	adds	r0, r7, r0
 80075c6:	f7ff feed 	bl	80073a4 <u8g2_clip_intersection2>
 80075ca:	1e03      	subs	r3, r0, #0
 80075cc:	d11c      	bne.n	8007608 <u8g2_DrawHVLine+0x11a>
	  return;
 80075ce:	e037      	b.n	8007640 <u8g2_DrawHVLine+0x152>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2248      	movs	r2, #72	@ 0x48
 80075d4:	5a9a      	ldrh	r2, [r3, r2]
 80075d6:	210a      	movs	r1, #10
 80075d8:	187b      	adds	r3, r7, r1
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d82a      	bhi.n	8007636 <u8g2_DrawHVLine+0x148>
	  return;
	if ( x >= u8g2->user_x1 )
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	224a      	movs	r2, #74	@ 0x4a
 80075e4:	5a9a      	ldrh	r2, [r3, r2]
 80075e6:	187b      	adds	r3, r7, r1
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d925      	bls.n	800763a <u8g2_DrawHVLine+0x14c>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	224c      	movs	r2, #76	@ 0x4c
 80075f2:	5a9a      	ldrh	r2, [r3, r2]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	214e      	movs	r1, #78	@ 0x4e
 80075f8:	5a5b      	ldrh	r3, [r3, r1]
 80075fa:	1db9      	adds	r1, r7, #6
 80075fc:	2008      	movs	r0, #8
 80075fe:	1838      	adds	r0, r7, r0
 8007600:	f7ff fed0 	bl	80073a4 <u8g2_clip_intersection2>
 8007604:	1e03      	subs	r3, r0, #0
 8007606:	d01a      	beq.n	800763e <u8g2_DrawHVLine+0x150>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760c:	689c      	ldr	r4, [r3, #8]
 800760e:	230a      	movs	r3, #10
 8007610:	18fb      	adds	r3, r7, r3
 8007612:	8819      	ldrh	r1, [r3, #0]
 8007614:	2308      	movs	r3, #8
 8007616:	18fb      	adds	r3, r7, r3
 8007618:	881a      	ldrh	r2, [r3, #0]
 800761a:	1dbb      	adds	r3, r7, #6
 800761c:	881d      	ldrh	r5, [r3, #0]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	2320      	movs	r3, #32
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	002b      	movs	r3, r5
 800762a:	47a0      	blx	r4
 800762c:	e008      	b.n	8007640 <u8g2_DrawHVLine+0x152>
	  return;
 800762e:	46c0      	nop			@ (mov r8, r8)
 8007630:	e006      	b.n	8007640 <u8g2_DrawHVLine+0x152>
	  return;
 8007632:	46c0      	nop			@ (mov r8, r8)
 8007634:	e004      	b.n	8007640 <u8g2_DrawHVLine+0x152>
	  return;
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	e002      	b.n	8007640 <u8g2_DrawHVLine+0x152>
	  return;
 800763a:	46c0      	nop			@ (mov r8, r8)
 800763c:	e000      	b.n	8007640 <u8g2_DrawHVLine+0x152>
	  return;
 800763e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8007640:	46bd      	mov	sp, r7
 8007642:	b004      	add	sp, #16
 8007644:	bdb0      	pop	{r4, r5, r7, pc}

08007646 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8007646:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007648:	b087      	sub	sp, #28
 800764a:	af02      	add	r7, sp, #8
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	000c      	movs	r4, r1
 8007650:	0010      	movs	r0, r2
 8007652:	0019      	movs	r1, r3
 8007654:	250a      	movs	r5, #10
 8007656:	197b      	adds	r3, r7, r5
 8007658:	1c22      	adds	r2, r4, #0
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	2608      	movs	r6, #8
 800765e:	19bb      	adds	r3, r7, r6
 8007660:	1c02      	adds	r2, r0, #0
 8007662:	801a      	strh	r2, [r3, #0]
 8007664:	1dbb      	adds	r3, r7, #6
 8007666:	1c0a      	adds	r2, r1, #0
 8007668:	801a      	strh	r2, [r3, #0]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800766a:	1dbb      	adds	r3, r7, #6
 800766c:	881c      	ldrh	r4, [r3, #0]
 800766e:	19bb      	adds	r3, r7, r6
 8007670:	881a      	ldrh	r2, [r3, #0]
 8007672:	197b      	adds	r3, r7, r5
 8007674:	8819      	ldrh	r1, [r3, #0]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	2300      	movs	r3, #0
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	0023      	movs	r3, r4
 800767e:	f7ff ff36 	bl	80074ee <u8g2_DrawHVLine>
}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	46bd      	mov	sp, r7
 8007686:	b005      	add	sp, #20
 8007688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800768a <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800768a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800768c:	b087      	sub	sp, #28
 800768e:	af02      	add	r7, sp, #8
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	000c      	movs	r4, r1
 8007694:	0010      	movs	r0, r2
 8007696:	0019      	movs	r1, r3
 8007698:	250a      	movs	r5, #10
 800769a:	197b      	adds	r3, r7, r5
 800769c:	1c22      	adds	r2, r4, #0
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	2608      	movs	r6, #8
 80076a2:	19bb      	adds	r3, r7, r6
 80076a4:	1c02      	adds	r2, r0, #0
 80076a6:	801a      	strh	r2, [r3, #0]
 80076a8:	1dbb      	adds	r3, r7, #6
 80076aa:	1c0a      	adds	r2, r1, #0
 80076ac:	801a      	strh	r2, [r3, #0]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80076ae:	1dbb      	adds	r3, r7, #6
 80076b0:	881c      	ldrh	r4, [r3, #0]
 80076b2:	19bb      	adds	r3, r7, r6
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	197b      	adds	r3, r7, r5
 80076b8:	8819      	ldrh	r1, [r3, #0]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	2301      	movs	r3, #1
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	0023      	movs	r3, r4
 80076c2:	f7ff ff14 	bl	80074ee <u8g2_DrawHVLine>
}
 80076c6:	46c0      	nop			@ (mov r8, r8)
 80076c8:	46bd      	mov	sp, r7
 80076ca:	b005      	add	sp, #20
 80076cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076ce <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af02      	add	r7, sp, #8
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	0008      	movs	r0, r1
 80076d8:	0011      	movs	r1, r2
 80076da:	1cbb      	adds	r3, r7, #2
 80076dc:	1c02      	adds	r2, r0, #0
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	003b      	movs	r3, r7
 80076e2:	1c0a      	adds	r2, r1, #0
 80076e4:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	224c      	movs	r2, #76	@ 0x4c
 80076ea:	5a9b      	ldrh	r3, [r3, r2]
 80076ec:	003a      	movs	r2, r7
 80076ee:	8812      	ldrh	r2, [r2, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d31f      	bcc.n	8007734 <u8g2_DrawPixel+0x66>
    return;
  if ( y >= u8g2->user_y1 )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	224e      	movs	r2, #78	@ 0x4e
 80076f8:	5a9b      	ldrh	r3, [r3, r2]
 80076fa:	003a      	movs	r2, r7
 80076fc:	8812      	ldrh	r2, [r2, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d21a      	bcs.n	8007738 <u8g2_DrawPixel+0x6a>
    return;
  if ( x < u8g2->user_x0 )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2248      	movs	r2, #72	@ 0x48
 8007706:	5a9b      	ldrh	r3, [r3, r2]
 8007708:	1cba      	adds	r2, r7, #2
 800770a:	8812      	ldrh	r2, [r2, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d315      	bcc.n	800773c <u8g2_DrawPixel+0x6e>
    return;
  if ( x >= u8g2->user_x1 )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	224a      	movs	r2, #74	@ 0x4a
 8007714:	5a9b      	ldrh	r3, [r3, r2]
 8007716:	1cba      	adds	r2, r7, #2
 8007718:	8812      	ldrh	r2, [r2, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	d210      	bcs.n	8007740 <u8g2_DrawPixel+0x72>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800771e:	003b      	movs	r3, r7
 8007720:	881a      	ldrh	r2, [r3, #0]
 8007722:	1cbb      	adds	r3, r7, #2
 8007724:	8819      	ldrh	r1, [r3, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	2300      	movs	r3, #0
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	2301      	movs	r3, #1
 800772e:	f7ff fede 	bl	80074ee <u8g2_DrawHVLine>
 8007732:	e006      	b.n	8007742 <u8g2_DrawPixel+0x74>
    return;
 8007734:	46c0      	nop			@ (mov r8, r8)
 8007736:	e004      	b.n	8007742 <u8g2_DrawPixel+0x74>
    return;
 8007738:	46c0      	nop			@ (mov r8, r8)
 800773a:	e002      	b.n	8007742 <u8g2_DrawPixel+0x74>
    return;
 800773c:	46c0      	nop			@ (mov r8, r8)
 800773e:	e000      	b.n	8007742 <u8g2_DrawPixel+0x74>
    return;
 8007740:	46c0      	nop			@ (mov r8, r8)
}
 8007742:	46bd      	mov	sp, r7
 8007744:	b002      	add	sp, #8
 8007746:	bd80      	pop	{r7, pc}

08007748 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8007748:	b5b0      	push	{r4, r5, r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	0005      	movs	r5, r0
 8007750:	000c      	movs	r4, r1
 8007752:	0010      	movs	r0, r2
 8007754:	0019      	movs	r1, r3
 8007756:	1dbb      	adds	r3, r7, #6
 8007758:	1c2a      	adds	r2, r5, #0
 800775a:	801a      	strh	r2, [r3, #0]
 800775c:	1d3b      	adds	r3, r7, #4
 800775e:	1c22      	adds	r2, r4, #0
 8007760:	801a      	strh	r2, [r3, #0]
 8007762:	1cbb      	adds	r3, r7, #2
 8007764:	1c02      	adds	r2, r0, #0
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	003b      	movs	r3, r7
 800776a:	1c0a      	adds	r2, r1, #0
 800776c:	801a      	strh	r2, [r3, #0]
  if ( v0 < a1 )		// v0 <= a1
 800776e:	1cba      	adds	r2, r7, #2
 8007770:	1d3b      	adds	r3, r7, #4
 8007772:	8812      	ldrh	r2, [r2, #0]
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d211      	bcs.n	800779e <u8g2_is_intersection_decision_tree+0x56>
  {
    if ( v1 > a0 )	// v1 >= a0
 800777a:	003a      	movs	r2, r7
 800777c:	1dbb      	adds	r3, r7, #6
 800777e:	8812      	ldrh	r2, [r2, #0]
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d901      	bls.n	800778a <u8g2_is_intersection_decision_tree+0x42>
    {
      return 1;
 8007786:	2301      	movs	r3, #1
 8007788:	e01a      	b.n	80077c0 <u8g2_is_intersection_decision_tree+0x78>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800778a:	1cba      	adds	r2, r7, #2
 800778c:	003b      	movs	r3, r7
 800778e:	8812      	ldrh	r2, [r2, #0]
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	429a      	cmp	r2, r3
 8007794:	d901      	bls.n	800779a <u8g2_is_intersection_decision_tree+0x52>
      {
	return 1;
 8007796:	2301      	movs	r3, #1
 8007798:	e012      	b.n	80077c0 <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 800779a:	2300      	movs	r3, #0
 800779c:	e010      	b.n	80077c0 <u8g2_is_intersection_decision_tree+0x78>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800779e:	003a      	movs	r2, r7
 80077a0:	1dbb      	adds	r3, r7, #6
 80077a2:	8812      	ldrh	r2, [r2, #0]
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d909      	bls.n	80077be <u8g2_is_intersection_decision_tree+0x76>
    {
      if ( v0 > v1 )	// v0 > v1
 80077aa:	1cba      	adds	r2, r7, #2
 80077ac:	003b      	movs	r3, r7
 80077ae:	8812      	ldrh	r2, [r2, #0]
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d901      	bls.n	80077ba <u8g2_is_intersection_decision_tree+0x72>
      {
	return 1;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e002      	b.n	80077c0 <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	e000      	b.n	80077c0 <u8g2_is_intersection_decision_tree+0x78>
      }
    }
    else
    {
      return 0;
 80077be:	2300      	movs	r3, #0
    }
  }
}
 80077c0:	0018      	movs	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	b002      	add	sp, #8
 80077c6:	bdb0      	pop	{r4, r5, r7, pc}

080077c8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80077c8:	b5b0      	push	{r4, r5, r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	000c      	movs	r4, r1
 80077d2:	0010      	movs	r0, r2
 80077d4:	0019      	movs	r1, r3
 80077d6:	230a      	movs	r3, #10
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	1c22      	adds	r2, r4, #0
 80077dc:	801a      	strh	r2, [r3, #0]
 80077de:	2508      	movs	r5, #8
 80077e0:	197b      	adds	r3, r7, r5
 80077e2:	1c02      	adds	r2, r0, #0
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	1dbb      	adds	r3, r7, #6
 80077e8:	1c0a      	adds	r2, r1, #0
 80077ea:	801a      	strh	r2, [r3, #0]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	224c      	movs	r2, #76	@ 0x4c
 80077f0:	5a98      	ldrh	r0, [r3, r2]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	224e      	movs	r2, #78	@ 0x4e
 80077f6:	5a99      	ldrh	r1, [r3, r2]
 80077f8:	2320      	movs	r3, #32
 80077fa:	18fb      	adds	r3, r7, r3
 80077fc:	881c      	ldrh	r4, [r3, #0]
 80077fe:	197b      	adds	r3, r7, r5
 8007800:	881a      	ldrh	r2, [r3, #0]
 8007802:	0023      	movs	r3, r4
 8007804:	f7ff ffa0 	bl	8007748 <u8g2_is_intersection_decision_tree>
 8007808:	1e03      	subs	r3, r0, #0
 800780a:	d101      	bne.n	8007810 <u8g2_IsIntersection+0x48>
    return 0; 
 800780c:	2300      	movs	r3, #0
 800780e:	e00e      	b.n	800782e <u8g2_IsIntersection+0x66>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2248      	movs	r2, #72	@ 0x48
 8007814:	5a98      	ldrh	r0, [r3, r2]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	224a      	movs	r2, #74	@ 0x4a
 800781a:	5a99      	ldrh	r1, [r3, r2]
 800781c:	1dbb      	adds	r3, r7, #6
 800781e:	881c      	ldrh	r4, [r3, #0]
 8007820:	230a      	movs	r3, #10
 8007822:	18fb      	adds	r3, r7, r3
 8007824:	881a      	ldrh	r2, [r3, #0]
 8007826:	0023      	movs	r3, r4
 8007828:	f7ff ff8e 	bl	8007748 <u8g2_is_intersection_decision_tree>
 800782c:	0003      	movs	r3, r0
}
 800782e:	0018      	movs	r0, r3
 8007830:	46bd      	mov	sp, r7
 8007832:	b004      	add	sp, #16
 8007834:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007838 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8007838:	b5b0      	push	{r4, r5, r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	000c      	movs	r4, r1
 8007842:	0010      	movs	r0, r2
 8007844:	0019      	movs	r1, r3
 8007846:	250a      	movs	r5, #10
 8007848:	197b      	adds	r3, r7, r5
 800784a:	1c22      	adds	r2, r4, #0
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	2308      	movs	r3, #8
 8007850:	18fb      	adds	r3, r7, r3
 8007852:	1c02      	adds	r2, r0, #0
 8007854:	801a      	strh	r2, [r3, #0]
 8007856:	1dbb      	adds	r3, r7, #6
 8007858:	1c0a      	adds	r2, r1, #0
 800785a:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 800785c:	2313      	movs	r3, #19
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8007864:	197a      	adds	r2, r7, r5
 8007866:	1dbb      	adds	r3, r7, #6
 8007868:	8812      	ldrh	r2, [r2, #0]
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d908      	bls.n	8007882 <u8g2_DrawLine+0x4a>
 8007870:	231a      	movs	r3, #26
 8007872:	18fb      	adds	r3, r7, r3
 8007874:	1979      	adds	r1, r7, r5
 8007876:	1dba      	adds	r2, r7, #6
 8007878:	8809      	ldrh	r1, [r1, #0]
 800787a:	8812      	ldrh	r2, [r2, #0]
 800787c:	1a8a      	subs	r2, r1, r2
 800787e:	801a      	strh	r2, [r3, #0]
 8007880:	e008      	b.n	8007894 <u8g2_DrawLine+0x5c>
 8007882:	231a      	movs	r3, #26
 8007884:	18fb      	adds	r3, r7, r3
 8007886:	1db9      	adds	r1, r7, #6
 8007888:	220a      	movs	r2, #10
 800788a:	18ba      	adds	r2, r7, r2
 800788c:	8809      	ldrh	r1, [r1, #0]
 800788e:	8812      	ldrh	r2, [r2, #0]
 8007890:	1a8a      	subs	r2, r1, r2
 8007892:	801a      	strh	r2, [r3, #0]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8007894:	2108      	movs	r1, #8
 8007896:	187a      	adds	r2, r7, r1
 8007898:	2030      	movs	r0, #48	@ 0x30
 800789a:	183b      	adds	r3, r7, r0
 800789c:	8812      	ldrh	r2, [r2, #0]
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d908      	bls.n	80078b6 <u8g2_DrawLine+0x7e>
 80078a4:	2318      	movs	r3, #24
 80078a6:	18fa      	adds	r2, r7, r3
 80078a8:	1879      	adds	r1, r7, r1
 80078aa:	183b      	adds	r3, r7, r0
 80078ac:	8809      	ldrh	r1, [r1, #0]
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	1acb      	subs	r3, r1, r3
 80078b2:	8013      	strh	r3, [r2, #0]
 80078b4:	e009      	b.n	80078ca <u8g2_DrawLine+0x92>
 80078b6:	2318      	movs	r3, #24
 80078b8:	18fa      	adds	r2, r7, r3
 80078ba:	2330      	movs	r3, #48	@ 0x30
 80078bc:	18fb      	adds	r3, r7, r3
 80078be:	2108      	movs	r1, #8
 80078c0:	1878      	adds	r0, r7, r1
 80078c2:	8819      	ldrh	r1, [r3, #0]
 80078c4:	8803      	ldrh	r3, [r0, #0]
 80078c6:	1acb      	subs	r3, r1, r3
 80078c8:	8013      	strh	r3, [r2, #0]

  if ( dy > dx ) 
 80078ca:	2018      	movs	r0, #24
 80078cc:	183a      	adds	r2, r7, r0
 80078ce:	241a      	movs	r4, #26
 80078d0:	193b      	adds	r3, r7, r4
 80078d2:	8812      	ldrh	r2, [r2, #0]
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d92b      	bls.n	8007932 <u8g2_DrawLine+0xfa>
  {
    swapxy = 1;
 80078da:	2313      	movs	r3, #19
 80078dc:	18fb      	adds	r3, r7, r3
 80078de:	2201      	movs	r2, #1
 80078e0:	701a      	strb	r2, [r3, #0]
    tmp = dx; dx =dy; dy = tmp;
 80078e2:	2110      	movs	r1, #16
 80078e4:	187b      	adds	r3, r7, r1
 80078e6:	193a      	adds	r2, r7, r4
 80078e8:	8812      	ldrh	r2, [r2, #0]
 80078ea:	801a      	strh	r2, [r3, #0]
 80078ec:	193b      	adds	r3, r7, r4
 80078ee:	183a      	adds	r2, r7, r0
 80078f0:	8812      	ldrh	r2, [r2, #0]
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	183b      	adds	r3, r7, r0
 80078f6:	187a      	adds	r2, r7, r1
 80078f8:	8812      	ldrh	r2, [r2, #0]
 80078fa:	801a      	strh	r2, [r3, #0]
    tmp = x1; x1 =y1; y1 = tmp;
 80078fc:	187b      	adds	r3, r7, r1
 80078fe:	200a      	movs	r0, #10
 8007900:	183a      	adds	r2, r7, r0
 8007902:	8812      	ldrh	r2, [r2, #0]
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	183b      	adds	r3, r7, r0
 8007908:	2008      	movs	r0, #8
 800790a:	183a      	adds	r2, r7, r0
 800790c:	8812      	ldrh	r2, [r2, #0]
 800790e:	801a      	strh	r2, [r3, #0]
 8007910:	183b      	adds	r3, r7, r0
 8007912:	187a      	adds	r2, r7, r1
 8007914:	8812      	ldrh	r2, [r2, #0]
 8007916:	801a      	strh	r2, [r3, #0]
    tmp = x2; x2 =y2; y2 = tmp;
 8007918:	187b      	adds	r3, r7, r1
 800791a:	1dba      	adds	r2, r7, #6
 800791c:	8812      	ldrh	r2, [r2, #0]
 800791e:	801a      	strh	r2, [r3, #0]
 8007920:	1dba      	adds	r2, r7, #6
 8007922:	2030      	movs	r0, #48	@ 0x30
 8007924:	183b      	adds	r3, r7, r0
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	8013      	strh	r3, [r2, #0]
 800792a:	183b      	adds	r3, r7, r0
 800792c:	187a      	adds	r2, r7, r1
 800792e:	8812      	ldrh	r2, [r2, #0]
 8007930:	801a      	strh	r2, [r3, #0]
  }
  if ( x1 > x2 ) 
 8007932:	200a      	movs	r0, #10
 8007934:	183a      	adds	r2, r7, r0
 8007936:	1dbb      	adds	r3, r7, #6
 8007938:	8812      	ldrh	r2, [r2, #0]
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d91a      	bls.n	8007976 <u8g2_DrawLine+0x13e>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8007940:	2110      	movs	r1, #16
 8007942:	187b      	adds	r3, r7, r1
 8007944:	183a      	adds	r2, r7, r0
 8007946:	8812      	ldrh	r2, [r2, #0]
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	183b      	adds	r3, r7, r0
 800794c:	1dba      	adds	r2, r7, #6
 800794e:	8812      	ldrh	r2, [r2, #0]
 8007950:	801a      	strh	r2, [r3, #0]
 8007952:	1dbb      	adds	r3, r7, #6
 8007954:	187a      	adds	r2, r7, r1
 8007956:	8812      	ldrh	r2, [r2, #0]
 8007958:	801a      	strh	r2, [r3, #0]
    tmp = y1; y1 =y2; y2 = tmp;
 800795a:	187b      	adds	r3, r7, r1
 800795c:	2008      	movs	r0, #8
 800795e:	183a      	adds	r2, r7, r0
 8007960:	8812      	ldrh	r2, [r2, #0]
 8007962:	801a      	strh	r2, [r3, #0]
 8007964:	183a      	adds	r2, r7, r0
 8007966:	2030      	movs	r0, #48	@ 0x30
 8007968:	183b      	adds	r3, r7, r0
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	8013      	strh	r3, [r2, #0]
 800796e:	183b      	adds	r3, r7, r0
 8007970:	187a      	adds	r2, r7, r1
 8007972:	8812      	ldrh	r2, [r2, #0]
 8007974:	801a      	strh	r2, [r3, #0]
  }
  err = dx >> 1;
 8007976:	231a      	movs	r3, #26
 8007978:	18fb      	adds	r3, r7, r3
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	085b      	lsrs	r3, r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	2316      	movs	r3, #22
 8007982:	18fb      	adds	r3, r7, r3
 8007984:	801a      	strh	r2, [r3, #0]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8007986:	2330      	movs	r3, #48	@ 0x30
 8007988:	18fb      	adds	r3, r7, r3
 800798a:	2208      	movs	r2, #8
 800798c:	18b9      	adds	r1, r7, r2
 800798e:	881a      	ldrh	r2, [r3, #0]
 8007990:	880b      	ldrh	r3, [r1, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d904      	bls.n	80079a0 <u8g2_DrawLine+0x168>
 8007996:	2314      	movs	r3, #20
 8007998:	18fb      	adds	r3, r7, r3
 800799a:	2201      	movs	r2, #1
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	e004      	b.n	80079aa <u8g2_DrawLine+0x172>
 80079a0:	2314      	movs	r3, #20
 80079a2:	18fb      	adds	r3, r7, r3
 80079a4:	2201      	movs	r2, #1
 80079a6:	4252      	negs	r2, r2
 80079a8:	801a      	strh	r2, [r3, #0]
  y = y1;
 80079aa:	231c      	movs	r3, #28
 80079ac:	18fb      	adds	r3, r7, r3
 80079ae:	2208      	movs	r2, #8
 80079b0:	18ba      	adds	r2, r7, r2
 80079b2:	8812      	ldrh	r2, [r2, #0]
 80079b4:	801a      	strh	r2, [r3, #0]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 80079b6:	1dbb      	adds	r3, r7, #6
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	4a2e      	ldr	r2, [pc, #184]	@ (8007a74 <u8g2_DrawLine+0x23c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d104      	bne.n	80079ca <u8g2_DrawLine+0x192>
    x2--;
 80079c0:	1dbb      	adds	r3, r7, #6
 80079c2:	881a      	ldrh	r2, [r3, #0]
 80079c4:	1dbb      	adds	r3, r7, #6
 80079c6:	3a01      	subs	r2, #1
 80079c8:	801a      	strh	r2, [r3, #0]
#endif

  for( x = x1; x <= x2; x++ )
 80079ca:	231e      	movs	r3, #30
 80079cc:	18fb      	adds	r3, r7, r3
 80079ce:	220a      	movs	r2, #10
 80079d0:	18ba      	adds	r2, r7, r2
 80079d2:	8812      	ldrh	r2, [r2, #0]
 80079d4:	801a      	strh	r2, [r3, #0]
 80079d6:	e040      	b.n	8007a5a <u8g2_DrawLine+0x222>
  {
    if ( swapxy == 0 ) 
 80079d8:	2313      	movs	r3, #19
 80079da:	18fb      	adds	r3, r7, r3
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <u8g2_DrawLine+0x1c0>
      u8g2_DrawPixel(u8g2, x, y); 
 80079e2:	231c      	movs	r3, #28
 80079e4:	18fb      	adds	r3, r7, r3
 80079e6:	881a      	ldrh	r2, [r3, #0]
 80079e8:	231e      	movs	r3, #30
 80079ea:	18fb      	adds	r3, r7, r3
 80079ec:	8819      	ldrh	r1, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	0018      	movs	r0, r3
 80079f2:	f7ff fe6c 	bl	80076ce <u8g2_DrawPixel>
 80079f6:	e009      	b.n	8007a0c <u8g2_DrawLine+0x1d4>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 80079f8:	231e      	movs	r3, #30
 80079fa:	18fb      	adds	r3, r7, r3
 80079fc:	881a      	ldrh	r2, [r3, #0]
 80079fe:	231c      	movs	r3, #28
 8007a00:	18fb      	adds	r3, r7, r3
 8007a02:	8819      	ldrh	r1, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	0018      	movs	r0, r3
 8007a08:	f7ff fe61 	bl	80076ce <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 8007a0c:	2016      	movs	r0, #22
 8007a0e:	183b      	adds	r3, r7, r0
 8007a10:	881a      	ldrh	r2, [r3, #0]
 8007a12:	2318      	movs	r3, #24
 8007a14:	18fb      	adds	r3, r7, r3
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	183b      	adds	r3, r7, r0
 8007a1e:	801a      	strh	r2, [r3, #0]
    if ( err < 0 ) 
 8007a20:	183b      	adds	r3, r7, r0
 8007a22:	2200      	movs	r2, #0
 8007a24:	5e9b      	ldrsh	r3, [r3, r2]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	da11      	bge.n	8007a4e <u8g2_DrawLine+0x216>
    {
      y += (u8g2_uint_t)ystep;
 8007a2a:	2314      	movs	r3, #20
 8007a2c:	18fb      	adds	r3, r7, r3
 8007a2e:	8819      	ldrh	r1, [r3, #0]
 8007a30:	221c      	movs	r2, #28
 8007a32:	18bb      	adds	r3, r7, r2
 8007a34:	18ba      	adds	r2, r7, r2
 8007a36:	8812      	ldrh	r2, [r2, #0]
 8007a38:	188a      	adds	r2, r1, r2
 8007a3a:	801a      	strh	r2, [r3, #0]
      err += (u8g2_uint_t)dx;
 8007a3c:	183b      	adds	r3, r7, r0
 8007a3e:	881a      	ldrh	r2, [r3, #0]
 8007a40:	231a      	movs	r3, #26
 8007a42:	18fb      	adds	r3, r7, r3
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	18d3      	adds	r3, r2, r3
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	183b      	adds	r3, r7, r0
 8007a4c:	801a      	strh	r2, [r3, #0]
  for( x = x1; x <= x2; x++ )
 8007a4e:	211e      	movs	r1, #30
 8007a50:	187b      	adds	r3, r7, r1
 8007a52:	881a      	ldrh	r2, [r3, #0]
 8007a54:	187b      	adds	r3, r7, r1
 8007a56:	3201      	adds	r2, #1
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	231e      	movs	r3, #30
 8007a5c:	18fa      	adds	r2, r7, r3
 8007a5e:	1dbb      	adds	r3, r7, #6
 8007a60:	8812      	ldrh	r2, [r2, #0]
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d9b7      	bls.n	80079d8 <u8g2_DrawLine+0x1a0>
    }
  }
}
 8007a68:	46c0      	nop			@ (mov r8, r8)
 8007a6a:	46c0      	nop			@ (mov r8, r8)
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	b008      	add	sp, #32
 8007a70:	bdb0      	pop	{r4, r5, r7, pc}
 8007a72:	46c0      	nop			@ (mov r8, r8)
 8007a74:	0000ffff 	.word	0x0000ffff

08007a78 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007a78:	b590      	push	{r4, r7, lr}
 8007a7a:	b089      	sub	sp, #36	@ 0x24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	000c      	movs	r4, r1
 8007a82:	0010      	movs	r0, r2
 8007a84:	0019      	movs	r1, r3
 8007a86:	230a      	movs	r3, #10
 8007a88:	18fb      	adds	r3, r7, r3
 8007a8a:	1c22      	adds	r2, r4, #0
 8007a8c:	801a      	strh	r2, [r3, #0]
 8007a8e:	2408      	movs	r4, #8
 8007a90:	193b      	adds	r3, r7, r4
 8007a92:	1c02      	adds	r2, r0, #0
 8007a94:	801a      	strh	r2, [r3, #0]
 8007a96:	1dbb      	adds	r3, r7, #6
 8007a98:	1c0a      	adds	r2, r1, #0
 8007a9a:	801a      	strh	r2, [r3, #0]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8007a9c:	201b      	movs	r0, #27
 8007a9e:	183b      	adds	r3, r7, r0
 8007aa0:	193a      	adds	r2, r7, r4
 8007aa2:	8812      	ldrh	r2, [r2, #0]
 8007aa4:	701a      	strb	r2, [r3, #0]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8007aa6:	183b      	adds	r3, r7, r0
 8007aa8:	183a      	adds	r2, r7, r0
 8007aaa:	7812      	ldrb	r2, [r2, #0]
 8007aac:	2107      	movs	r1, #7
 8007aae:	400a      	ands	r2, r1
 8007ab0:	701a      	strb	r2, [r3, #0]
  mask = 1;
 8007ab2:	2118      	movs	r1, #24
 8007ab4:	187b      	adds	r3, r7, r1
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
  mask <<= bit_pos;
 8007aba:	187b      	adds	r3, r7, r1
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	183b      	adds	r3, r7, r0
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	409a      	lsls	r2, r3
 8007ac4:	187b      	adds	r3, r7, r1
 8007ac6:	701a      	strb	r2, [r3, #0]

  or_mask = 0;
 8007ac8:	201a      	movs	r0, #26
 8007aca:	183b      	adds	r3, r7, r0
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
  xor_mask = 0;
 8007ad0:	2319      	movs	r3, #25
 8007ad2:	18fb      	adds	r3, r7, r3
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color <= 1 )
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2292      	movs	r2, #146	@ 0x92
 8007adc:	5c9b      	ldrb	r3, [r3, r2]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d803      	bhi.n	8007aea <u8g2_ll_hvline_vertical_top_lsb+0x72>
    or_mask  = mask;
 8007ae2:	183b      	adds	r3, r7, r0
 8007ae4:	187a      	adds	r2, r7, r1
 8007ae6:	7812      	ldrb	r2, [r2, #0]
 8007ae8:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color != 1 )
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2292      	movs	r2, #146	@ 0x92
 8007aee:	5c9b      	ldrb	r3, [r3, r2]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d005      	beq.n	8007b00 <u8g2_ll_hvline_vertical_top_lsb+0x88>
    xor_mask = mask;
 8007af4:	2319      	movs	r3, #25
 8007af6:	18fb      	adds	r3, r7, r3
 8007af8:	2218      	movs	r2, #24
 8007afa:	18ba      	adds	r2, r7, r2
 8007afc:	7812      	ldrb	r2, [r2, #0]
 8007afe:	701a      	strb	r2, [r3, #0]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8007b00:	2016      	movs	r0, #22
 8007b02:	183b      	adds	r3, r7, r0
 8007b04:	2208      	movs	r2, #8
 8007b06:	18ba      	adds	r2, r7, r2
 8007b08:	8812      	ldrh	r2, [r2, #0]
 8007b0a:	801a      	strh	r2, [r3, #0]
  offset &= ~7;
 8007b0c:	183b      	adds	r3, r7, r0
 8007b0e:	183a      	adds	r2, r7, r0
 8007b10:	8812      	ldrh	r2, [r2, #0]
 8007b12:	2107      	movs	r1, #7
 8007b14:	438a      	bics	r2, r1
 8007b16:	801a      	strh	r2, [r3, #0]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	7c1b      	ldrb	r3, [r3, #16]
 8007b1e:	0019      	movs	r1, r3
 8007b20:	183b      	adds	r3, r7, r0
 8007b22:	183a      	adds	r2, r7, r0
 8007b24:	8812      	ldrh	r2, [r2, #0]
 8007b26:	434a      	muls	r2, r1
 8007b28:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b2e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8007b30:	183b      	adds	r3, r7, r0
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	18d3      	adds	r3, r2, r3
 8007b38:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8007b3a:	230a      	movs	r3, #10
 8007b3c:	18fb      	adds	r3, r7, r3
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	69fa      	ldr	r2, [r7, #28]
 8007b42:	18d3      	adds	r3, r2, r3
 8007b44:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8007b46:	2330      	movs	r3, #48	@ 0x30
 8007b48:	18fb      	adds	r3, r7, r3
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11e      	bne.n	8007b8e <u8g2_ll_hvline_vertical_top_lsb+0x116>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	781a      	ldrb	r2, [r3, #0]
 8007b54:	231a      	movs	r3, #26
 8007b56:	18fb      	adds	r3, r7, r3
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	2319      	movs	r3, #25
 8007b68:	18fb      	adds	r3, r7, r3
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	4053      	eors	r3, r2
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	701a      	strb	r2, [r3, #0]
	ptr++;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	3301      	adds	r3, #1
 8007b78:	61fb      	str	r3, [r7, #28]
	len--;
 8007b7a:	1dbb      	adds	r3, r7, #6
 8007b7c:	881a      	ldrh	r2, [r3, #0]
 8007b7e:	1dbb      	adds	r3, r7, #6
 8007b80:	3a01      	subs	r2, #1
 8007b82:	801a      	strh	r2, [r3, #0]
      } while( len != 0 );
 8007b84:	1dbb      	adds	r3, r7, #6
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e1      	bne.n	8007b50 <u8g2_ll_hvline_vertical_top_lsb+0xd8>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8007b8c:	e04e      	b.n	8007c2c <u8g2_ll_hvline_vertical_top_lsb+0x1b4>
      *ptr |= or_mask;
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	781a      	ldrb	r2, [r3, #0]
 8007b92:	241a      	movs	r4, #26
 8007b94:	193b      	adds	r3, r7, r4
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	2319      	movs	r3, #25
 8007ba6:	18fb      	adds	r3, r7, r3
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	4053      	eors	r3, r2
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8007bb2:	201b      	movs	r0, #27
 8007bb4:	183b      	adds	r3, r7, r0
 8007bb6:	781a      	ldrb	r2, [r3, #0]
 8007bb8:	183b      	adds	r3, r7, r0
 8007bba:	3201      	adds	r2, #1
 8007bbc:	701a      	strb	r2, [r3, #0]
      bit_pos &= 7;
 8007bbe:	183b      	adds	r3, r7, r0
 8007bc0:	183a      	adds	r2, r7, r0
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	2107      	movs	r1, #7
 8007bc6:	400a      	ands	r2, r1
 8007bc8:	701a      	strb	r2, [r3, #0]
      len--;
 8007bca:	1dbb      	adds	r3, r7, #6
 8007bcc:	881a      	ldrh	r2, [r3, #0]
 8007bce:	1dbb      	adds	r3, r7, #6
 8007bd0:	3a01      	subs	r2, #1
 8007bd2:	801a      	strh	r2, [r3, #0]
      if ( bit_pos == 0 )
 8007bd4:	183b      	adds	r3, r7, r0
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d117      	bne.n	8007c0c <u8g2_ll_hvline_vertical_top_lsb+0x194>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007be0:	001a      	movs	r2, r3
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	189b      	adds	r3, r3, r2
 8007be6:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2292      	movs	r2, #146	@ 0x92
 8007bec:	5c9b      	ldrb	r3, [r3, r2]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d802      	bhi.n	8007bf8 <u8g2_ll_hvline_vertical_top_lsb+0x180>
	  or_mask  = 1;
 8007bf2:	193b      	adds	r3, r7, r4
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	701a      	strb	r2, [r3, #0]
	if ( u8g2->draw_color != 1 )
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2292      	movs	r2, #146	@ 0x92
 8007bfc:	5c9b      	ldrb	r3, [r3, r2]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d010      	beq.n	8007c24 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	  xor_mask = 1;
 8007c02:	2319      	movs	r3, #25
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	2201      	movs	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e00b      	b.n	8007c24 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	or_mask <<= 1;
 8007c0c:	231a      	movs	r3, #26
 8007c0e:	18fa      	adds	r2, r7, r3
 8007c10:	18fb      	adds	r3, r7, r3
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	18db      	adds	r3, r3, r3
 8007c16:	7013      	strb	r3, [r2, #0]
	xor_mask <<= 1;
 8007c18:	2319      	movs	r3, #25
 8007c1a:	18fa      	adds	r2, r7, r3
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	18db      	adds	r3, r3, r3
 8007c22:	7013      	strb	r3, [r2, #0]
    } while( len != 0 );
 8007c24:	1dbb      	adds	r3, r7, #6
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1b0      	bne.n	8007b8e <u8g2_ll_hvline_vertical_top_lsb+0x116>
}
 8007c2c:	46c0      	nop			@ (mov r8, r8)
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	b009      	add	sp, #36	@ 0x24
 8007c32:	bd90      	pop	{r4, r7, pc}

08007c34 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2250      	movs	r2, #80	@ 0x50
 8007c40:	2100      	movs	r1, #0
 8007c42:	5299      	strh	r1, [r3, r2]
  u8g2->clip_y0 = 0;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2254      	movs	r2, #84	@ 0x54
 8007c48:	2100      	movs	r1, #0
 8007c4a:	5299      	strh	r1, [r3, r2]
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2252      	movs	r2, #82	@ 0x52
 8007c50:	2101      	movs	r1, #1
 8007c52:	4249      	negs	r1, r1
 8007c54:	5299      	strh	r1, [r3, r2]
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2256      	movs	r2, #86	@ 0x56
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	4249      	negs	r1, r1
 8007c5e:	5299      	strh	r1, [r3, r2]
  
  u8g2->cb->update_page_win(u8g2);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	0010      	movs	r0, r2
 8007c6a:	4798      	blx	r3
}
 8007c6c:	46c0      	nop			@ (mov r8, r8)
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	b002      	add	sp, #8
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	1dfb      	adds	r3, r7, #7
 8007c82:	701a      	strb	r2, [r3, #0]
  u8g2->font = NULL;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	659a      	str	r2, [r3, #88]	@ 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	635a      	str	r2, [r3, #52]	@ 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1dfa      	adds	r2, r7, #7
 8007c9a:	2138      	movs	r1, #56	@ 0x38
 8007c9c:	7812      	ldrb	r2, [r2, #0]
 8007c9e:	545a      	strb	r2, [r3, r1]
  
  u8g2->tile_curr_row = 0;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2239      	movs	r2, #57	@ 0x39
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	5499      	strb	r1, [r3, r2]
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	226d      	movs	r2, #109	@ 0x6d
 8007cac:	2100      	movs	r1, #0
 8007cae:	5499      	strb	r1, [r3, r2]
  u8g2->bitmap_transparency = 0;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2291      	movs	r2, #145	@ 0x91
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	5499      	strb	r1, [r3, r2]
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	228d      	movs	r2, #141	@ 0x8d
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	5499      	strb	r1, [r3, r2]
  u8g2->draw_color = 1;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2292      	movs	r2, #146	@ 0x92
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	5499      	strb	r1, [r3, r2]
  u8g2->is_auto_page_clear = 1;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2293      	movs	r2, #147	@ 0x93
 8007ccc:	2101      	movs	r1, #1
 8007cce:	5499      	strb	r1, [r3, r2]
  
  u8g2->cb = u8g2_cb;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  u8g2->cb->update_dimension(u8g2);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	0010      	movs	r0, r2
 8007ce0:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f7ff ffa5 	bl	8007c34 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	0018      	movs	r0, r3
 8007cee:	f7ff fa8b 	bl	8007208 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2270      	movs	r2, #112	@ 0x70
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	5499      	strb	r1, [r3, r2]
#endif
}
 8007cfa:	46c0      	nop			@ (mov r8, r8)
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	b004      	add	sp, #16
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2238      	movs	r2, #56	@ 0x38
 8007d14:	5c9a      	ldrb	r2, [r3, r2]
 8007d16:	210e      	movs	r1, #14
 8007d18:	187b      	adds	r3, r7, r1
 8007d1a:	801a      	strh	r2, [r3, #0]
  t *= 8;
 8007d1c:	187b      	adds	r3, r7, r1
 8007d1e:	187a      	adds	r2, r7, r1
 8007d20:	8812      	ldrh	r2, [r2, #0]
 8007d22:	00d2      	lsls	r2, r2, #3
 8007d24:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_buf_height = t;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	187a      	adds	r2, r7, r1
 8007d2a:	8812      	ldrh	r2, [r2, #0]
 8007d2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  
  t = display_info->tile_width;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	7c1a      	ldrb	r2, [r3, #16]
 8007d32:	187b      	adds	r3, r7, r1
 8007d34:	801a      	strh	r2, [r3, #0]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8007d36:	187b      	adds	r3, r7, r1
 8007d38:	187a      	adds	r2, r7, r1
 8007d3a:	8812      	ldrh	r2, [r2, #0]
 8007d3c:	00d2      	lsls	r2, r2, #3
 8007d3e:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_buf_width = t;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	187a      	adds	r2, r7, r1
 8007d44:	8812      	ldrh	r2, [r2, #0]
 8007d46:	875a      	strh	r2, [r3, #58]	@ 0x3a
  
  t = u8g2->tile_curr_row;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2239      	movs	r2, #57	@ 0x39
 8007d4c:	5c9a      	ldrb	r2, [r3, r2]
 8007d4e:	187b      	adds	r3, r7, r1
 8007d50:	801a      	strh	r2, [r3, #0]
  t *= 8;
 8007d52:	187b      	adds	r3, r7, r1
 8007d54:	0008      	movs	r0, r1
 8007d56:	187a      	adds	r2, r7, r1
 8007d58:	8812      	ldrh	r2, [r2, #0]
 8007d5a:	00d2      	lsls	r2, r2, #3
 8007d5c:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_curr_row = t;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	183a      	adds	r2, r7, r0
 8007d62:	8812      	ldrh	r2, [r2, #0]
 8007d64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  
  t = u8g2->tile_buf_height;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2238      	movs	r2, #56	@ 0x38
 8007d6a:	5c9a      	ldrb	r2, [r3, r2]
 8007d6c:	183b      	adds	r3, r7, r0
 8007d6e:	801a      	strh	r2, [r3, #0]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8007d70:	183b      	adds	r3, r7, r0
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	2139      	movs	r1, #57	@ 0x39
 8007d78:	5c52      	ldrb	r2, [r2, r1]
 8007d7a:	189b      	adds	r3, r3, r2
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	7c52      	ldrb	r2, [r2, #17]
 8007d80:	4293      	cmp	r3, r2
 8007d82:	dd09      	ble.n	8007d98 <u8g2_update_dimension_common+0x96>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	7c5b      	ldrb	r3, [r3, #17]
 8007d88:	0019      	movs	r1, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2239      	movs	r2, #57	@ 0x39
 8007d8e:	5c9b      	ldrb	r3, [r3, r2]
 8007d90:	001a      	movs	r2, r3
 8007d92:	183b      	adds	r3, r7, r0
 8007d94:	1a8a      	subs	r2, r1, r2
 8007d96:	801a      	strh	r2, [r3, #0]
  t *= 8;
 8007d98:	200e      	movs	r0, #14
 8007d9a:	183b      	adds	r3, r7, r0
 8007d9c:	183a      	adds	r2, r7, r0
 8007d9e:	8812      	ldrh	r2, [r2, #0]
 8007da0:	00d2      	lsls	r2, r2, #3
 8007da2:	801a      	strh	r2, [r3, #0]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2240      	movs	r2, #64	@ 0x40
 8007dac:	5299      	strh	r1, [r3, r2]
  u8g2->buf_y1 = u8g2->buf_y0;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2240      	movs	r2, #64	@ 0x40
 8007db2:	5a99      	ldrh	r1, [r3, r2]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2242      	movs	r2, #66	@ 0x42
 8007db8:	5299      	strh	r1, [r3, r2]
  u8g2->buf_y1 += t;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2242      	movs	r2, #66	@ 0x42
 8007dbe:	5a9a      	ldrh	r2, [r3, r2]
 8007dc0:	183b      	adds	r3, r7, r0
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	18d3      	adds	r3, r2, r3
 8007dc6:	b299      	uxth	r1, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2242      	movs	r2, #66	@ 0x42
 8007dcc:	5299      	strh	r1, [r3, r2]

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	8a99      	ldrh	r1, [r3, #20]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2244      	movs	r2, #68	@ 0x44
 8007dd6:	5299      	strh	r1, [r3, r2]
  u8g2->height = display_info->pixel_height;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	8ad9      	ldrh	r1, [r3, #22]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2246      	movs	r2, #70	@ 0x46
 8007de0:	5299      	strh	r1, [r3, r2]
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8007de2:	46c0      	nop			@ (mov r8, r8)
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b004      	add	sp, #16
 8007de8:	bd80      	pop	{r7, pc}

08007dea <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8007dea:	b590      	push	{r4, r7, lr}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af02      	add	r7, sp, #8
 8007df0:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2250      	movs	r2, #80	@ 0x50
 8007df6:	5a99      	ldrh	r1, [r3, r2]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2254      	movs	r2, #84	@ 0x54
 8007dfc:	5a9a      	ldrh	r2, [r3, r2]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2052      	movs	r0, #82	@ 0x52
 8007e02:	5a1c      	ldrh	r4, [r3, r0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2056      	movs	r0, #86	@ 0x56
 8007e08:	5a1b      	ldrh	r3, [r3, r0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	0023      	movs	r3, r4
 8007e10:	f7ff fcda 	bl	80077c8 <u8g2_IsIntersection>
 8007e14:	1e03      	subs	r3, r0, #0
 8007e16:	d104      	bne.n	8007e22 <u8g2_apply_clip_window+0x38>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	228c      	movs	r2, #140	@ 0x8c
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8007e20:	e03b      	b.n	8007e9a <u8g2_apply_clip_window+0xb0>
    u8g2->is_page_clip_window_intersection = 1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	228c      	movs	r2, #140	@ 0x8c
 8007e26:	2101      	movs	r1, #1
 8007e28:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2248      	movs	r2, #72	@ 0x48
 8007e2e:	5a9a      	ldrh	r2, [r3, r2]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2150      	movs	r1, #80	@ 0x50
 8007e34:	5a5b      	ldrh	r3, [r3, r1]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d205      	bcs.n	8007e46 <u8g2_apply_clip_window+0x5c>
      u8g2->user_x0 = u8g2->clip_x0;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2250      	movs	r2, #80	@ 0x50
 8007e3e:	5a99      	ldrh	r1, [r3, r2]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2248      	movs	r2, #72	@ 0x48
 8007e44:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	224a      	movs	r2, #74	@ 0x4a
 8007e4a:	5a9a      	ldrh	r2, [r3, r2]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2152      	movs	r1, #82	@ 0x52
 8007e50:	5a5b      	ldrh	r3, [r3, r1]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d905      	bls.n	8007e62 <u8g2_apply_clip_window+0x78>
      u8g2->user_x1 = u8g2->clip_x1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2252      	movs	r2, #82	@ 0x52
 8007e5a:	5a99      	ldrh	r1, [r3, r2]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	224a      	movs	r2, #74	@ 0x4a
 8007e60:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	224c      	movs	r2, #76	@ 0x4c
 8007e66:	5a9a      	ldrh	r2, [r3, r2]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2154      	movs	r1, #84	@ 0x54
 8007e6c:	5a5b      	ldrh	r3, [r3, r1]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d205      	bcs.n	8007e7e <u8g2_apply_clip_window+0x94>
      u8g2->user_y0 = u8g2->clip_y0;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2254      	movs	r2, #84	@ 0x54
 8007e76:	5a99      	ldrh	r1, [r3, r2]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	224c      	movs	r2, #76	@ 0x4c
 8007e7c:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	224e      	movs	r2, #78	@ 0x4e
 8007e82:	5a9a      	ldrh	r2, [r3, r2]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2156      	movs	r1, #86	@ 0x56
 8007e88:	5a5b      	ldrh	r3, [r3, r1]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d905      	bls.n	8007e9a <u8g2_apply_clip_window+0xb0>
      u8g2->user_y1 = u8g2->clip_y1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2256      	movs	r2, #86	@ 0x56
 8007e92:	5a99      	ldrh	r1, [r3, r2]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	224e      	movs	r2, #78	@ 0x4e
 8007e98:	5299      	strh	r1, [r3, r2]
}
 8007e9a:	46c0      	nop			@ (mov r8, r8)
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b003      	add	sp, #12
 8007ea0:	bd90      	pop	{r4, r7, pc}

08007ea2 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	0018      	movs	r0, r3
 8007eae:	f7ff ff28 	bl	8007d02 <u8g2_update_dimension_common>
}
 8007eb2:	46c0      	nop			@ (mov r8, r8)
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	b002      	add	sp, #8
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2248      	movs	r2, #72	@ 0x48
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	5299      	strh	r1, [r3, r2]
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2244      	movs	r2, #68	@ 0x44
 8007ece:	5a99      	ldrh	r1, [r3, r2]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	224a      	movs	r2, #74	@ 0x4a
 8007ed4:	5299      	strh	r1, [r3, r2]
  
  u8g2->user_y0 = u8g2->buf_y0;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2240      	movs	r2, #64	@ 0x40
 8007eda:	5a99      	ldrh	r1, [r3, r2]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	224c      	movs	r2, #76	@ 0x4c
 8007ee0:	5299      	strh	r1, [r3, r2]
  u8g2->user_y1 = u8g2->buf_y1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2242      	movs	r2, #66	@ 0x42
 8007ee6:	5a99      	ldrh	r1, [r3, r2]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	224e      	movs	r2, #78	@ 0x4e
 8007eec:	5299      	strh	r1, [r3, r2]
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	f7ff ff7a 	bl	8007dea <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8007ef6:	46c0      	nop			@ (mov r8, r8)
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	b002      	add	sp, #8
 8007efc:	bd80      	pop	{r7, pc}

08007efe <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f00:	b087      	sub	sp, #28
 8007f02:	af02      	add	r7, sp, #8
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	000c      	movs	r4, r1
 8007f08:	0010      	movs	r0, r2
 8007f0a:	0019      	movs	r1, r3
 8007f0c:	250a      	movs	r5, #10
 8007f0e:	197b      	adds	r3, r7, r5
 8007f10:	1c22      	adds	r2, r4, #0
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	2608      	movs	r6, #8
 8007f16:	19bb      	adds	r3, r7, r6
 8007f18:	1c02      	adds	r2, r0, #0
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	1dbb      	adds	r3, r7, #6
 8007f1e:	1c0a      	adds	r2, r1, #0
 8007f20:	801a      	strh	r2, [r3, #0]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8007f22:	1dbb      	adds	r3, r7, #6
 8007f24:	881c      	ldrh	r4, [r3, #0]
 8007f26:	19bb      	adds	r3, r7, r6
 8007f28:	881a      	ldrh	r2, [r3, #0]
 8007f2a:	197b      	adds	r3, r7, r5
 8007f2c:	8819      	ldrh	r1, [r3, #0]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	2320      	movs	r3, #32
 8007f32:	2508      	movs	r5, #8
 8007f34:	195b      	adds	r3, r3, r5
 8007f36:	19db      	adds	r3, r3, r7
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	0023      	movs	r3, r4
 8007f3e:	f7ff faa7 	bl	8007490 <u8g2_draw_hv_line_2dir>
}
 8007f42:	46c0      	nop			@ (mov r8, r8)
 8007f44:	46bd      	mov	sp, r7
 8007f46:	b005      	add	sp, #20
 8007f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f4a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2226      	movs	r2, #38	@ 0x26
 8007f56:	2100      	movs	r1, #0
 8007f58:	5499      	strb	r1, [r3, r2]
}
 8007f5a:	46c0      	nop			@ (mov r8, r8)
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	b002      	add	sp, #8
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	000a      	movs	r2, r1
 8007f6e:	1cfb      	adds	r3, r7, #3
 8007f70:	701a      	strb	r2, [r3, #0]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8007f72:	1cfb      	adds	r3, r7, #3
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <u8x8_ascii_next+0x1e>
 8007f7a:	1cfb      	adds	r3, r7, #3
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b0a      	cmp	r3, #10
 8007f80:	d101      	bne.n	8007f86 <u8x8_ascii_next+0x22>
    return 0x0ffff;	/* end of string detected*/
 8007f82:	4b04      	ldr	r3, [pc, #16]	@ (8007f94 <u8x8_ascii_next+0x30>)
 8007f84:	e002      	b.n	8007f8c <u8x8_ascii_next+0x28>
  return b;
 8007f86:	1cfb      	adds	r3, r7, #3
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
}
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	b002      	add	sp, #8
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	0000ffff 	.word	0x0000ffff

08007f98 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8007f98:	b590      	push	{r4, r7, lr}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	000a      	movs	r2, r1
 8007fa2:	1cfb      	adds	r3, r7, #3
 8007fa4:	701a      	strb	r2, [r3, #0]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691c      	ldr	r4, [r3, #16]
 8007faa:	1cfb      	adds	r3, r7, #3
 8007fac:	781a      	ldrb	r2, [r3, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2120      	movs	r1, #32
 8007fb4:	47a0      	blx	r4
 8007fb6:	0003      	movs	r3, r0
}
 8007fb8:	0018      	movs	r0, r3
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b003      	add	sp, #12
 8007fbe:	bd90      	pop	{r4, r7, pc}

08007fc0 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	200b      	movs	r0, #11
 8007fcc:	183b      	adds	r3, r7, r0
 8007fce:	1c0a      	adds	r2, r1, #0
 8007fd0:	701a      	strb	r2, [r3, #0]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	691c      	ldr	r4, [r3, #16]
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	183b      	adds	r3, r7, r0
 8007fda:	781a      	ldrb	r2, [r3, #0]
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	000b      	movs	r3, r1
 8007fe0:	2117      	movs	r1, #23
 8007fe2:	47a0      	blx	r4
 8007fe4:	0003      	movs	r3, r0
}
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	b005      	add	sp, #20
 8007fec:	bd90      	pop	{r4, r7, pc}

08007fee <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	000a      	movs	r2, r1
 8007ff8:	1cfb      	adds	r3, r7, #3
 8007ffa:	701a      	strb	r2, [r3, #0]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8007ffc:	1cfa      	adds	r2, r7, #3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2101      	movs	r1, #1
 8008002:	0018      	movs	r0, r3
 8008004:	f7ff ffdc 	bl	8007fc0 <u8x8_byte_SendBytes>
 8008008:	0003      	movs	r3, r0
}
 800800a:	0018      	movs	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	b002      	add	sp, #8
 8008010:	bd80      	pop	{r7, pc}

08008012 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8008012:	b590      	push	{r4, r7, lr}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	000a      	movs	r2, r1
 800801c:	1cfb      	adds	r3, r7, #3
 800801e:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68dc      	ldr	r4, [r3, #12]
 8008024:	1cfb      	adds	r3, r7, #3
 8008026:	781a      	ldrb	r2, [r3, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	2300      	movs	r3, #0
 800802c:	2115      	movs	r1, #21
 800802e:	47a0      	blx	r4
 8008030:	0003      	movs	r3, r0
}
 8008032:	0018      	movs	r0, r3
 8008034:	46bd      	mov	sp, r7
 8008036:	b003      	add	sp, #12
 8008038:	bd90      	pop	{r4, r7, pc}

0800803a <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800803a:	b590      	push	{r4, r7, lr}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	000a      	movs	r2, r1
 8008044:	1cfb      	adds	r3, r7, #3
 8008046:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68dc      	ldr	r4, [r3, #12]
 800804c:	1cfb      	adds	r3, r7, #3
 800804e:	781a      	ldrb	r2, [r3, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	2300      	movs	r3, #0
 8008054:	2116      	movs	r1, #22
 8008056:	47a0      	blx	r4
 8008058:	0003      	movs	r3, r0
}
 800805a:	0018      	movs	r0, r3
 800805c:	46bd      	mov	sp, r7
 800805e:	b003      	add	sp, #12
 8008060:	bd90      	pop	{r4, r7, pc}

08008062 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8008062:	b590      	push	{r4, r7, lr}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	200b      	movs	r0, #11
 800806e:	183b      	adds	r3, r7, r0
 8008070:	1c0a      	adds	r2, r1, #0
 8008072:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	68dc      	ldr	r4, [r3, #12]
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	183b      	adds	r3, r7, r0
 800807c:	781a      	ldrb	r2, [r3, #0]
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	000b      	movs	r3, r1
 8008082:	2117      	movs	r1, #23
 8008084:	47a0      	blx	r4
 8008086:	0003      	movs	r3, r0
}
 8008088:	0018      	movs	r0, r3
 800808a:	46bd      	mov	sp, r7
 800808c:	b005      	add	sp, #20
 800808e:	bd90      	pop	{r4, r7, pc}

08008090 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8008090:	b590      	push	{r4, r7, lr}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68dc      	ldr	r4, [r3, #12]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	2300      	movs	r3, #0
 80080a0:	2200      	movs	r2, #0
 80080a2:	2118      	movs	r1, #24
 80080a4:	47a0      	blx	r4
 80080a6:	0003      	movs	r3, r0
}
 80080a8:	0018      	movs	r0, r3
 80080aa:	46bd      	mov	sp, r7
 80080ac:	b003      	add	sp, #12
 80080ae:	bd90      	pop	{r4, r7, pc}

080080b0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80080b0:	b590      	push	{r4, r7, lr}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68dc      	ldr	r4, [r3, #12]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	2300      	movs	r3, #0
 80080c0:	2200      	movs	r2, #0
 80080c2:	2119      	movs	r1, #25
 80080c4:	47a0      	blx	r4
 80080c6:	0003      	movs	r3, r0
}
 80080c8:	0018      	movs	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	b003      	add	sp, #12
 80080ce:	bd90      	pop	{r4, r7, pc}

080080d0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80080d0:	b590      	push	{r4, r7, lr}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80080da:	210f      	movs	r1, #15
 80080dc:	187b      	adds	r3, r7, r1
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	7812      	ldrb	r2, [r2, #0]
 80080e2:	701a      	strb	r2, [r3, #0]
    data++;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	3301      	adds	r3, #1
 80080e8:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80080f0:	d038      	beq.n	8008164 <u8x8_cad_SendSequence+0x94>
 80080f2:	dc48      	bgt.n	8008186 <u8x8_cad_SendSequence+0xb6>
 80080f4:	2b19      	cmp	r3, #25
 80080f6:	dc46      	bgt.n	8008186 <u8x8_cad_SendSequence+0xb6>
 80080f8:	2b18      	cmp	r3, #24
 80080fa:	da29      	bge.n	8008150 <u8x8_cad_SendSequence+0x80>
 80080fc:	2b16      	cmp	r3, #22
 80080fe:	dc02      	bgt.n	8008106 <u8x8_cad_SendSequence+0x36>
 8008100:	2b15      	cmp	r3, #21
 8008102:	da03      	bge.n	800810c <u8x8_cad_SendSequence+0x3c>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8008104:	e03f      	b.n	8008186 <u8x8_cad_SendSequence+0xb6>
    switch( cmd )
 8008106:	2b17      	cmp	r3, #23
 8008108:	d013      	beq.n	8008132 <u8x8_cad_SendSequence+0x62>
	return;
 800810a:	e03c      	b.n	8008186 <u8x8_cad_SendSequence+0xb6>
	  v = *data;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	210e      	movs	r1, #14
 8008112:	187b      	adds	r3, r7, r1
 8008114:	701a      	strb	r2, [r3, #0]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68dc      	ldr	r4, [r3, #12]
 800811a:	187b      	adds	r3, r7, r1
 800811c:	781a      	ldrb	r2, [r3, #0]
 800811e:	230f      	movs	r3, #15
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	7819      	ldrb	r1, [r3, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	2300      	movs	r3, #0
 8008128:	47a0      	blx	r4
	  data++;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	3301      	adds	r3, #1
 800812e:	603b      	str	r3, [r7, #0]
	  break;
 8008130:	e028      	b.n	8008184 <u8x8_cad_SendSequence+0xb4>
	  v = *data;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	210e      	movs	r1, #14
 8008138:	187b      	adds	r3, r7, r1
 800813a:	701a      	strb	r2, [r3, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800813c:	187a      	adds	r2, r7, r1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2101      	movs	r1, #1
 8008142:	0018      	movs	r0, r3
 8008144:	f7ff ff8d 	bl	8008062 <u8x8_cad_SendData>
	  data++;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	3301      	adds	r3, #1
 800814c:	603b      	str	r3, [r7, #0]
	  break;
 800814e:	e019      	b.n	8008184 <u8x8_cad_SendSequence+0xb4>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68dc      	ldr	r4, [r3, #12]
 8008154:	230f      	movs	r3, #15
 8008156:	18fb      	adds	r3, r7, r3
 8008158:	7819      	ldrb	r1, [r3, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	2300      	movs	r3, #0
 800815e:	2200      	movs	r2, #0
 8008160:	47a0      	blx	r4
	  break;
 8008162:	e00f      	b.n	8008184 <u8x8_cad_SendSequence+0xb4>
	  v = *data;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781a      	ldrb	r2, [r3, #0]
 8008168:	210e      	movs	r1, #14
 800816a:	187b      	adds	r3, r7, r1
 800816c:	701a      	strb	r2, [r3, #0]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800816e:	187b      	adds	r3, r7, r1
 8008170:	781a      	ldrb	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2129      	movs	r1, #41	@ 0x29
 8008176:	0018      	movs	r0, r3
 8008178:	f000 fa26 	bl	80085c8 <u8x8_gpio_call>
	  data++;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	3301      	adds	r3, #1
 8008180:	603b      	str	r3, [r7, #0]
	  break;
 8008182:	46c0      	nop			@ (mov r8, r8)
    cmd = *data;
 8008184:	e7a9      	b.n	80080da <u8x8_cad_SendSequence+0xa>
	return;
 8008186:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8008188:	46bd      	mov	sp, r7
 800818a:	b005      	add	sp, #20
 800818c:	bd90      	pop	{r4, r7, pc}
	...

08008190 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8008190:	b5b0      	push	{r4, r5, r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	0008      	movs	r0, r1
 800819a:	0011      	movs	r1, r2
 800819c:	607b      	str	r3, [r7, #4]
 800819e:	240b      	movs	r4, #11
 80081a0:	193b      	adds	r3, r7, r4
 80081a2:	1c02      	adds	r2, r0, #0
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	230a      	movs	r3, #10
 80081a8:	18fb      	adds	r3, r7, r3
 80081aa:	1c0a      	adds	r2, r1, #0
 80081ac:	701a      	strb	r2, [r3, #0]
  switch(msg)
 80081ae:	193b      	adds	r3, r7, r4
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	3b14      	subs	r3, #20
 80081b4:	2b05      	cmp	r3, #5
 80081b6:	d833      	bhi.n	8008220 <u8x8_cad_001+0x90>
 80081b8:	009a      	lsls	r2, r3, #2
 80081ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008230 <u8x8_cad_001+0xa0>)
 80081bc:	18d3      	adds	r3, r2, r3
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	469f      	mov	pc, r3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2100      	movs	r1, #0
 80081c6:	0018      	movs	r0, r3
 80081c8:	f7ff fee6 	bl	8007f98 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80081cc:	230a      	movs	r3, #10
 80081ce:	18fb      	adds	r3, r7, r3
 80081d0:	781a      	ldrb	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	0011      	movs	r1, r2
 80081d6:	0018      	movs	r0, r3
 80081d8:	f7ff ff09 	bl	8007fee <u8x8_byte_SendByte>
      break;
 80081dc:	e022      	b.n	8008224 <u8x8_cad_001+0x94>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2100      	movs	r1, #0
 80081e2:	0018      	movs	r0, r3
 80081e4:	f7ff fed8 	bl	8007f98 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80081e8:	230a      	movs	r3, #10
 80081ea:	18fb      	adds	r3, r7, r3
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	0011      	movs	r1, r2
 80081f2:	0018      	movs	r0, r3
 80081f4:	f7ff fefb 	bl	8007fee <u8x8_byte_SendByte>
      break;
 80081f8:	e014      	b.n	8008224 <u8x8_cad_001+0x94>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2101      	movs	r1, #1
 80081fe:	0018      	movs	r0, r3
 8008200:	f7ff feca 	bl	8007f98 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	691c      	ldr	r4, [r3, #16]
 8008208:	687d      	ldr	r5, [r7, #4]
 800820a:	230a      	movs	r3, #10
 800820c:	18fb      	adds	r3, r7, r3
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	230b      	movs	r3, #11
 8008212:	18fb      	adds	r3, r7, r3
 8008214:	7819      	ldrb	r1, [r3, #0]
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	002b      	movs	r3, r5
 800821a:	47a0      	blx	r4
 800821c:	0003      	movs	r3, r0
 800821e:	e002      	b.n	8008226 <u8x8_cad_001+0x96>
    default:
      return 0;
 8008220:	2300      	movs	r3, #0
 8008222:	e000      	b.n	8008226 <u8x8_cad_001+0x96>
  }
  return 1;
 8008224:	2301      	movs	r3, #1
}
 8008226:	0018      	movs	r0, r3
 8008228:	46bd      	mov	sp, r7
 800822a:	b004      	add	sp, #16
 800822c:	bdb0      	pop	{r4, r5, r7, pc}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	0800ce10 	.word	0x0800ce10

08008234 <u8x8_d_sh1107_generic>:
  }
  return 1;
}

static uint8_t u8x8_d_sh1107_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8008234:	b590      	push	{r4, r7, lr}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	0008      	movs	r0, r1
 800823e:	0011      	movs	r1, r2
 8008240:	607b      	str	r3, [r7, #4]
 8008242:	240b      	movs	r4, #11
 8008244:	193b      	adds	r3, r7, r4
 8008246:	1c02      	adds	r2, r0, #0
 8008248:	701a      	strb	r2, [r3, #0]
 800824a:	230a      	movs	r3, #10
 800824c:	18fb      	adds	r3, r7, r3
 800824e:	1c0a      	adds	r2, r1, #0
 8008250:	701a      	strb	r2, [r3, #0]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8008252:	193b      	adds	r3, r7, r4
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b0f      	cmp	r3, #15
 8008258:	d052      	beq.n	8008300 <u8x8_d_sh1107_generic+0xcc>
 800825a:	dd00      	ble.n	800825e <u8x8_d_sh1107_generic+0x2a>
 800825c:	e0a7      	b.n	80083ae <u8x8_d_sh1107_generic+0x17a>
 800825e:	2b0e      	cmp	r3, #14
 8008260:	d038      	beq.n	80082d4 <u8x8_d_sh1107_generic+0xa0>
 8008262:	dd00      	ble.n	8008266 <u8x8_d_sh1107_generic+0x32>
 8008264:	e0a3      	b.n	80083ae <u8x8_d_sh1107_generic+0x17a>
 8008266:	2b0b      	cmp	r3, #11
 8008268:	d002      	beq.n	8008270 <u8x8_d_sh1107_generic+0x3c>
 800826a:	2b0d      	cmp	r3, #13
 800826c:	d013      	beq.n	8008296 <u8x8_d_sh1107_generic+0x62>
 800826e:	e09e      	b.n	80083ae <u8x8_d_sh1107_generic+0x17a>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8008270:	230a      	movs	r3, #10
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <u8x8_d_sh1107_generic+0x54>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave0_seq);
 800827a:	4a50      	ldr	r2, [pc, #320]	@ (80083bc <u8x8_d_sh1107_generic+0x188>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	0011      	movs	r1, r2
 8008280:	0018      	movs	r0, r3
 8008282:	f7ff ff25 	bl	80080d0 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
      break;
 8008286:	e094      	b.n	80083b2 <u8x8_d_sh1107_generic+0x17e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_powersave1_seq);
 8008288:	4a4d      	ldr	r2, [pc, #308]	@ (80083c0 <u8x8_d_sh1107_generic+0x18c>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	0011      	movs	r1, r2
 800828e:	0018      	movs	r0, r3
 8008290:	f7ff ff1e 	bl	80080d0 <u8x8_cad_SendSequence>
      break;
 8008294:	e08d      	b.n	80083b2 <u8x8_d_sh1107_generic+0x17e>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8008296:	230a      	movs	r3, #10
 8008298:	18fb      	adds	r3, r7, r3
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10c      	bne.n	80082ba <u8x8_d_sh1107_generic+0x86>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip0_seq);
 80082a0:	4a48      	ldr	r2, [pc, #288]	@ (80083c4 <u8x8_d_sh1107_generic+0x190>)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	0011      	movs	r1, r2
 80082a6:	0018      	movs	r0, r3
 80082a8:	f7ff ff12 	bl	80080d0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	7c99      	ldrb	r1, [r3, #18]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2222      	movs	r2, #34	@ 0x22
 80082b6:	5499      	strb	r1, [r3, r2]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80082b8:	e07b      	b.n	80083b2 <u8x8_d_sh1107_generic+0x17e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_64x128_noname_flip1_seq);
 80082ba:	4a43      	ldr	r2, [pc, #268]	@ (80083c8 <u8x8_d_sh1107_generic+0x194>)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	0011      	movs	r1, r2
 80082c0:	0018      	movs	r0, r3
 80082c2:	f7ff ff05 	bl	80080d0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	7cd9      	ldrb	r1, [r3, #19]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2222      	movs	r2, #34	@ 0x22
 80082d0:	5499      	strb	r1, [r3, r2]
      break;
 80082d2:	e06e      	b.n	80083b2 <u8x8_d_sh1107_generic+0x17e>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	0018      	movs	r0, r3
 80082d8:	f7ff feda 	bl	8008090 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2181      	movs	r1, #129	@ 0x81
 80082e0:	0018      	movs	r0, r3
 80082e2:	f7ff fe96 	bl	8008012 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* sh1107 has range from 0 to 255 */
 80082e6:	230a      	movs	r3, #10
 80082e8:	18fb      	adds	r3, r7, r3
 80082ea:	781a      	ldrb	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	0011      	movs	r1, r2
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7ff fea2 	bl	800803a <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	0018      	movs	r0, r3
 80082fa:	f7ff fed9 	bl	80080b0 <u8x8_cad_EndTransfer>
      break;
 80082fe:	e058      	b.n	80083b2 <u8x8_d_sh1107_generic+0x17e>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	0018      	movs	r0, r3
 8008304:	f7ff fec4 	bl	8008090 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8008308:	2417      	movs	r4, #23
 800830a:	193b      	adds	r3, r7, r4
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	7952      	ldrb	r2, [r2, #5]
 8008310:	701a      	strb	r2, [r3, #0]
      x *= 8;
 8008312:	193b      	adds	r3, r7, r4
 8008314:	193a      	adds	r2, r7, r4
 8008316:	7812      	ldrb	r2, [r2, #0]
 8008318:	00d2      	lsls	r2, r2, #3
 800831a:	701a      	strb	r2, [r3, #0]
      x += u8x8->x_offset;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2222      	movs	r2, #34	@ 0x22
 8008320:	5c99      	ldrb	r1, [r3, r2]
 8008322:	193b      	adds	r3, r7, r4
 8008324:	193a      	adds	r2, r7, r4
 8008326:	7812      	ldrb	r2, [r2, #0]
 8008328:	188a      	adds	r2, r1, r2
 800832a:	701a      	strb	r2, [r3, #0]

      //u8x8_cad_SendCmd(u8x8, 0x040 ); /* set line offset to 0 */

      // set column address
      u8x8_cad_SendCmd(u8x8, 0x010 | (x >> 4));
 800832c:	193b      	adds	r3, r7, r4
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	091b      	lsrs	r3, r3, #4
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2210      	movs	r2, #16
 8008336:	4313      	orrs	r3, r2
 8008338:	b2da      	uxtb	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	0011      	movs	r1, r2
 800833e:	0018      	movs	r0, r3
 8008340:	f7ff fe67 	bl	8008012 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x & 15))); /* probably wrong, should be SendCmd */
 8008344:	193b      	adds	r3, r7, r4
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	220f      	movs	r2, #15
 800834a:	4013      	ands	r3, r2
 800834c:	b2da      	uxtb	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	0011      	movs	r1, r2
 8008352:	0018      	movs	r0, r3
 8008354:	f7ff fe5d 	bl	8008012 <u8x8_cad_SendCmd>
      
      // set page address
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)); /* probably wrong, should be SendCmd */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	799b      	ldrb	r3, [r3, #6]
 800835c:	2250      	movs	r2, #80	@ 0x50
 800835e:	4252      	negs	r2, r2
 8008360:	4313      	orrs	r3, r2
 8008362:	b2da      	uxtb	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	0011      	movs	r1, r2
 8008368:	0018      	movs	r0, r3
 800836a:	f7ff fe52 	bl	8008012 <u8x8_cad_SendCmd>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800836e:	2116      	movs	r1, #22
 8008370:	187b      	adds	r3, r7, r1
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	7912      	ldrb	r2, [r2, #4]
 8008376:	701a      	strb	r2, [r3, #0]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800837e:	187b      	adds	r3, r7, r1
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	b2d9      	uxtb	r1, r3
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	0018      	movs	r0, r3
 800838c:	f7ff fe69 	bl	8008062 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8008390:	210a      	movs	r1, #10
 8008392:	187b      	adds	r3, r7, r1
 8008394:	781a      	ldrb	r2, [r3, #0]
 8008396:	187b      	adds	r3, r7, r1
 8008398:	3a01      	subs	r2, #1
 800839a:	701a      	strb	r2, [r3, #0]
      } while( arg_int > 0 );
 800839c:	187b      	adds	r3, r7, r1
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e4      	bne.n	800836e <u8x8_d_sh1107_generic+0x13a>
      
      u8x8_cad_EndTransfer(u8x8);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	0018      	movs	r0, r3
 80083a8:	f7ff fe82 	bl	80080b0 <u8x8_cad_EndTransfer>
      break;
 80083ac:	e001      	b.n	80083b2 <u8x8_d_sh1107_generic+0x17e>
    default:
      return 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	e000      	b.n	80083b4 <u8x8_d_sh1107_generic+0x180>
  }
  return 1;
 80083b2:	2301      	movs	r3, #1
}
 80083b4:	0018      	movs	r0, r3
 80083b6:	46bd      	mov	sp, r7
 80083b8:	b007      	add	sp, #28
 80083ba:	bd90      	pop	{r4, r7, pc}
 80083bc:	0800ce28 	.word	0x0800ce28
 80083c0:	0800ce30 	.word	0x0800ce30
 80083c4:	0800ce38 	.word	0x0800ce38
 80083c8:	0800ce40 	.word	0x0800ce40

080083cc <u8x8_d_sh1107_seeed_128x128>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 128
};

uint8_t u8x8_d_sh1107_seeed_128x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80083cc:	b5b0      	push	{r4, r5, r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	0008      	movs	r0, r1
 80083d6:	0011      	movs	r1, r2
 80083d8:	607b      	str	r3, [r7, #4]
 80083da:	250b      	movs	r5, #11
 80083dc:	197b      	adds	r3, r7, r5
 80083de:	1c02      	adds	r2, r0, #0
 80083e0:	701a      	strb	r2, [r3, #0]
 80083e2:	200a      	movs	r0, #10
 80083e4:	183b      	adds	r3, r7, r0
 80083e6:	1c0a      	adds	r2, r1, #0
 80083e8:	701a      	strb	r2, [r3, #0]
    
  if ( u8x8_d_sh1107_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80083ea:	687c      	ldr	r4, [r7, #4]
 80083ec:	183b      	adds	r3, r7, r0
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	197b      	adds	r3, r7, r5
 80083f2:	7819      	ldrb	r1, [r3, #0]
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	0023      	movs	r3, r4
 80083f8:	f7ff ff1c 	bl	8008234 <u8x8_d_sh1107_generic>
 80083fc:	1e03      	subs	r3, r0, #0
 80083fe:	d001      	beq.n	8008404 <u8x8_d_sh1107_seeed_128x128+0x38>
    return 1;
 8008400:	2301      	movs	r3, #1
 8008402:	e01b      	b.n	800843c <u8x8_d_sh1107_seeed_128x128+0x70>
  
  switch(msg)
 8008404:	230b      	movs	r3, #11
 8008406:	18fb      	adds	r3, r7, r3
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b09      	cmp	r3, #9
 800840c:	d00c      	beq.n	8008428 <u8x8_d_sh1107_seeed_128x128+0x5c>
 800840e:	2b0a      	cmp	r3, #10
 8008410:	d111      	bne.n	8008436 <u8x8_d_sh1107_seeed_128x128+0x6a>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	0018      	movs	r0, r3
 8008416:	f000 f82b 	bl	8008470 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1107_128x128_init_seq); 
 800841a:	4a0a      	ldr	r2, [pc, #40]	@ (8008444 <u8x8_d_sh1107_seeed_128x128+0x78>)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	0011      	movs	r1, r2
 8008420:	0018      	movs	r0, r3
 8008422:	f7ff fe55 	bl	80080d0 <u8x8_cad_SendSequence>
      break;
 8008426:	e008      	b.n	800843a <u8x8_d_sh1107_seeed_128x128+0x6e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_seeed_128x128_display_info);
 8008428:	4a07      	ldr	r2, [pc, #28]	@ (8008448 <u8x8_d_sh1107_seeed_128x128+0x7c>)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	0011      	movs	r1, r2
 800842e:	0018      	movs	r0, r3
 8008430:	f000 f80c 	bl	800844c <u8x8_d_helper_display_setup_memory>
      break;
 8008434:	e001      	b.n	800843a <u8x8_d_sh1107_seeed_128x128+0x6e>
    default:
      return 0;
 8008436:	2300      	movs	r3, #0
 8008438:	e000      	b.n	800843c <u8x8_d_sh1107_seeed_128x128+0x70>
  }
  return 1;
 800843a:	2301      	movs	r3, #1
}
 800843c:	0018      	movs	r0, r3
 800843e:	46bd      	mov	sp, r7
 8008440:	b004      	add	sp, #16
 8008442:	bdb0      	pop	{r4, r5, r7, pc}
 8008444:	0800ce48 	.word	0x0800ce48
 8008448:	0800ce78 	.word	0x0800ce78

0800844c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	7c99      	ldrb	r1, [r3, #18]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2222      	movs	r2, #34	@ 0x22
 8008466:	5499      	strb	r1, [r3, r2]
}
 8008468:	46c0      	nop			@ (mov r8, r8)
 800846a:	46bd      	mov	sp, r7
 800846c:	b002      	add	sp, #8
 800846e:	bd80      	pop	{r7, pc}

08008470 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8008470:	b590      	push	{r4, r7, lr}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);             /* macro, which calls gpio_and_delay_cb with U8X8_MSG_GPIO_AND_DELAY_INIT */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	695c      	ldr	r4, [r3, #20]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	2300      	movs	r3, #0
 8008480:	2200      	movs	r2, #0
 8008482:	2128      	movs	r1, #40	@ 0x28
 8008484:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68dc      	ldr	r4, [r3, #12]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	2300      	movs	r3, #0
 800848e:	2200      	movs	r2, #0
 8008490:	2114      	movs	r1, #20
 8008492:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	214b      	movs	r1, #75	@ 0x4b
 800849a:	0018      	movs	r0, r3
 800849c:	f000 f894 	bl	80085c8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	791a      	ldrb	r2, [r3, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2129      	movs	r1, #41	@ 0x29
 80084aa:	0018      	movs	r0, r3
 80084ac:	f000 f88c 	bl	80085c8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	214b      	movs	r1, #75	@ 0x4b
 80084b6:	0018      	movs	r0, r3
 80084b8:	f000 f886 	bl	80085c8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	791a      	ldrb	r2, [r3, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2129      	movs	r1, #41	@ 0x29
 80084c6:	0018      	movs	r0, r3
 80084c8:	f000 f87e 	bl	80085c8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	214b      	movs	r1, #75	@ 0x4b
 80084d2:	0018      	movs	r0, r3
 80084d4:	f000 f878 	bl	80085c8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	795a      	ldrb	r2, [r3, #5]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2129      	movs	r1, #41	@ 0x29
 80084e2:	0018      	movs	r0, r3
 80084e4:	f000 f870 	bl	80085c8 <u8x8_gpio_call>
}    
 80084e8:	46c0      	nop			@ (mov r8, r8)
 80084ea:	46bd      	mov	sp, r7
 80084ec:	b003      	add	sp, #12
 80084ee:	bd90      	pop	{r4, r7, pc}

080084f0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80084f0:	b590      	push	{r4, r7, lr}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	000c      	movs	r4, r1
 80084fa:	0010      	movs	r0, r2
 80084fc:	0019      	movs	r1, r3
 80084fe:	1cfb      	adds	r3, r7, #3
 8008500:	1c22      	adds	r2, r4, #0
 8008502:	701a      	strb	r2, [r3, #0]
 8008504:	1cbb      	adds	r3, r7, #2
 8008506:	1c02      	adds	r2, r0, #0
 8008508:	701a      	strb	r2, [r3, #0]
 800850a:	1c7b      	adds	r3, r7, #1
 800850c:	1c0a      	adds	r2, r1, #0
 800850e:	701a      	strb	r2, [r3, #0]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8008510:	2108      	movs	r1, #8
 8008512:	187b      	adds	r3, r7, r1
 8008514:	1cfa      	adds	r2, r7, #3
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	715a      	strb	r2, [r3, #5]
  tile.y_pos = y;
 800851a:	187b      	adds	r3, r7, r1
 800851c:	1cba      	adds	r2, r7, #2
 800851e:	7812      	ldrb	r2, [r2, #0]
 8008520:	719a      	strb	r2, [r3, #6]
  tile.cnt = cnt;
 8008522:	187b      	adds	r3, r7, r1
 8008524:	1c7a      	adds	r2, r7, #1
 8008526:	7812      	ldrb	r2, [r2, #0]
 8008528:	711a      	strb	r2, [r3, #4]
  tile.tile_ptr = tile_ptr;
 800852a:	187b      	adds	r3, r7, r1
 800852c:	6a3a      	ldr	r2, [r7, #32]
 800852e:	601a      	str	r2, [r3, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689c      	ldr	r4, [r3, #8]
 8008534:	187b      	adds	r3, r7, r1
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	210f      	movs	r1, #15
 800853c:	47a0      	blx	r4
 800853e:	0003      	movs	r3, r0
}
 8008540:	0018      	movs	r0, r3
 8008542:	46bd      	mov	sp, r7
 8008544:	b005      	add	sp, #20
 8008546:	bd90      	pop	{r4, r7, pc}

08008548 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8008548:	b590      	push	{r4, r7, lr}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689c      	ldr	r4, [r3, #8]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	2300      	movs	r3, #0
 8008558:	2200      	movs	r2, #0
 800855a:	2109      	movs	r1, #9
 800855c:	47a0      	blx	r4
}
 800855e:	46c0      	nop			@ (mov r8, r8)
 8008560:	46bd      	mov	sp, r7
 8008562:	b003      	add	sp, #12
 8008564:	bd90      	pop	{r4, r7, pc}

08008566 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8008566:	b590      	push	{r4, r7, lr}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689c      	ldr	r4, [r3, #8]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	2300      	movs	r3, #0
 8008576:	2200      	movs	r2, #0
 8008578:	210a      	movs	r1, #10
 800857a:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800857c:	46c0      	nop			@ (mov r8, r8)
 800857e:	46bd      	mov	sp, r7
 8008580:	b003      	add	sp, #12
 8008582:	bd90      	pop	{r4, r7, pc}

08008584 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8008584:	b590      	push	{r4, r7, lr}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	000a      	movs	r2, r1
 800858e:	1cfb      	adds	r3, r7, #3
 8008590:	701a      	strb	r2, [r3, #0]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689c      	ldr	r4, [r3, #8]
 8008596:	1cfb      	adds	r3, r7, #3
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	2300      	movs	r3, #0
 800859e:	210b      	movs	r1, #11
 80085a0:	47a0      	blx	r4
}
 80085a2:	46c0      	nop			@ (mov r8, r8)
 80085a4:	46bd      	mov	sp, r7
 80085a6:	b003      	add	sp, #12
 80085a8:	bd90      	pop	{r4, r7, pc}

080085aa <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80085aa:	b590      	push	{r4, r7, lr}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689c      	ldr	r4, [r3, #8]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	2300      	movs	r3, #0
 80085ba:	2200      	movs	r2, #0
 80085bc:	2110      	movs	r1, #16
 80085be:	47a0      	blx	r4
}
 80085c0:	46c0      	nop			@ (mov r8, r8)
 80085c2:	46bd      	mov	sp, r7
 80085c4:	b003      	add	sp, #12
 80085c6:	bd90      	pop	{r4, r7, pc}

080085c8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80085c8:	b590      	push	{r4, r7, lr}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	0008      	movs	r0, r1
 80085d2:	0011      	movs	r1, r2
 80085d4:	1cfb      	adds	r3, r7, #3
 80085d6:	1c02      	adds	r2, r0, #0
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	1cbb      	adds	r3, r7, #2
 80085dc:	1c0a      	adds	r2, r1, #0
 80085de:	701a      	strb	r2, [r3, #0]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695c      	ldr	r4, [r3, #20]
 80085e4:	1cbb      	adds	r3, r7, #2
 80085e6:	781a      	ldrb	r2, [r3, #0]
 80085e8:	1cfb      	adds	r3, r7, #3
 80085ea:	7819      	ldrb	r1, [r3, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	2300      	movs	r3, #0
 80085f0:	47a0      	blx	r4
}
 80085f2:	46c0      	nop			@ (mov r8, r8)
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b003      	add	sp, #12
 80085f8:	bd90      	pop	{r4, r7, pc}

080085fa <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	0008      	movs	r0, r1
 8008604:	0011      	movs	r1, r2
 8008606:	607b      	str	r3, [r7, #4]
 8008608:	230b      	movs	r3, #11
 800860a:	18fb      	adds	r3, r7, r3
 800860c:	1c02      	adds	r2, r0, #0
 800860e:	701a      	strb	r2, [r3, #0]
 8008610:	230a      	movs	r3, #10
 8008612:	18fb      	adds	r3, r7, r3
 8008614:	1c0a      	adds	r2, r1, #0
 8008616:	701a      	strb	r2, [r3, #0]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8008618:	2300      	movs	r3, #0
}
 800861a:	0018      	movs	r0, r3
 800861c:	46bd      	mov	sp, r7
 800861e:	b004      	add	sp, #16
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a10      	ldr	r2, [pc, #64]	@ (8008678 <u8x8_SetupDefaults+0x54>)
 8008636:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a0f      	ldr	r2, [pc, #60]	@ (8008678 <u8x8_SetupDefaults+0x54>)
 800863c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a0d      	ldr	r2, [pc, #52]	@ (8008678 <u8x8_SetupDefaults+0x54>)
 8008642:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a0c      	ldr	r2, [pc, #48]	@ (8008678 <u8x8_SetupDefaults+0x54>)
 8008648:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2223      	movs	r2, #35	@ 0x23
 800864e:	2100      	movs	r1, #0
 8008650:	5499      	strb	r1, [r3, r2]
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2226      	movs	r2, #38	@ 0x26
 8008656:	2100      	movs	r1, #0
 8008658:	5499      	strb	r1, [r3, r2]
    u8x8->bus_clock = 0;		/* issue 769 */
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2224      	movs	r2, #36	@ 0x24
 8008664:	21ff      	movs	r1, #255	@ 0xff
 8008666:	5499      	strb	r1, [r3, r2]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2228      	movs	r2, #40	@ 0x28
 800866c:	21ff      	movs	r1, #255	@ 0xff
 800866e:	5499      	strb	r1, [r3, r2]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8008670:	46c0      	nop			@ (mov r8, r8)
 8008672:	46bd      	mov	sp, r7
 8008674:	b002      	add	sp, #8
 8008676:	bd80      	pop	{r7, pc}
 8008678:	080085fb 	.word	0x080085fb

0800867c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	0018      	movs	r0, r3
 800868e:	f7ff ffc9 	bl	8008624 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	0018      	movs	r0, r3
 80086ae:	f7ff ff4b 	bl	8008548 <u8x8_SetupMemory>
}
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b004      	add	sp, #16
 80086b8:	bd80      	pop	{r7, pc}

080086ba <__cvt>:
 80086ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086bc:	001f      	movs	r7, r3
 80086be:	2300      	movs	r3, #0
 80086c0:	0016      	movs	r6, r2
 80086c2:	b08b      	sub	sp, #44	@ 0x2c
 80086c4:	429f      	cmp	r7, r3
 80086c6:	da04      	bge.n	80086d2 <__cvt+0x18>
 80086c8:	2180      	movs	r1, #128	@ 0x80
 80086ca:	0609      	lsls	r1, r1, #24
 80086cc:	187b      	adds	r3, r7, r1
 80086ce:	001f      	movs	r7, r3
 80086d0:	232d      	movs	r3, #45	@ 0x2d
 80086d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80086d4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80086d6:	7013      	strb	r3, [r2, #0]
 80086d8:	2320      	movs	r3, #32
 80086da:	2203      	movs	r2, #3
 80086dc:	439d      	bics	r5, r3
 80086de:	2d46      	cmp	r5, #70	@ 0x46
 80086e0:	d007      	beq.n	80086f2 <__cvt+0x38>
 80086e2:	002b      	movs	r3, r5
 80086e4:	3b45      	subs	r3, #69	@ 0x45
 80086e6:	4259      	negs	r1, r3
 80086e8:	414b      	adcs	r3, r1
 80086ea:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80086ec:	3a01      	subs	r2, #1
 80086ee:	18cb      	adds	r3, r1, r3
 80086f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80086f2:	ab09      	add	r3, sp, #36	@ 0x24
 80086f4:	9304      	str	r3, [sp, #16]
 80086f6:	ab08      	add	r3, sp, #32
 80086f8:	9303      	str	r3, [sp, #12]
 80086fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086fc:	9200      	str	r2, [sp, #0]
 80086fe:	9302      	str	r3, [sp, #8]
 8008700:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008702:	0032      	movs	r2, r6
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	003b      	movs	r3, r7
 8008708:	f000 fe80 	bl	800940c <_dtoa_r>
 800870c:	0004      	movs	r4, r0
 800870e:	2d47      	cmp	r5, #71	@ 0x47
 8008710:	d11b      	bne.n	800874a <__cvt+0x90>
 8008712:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008714:	07db      	lsls	r3, r3, #31
 8008716:	d511      	bpl.n	800873c <__cvt+0x82>
 8008718:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800871a:	18c3      	adds	r3, r0, r3
 800871c:	9307      	str	r3, [sp, #28]
 800871e:	2200      	movs	r2, #0
 8008720:	2300      	movs	r3, #0
 8008722:	0030      	movs	r0, r6
 8008724:	0039      	movs	r1, r7
 8008726:	f7f7 fe8f 	bl	8000448 <__aeabi_dcmpeq>
 800872a:	2800      	cmp	r0, #0
 800872c:	d001      	beq.n	8008732 <__cvt+0x78>
 800872e:	9b07      	ldr	r3, [sp, #28]
 8008730:	9309      	str	r3, [sp, #36]	@ 0x24
 8008732:	2230      	movs	r2, #48	@ 0x30
 8008734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008736:	9907      	ldr	r1, [sp, #28]
 8008738:	428b      	cmp	r3, r1
 800873a:	d320      	bcc.n	800877e <__cvt+0xc4>
 800873c:	0020      	movs	r0, r4
 800873e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008740:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008742:	1b1b      	subs	r3, r3, r4
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	b00b      	add	sp, #44	@ 0x2c
 8008748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800874a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800874c:	18c3      	adds	r3, r0, r3
 800874e:	9307      	str	r3, [sp, #28]
 8008750:	2d46      	cmp	r5, #70	@ 0x46
 8008752:	d1e4      	bne.n	800871e <__cvt+0x64>
 8008754:	7803      	ldrb	r3, [r0, #0]
 8008756:	2b30      	cmp	r3, #48	@ 0x30
 8008758:	d10c      	bne.n	8008774 <__cvt+0xba>
 800875a:	2200      	movs	r2, #0
 800875c:	2300      	movs	r3, #0
 800875e:	0030      	movs	r0, r6
 8008760:	0039      	movs	r1, r7
 8008762:	f7f7 fe71 	bl	8000448 <__aeabi_dcmpeq>
 8008766:	2800      	cmp	r0, #0
 8008768:	d104      	bne.n	8008774 <__cvt+0xba>
 800876a:	2301      	movs	r3, #1
 800876c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008776:	9a07      	ldr	r2, [sp, #28]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	18d3      	adds	r3, r2, r3
 800877c:	e7ce      	b.n	800871c <__cvt+0x62>
 800877e:	1c59      	adds	r1, r3, #1
 8008780:	9109      	str	r1, [sp, #36]	@ 0x24
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	e7d6      	b.n	8008734 <__cvt+0x7a>

08008786 <__exponent>:
 8008786:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008788:	232b      	movs	r3, #43	@ 0x2b
 800878a:	b085      	sub	sp, #20
 800878c:	0005      	movs	r5, r0
 800878e:	1e0c      	subs	r4, r1, #0
 8008790:	7002      	strb	r2, [r0, #0]
 8008792:	da01      	bge.n	8008798 <__exponent+0x12>
 8008794:	424c      	negs	r4, r1
 8008796:	3302      	adds	r3, #2
 8008798:	706b      	strb	r3, [r5, #1]
 800879a:	2c09      	cmp	r4, #9
 800879c:	dd2c      	ble.n	80087f8 <__exponent+0x72>
 800879e:	ab02      	add	r3, sp, #8
 80087a0:	1dde      	adds	r6, r3, #7
 80087a2:	0020      	movs	r0, r4
 80087a4:	210a      	movs	r1, #10
 80087a6:	f7f7 fe39 	bl	800041c <__aeabi_idivmod>
 80087aa:	0037      	movs	r7, r6
 80087ac:	3130      	adds	r1, #48	@ 0x30
 80087ae:	3e01      	subs	r6, #1
 80087b0:	0020      	movs	r0, r4
 80087b2:	7031      	strb	r1, [r6, #0]
 80087b4:	210a      	movs	r1, #10
 80087b6:	9401      	str	r4, [sp, #4]
 80087b8:	f7f7 fd4a 	bl	8000250 <__divsi3>
 80087bc:	9b01      	ldr	r3, [sp, #4]
 80087be:	0004      	movs	r4, r0
 80087c0:	2b63      	cmp	r3, #99	@ 0x63
 80087c2:	dcee      	bgt.n	80087a2 <__exponent+0x1c>
 80087c4:	1eba      	subs	r2, r7, #2
 80087c6:	1ca8      	adds	r0, r5, #2
 80087c8:	0001      	movs	r1, r0
 80087ca:	0013      	movs	r3, r2
 80087cc:	3430      	adds	r4, #48	@ 0x30
 80087ce:	7014      	strb	r4, [r2, #0]
 80087d0:	ac02      	add	r4, sp, #8
 80087d2:	3407      	adds	r4, #7
 80087d4:	429c      	cmp	r4, r3
 80087d6:	d80a      	bhi.n	80087ee <__exponent+0x68>
 80087d8:	2300      	movs	r3, #0
 80087da:	4294      	cmp	r4, r2
 80087dc:	d303      	bcc.n	80087e6 <__exponent+0x60>
 80087de:	3309      	adds	r3, #9
 80087e0:	aa02      	add	r2, sp, #8
 80087e2:	189b      	adds	r3, r3, r2
 80087e4:	1bdb      	subs	r3, r3, r7
 80087e6:	18c0      	adds	r0, r0, r3
 80087e8:	1b40      	subs	r0, r0, r5
 80087ea:	b005      	add	sp, #20
 80087ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ee:	781c      	ldrb	r4, [r3, #0]
 80087f0:	3301      	adds	r3, #1
 80087f2:	700c      	strb	r4, [r1, #0]
 80087f4:	3101      	adds	r1, #1
 80087f6:	e7eb      	b.n	80087d0 <__exponent+0x4a>
 80087f8:	2330      	movs	r3, #48	@ 0x30
 80087fa:	18e4      	adds	r4, r4, r3
 80087fc:	70ab      	strb	r3, [r5, #2]
 80087fe:	1d28      	adds	r0, r5, #4
 8008800:	70ec      	strb	r4, [r5, #3]
 8008802:	e7f1      	b.n	80087e8 <__exponent+0x62>

08008804 <_printf_float>:
 8008804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008806:	b097      	sub	sp, #92	@ 0x5c
 8008808:	000d      	movs	r5, r1
 800880a:	920a      	str	r2, [sp, #40]	@ 0x28
 800880c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800880e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008810:	9009      	str	r0, [sp, #36]	@ 0x24
 8008812:	f000 fceb 	bl	80091ec <_localeconv_r>
 8008816:	6803      	ldr	r3, [r0, #0]
 8008818:	0018      	movs	r0, r3
 800881a:	930d      	str	r3, [sp, #52]	@ 0x34
 800881c:	f7f7 fc72 	bl	8000104 <strlen>
 8008820:	2300      	movs	r3, #0
 8008822:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008824:	9314      	str	r3, [sp, #80]	@ 0x50
 8008826:	7e2b      	ldrb	r3, [r5, #24]
 8008828:	2207      	movs	r2, #7
 800882a:	930c      	str	r3, [sp, #48]	@ 0x30
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008830:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	05c9      	lsls	r1, r1, #23
 8008836:	d545      	bpl.n	80088c4 <_printf_float+0xc0>
 8008838:	189b      	adds	r3, r3, r2
 800883a:	4393      	bics	r3, r2
 800883c:	001a      	movs	r2, r3
 800883e:	3208      	adds	r2, #8
 8008840:	6022      	str	r2, [r4, #0]
 8008842:	2201      	movs	r2, #1
 8008844:	681e      	ldr	r6, [r3, #0]
 8008846:	685f      	ldr	r7, [r3, #4]
 8008848:	007b      	lsls	r3, r7, #1
 800884a:	085b      	lsrs	r3, r3, #1
 800884c:	9311      	str	r3, [sp, #68]	@ 0x44
 800884e:	9610      	str	r6, [sp, #64]	@ 0x40
 8008850:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008852:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008854:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008856:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008858:	4ba7      	ldr	r3, [pc, #668]	@ (8008af8 <_printf_float+0x2f4>)
 800885a:	4252      	negs	r2, r2
 800885c:	f7fa fd58 	bl	8003310 <__aeabi_dcmpun>
 8008860:	2800      	cmp	r0, #0
 8008862:	d131      	bne.n	80088c8 <_printf_float+0xc4>
 8008864:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008866:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008868:	2201      	movs	r2, #1
 800886a:	4ba3      	ldr	r3, [pc, #652]	@ (8008af8 <_printf_float+0x2f4>)
 800886c:	4252      	negs	r2, r2
 800886e:	f7f7 fdfb 	bl	8000468 <__aeabi_dcmple>
 8008872:	2800      	cmp	r0, #0
 8008874:	d128      	bne.n	80088c8 <_printf_float+0xc4>
 8008876:	2200      	movs	r2, #0
 8008878:	2300      	movs	r3, #0
 800887a:	0030      	movs	r0, r6
 800887c:	0039      	movs	r1, r7
 800887e:	f7f7 fde9 	bl	8000454 <__aeabi_dcmplt>
 8008882:	2800      	cmp	r0, #0
 8008884:	d003      	beq.n	800888e <_printf_float+0x8a>
 8008886:	002b      	movs	r3, r5
 8008888:	222d      	movs	r2, #45	@ 0x2d
 800888a:	3343      	adds	r3, #67	@ 0x43
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008890:	4f9a      	ldr	r7, [pc, #616]	@ (8008afc <_printf_float+0x2f8>)
 8008892:	2b47      	cmp	r3, #71	@ 0x47
 8008894:	d800      	bhi.n	8008898 <_printf_float+0x94>
 8008896:	4f9a      	ldr	r7, [pc, #616]	@ (8008b00 <_printf_float+0x2fc>)
 8008898:	2303      	movs	r3, #3
 800889a:	2400      	movs	r4, #0
 800889c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800889e:	612b      	str	r3, [r5, #16]
 80088a0:	3301      	adds	r3, #1
 80088a2:	439a      	bics	r2, r3
 80088a4:	602a      	str	r2, [r5, #0]
 80088a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088a8:	0029      	movs	r1, r5
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088b0:	aa15      	add	r2, sp, #84	@ 0x54
 80088b2:	f000 f9e5 	bl	8008c80 <_printf_common>
 80088b6:	3001      	adds	r0, #1
 80088b8:	d000      	beq.n	80088bc <_printf_float+0xb8>
 80088ba:	e09e      	b.n	80089fa <_printf_float+0x1f6>
 80088bc:	2001      	movs	r0, #1
 80088be:	4240      	negs	r0, r0
 80088c0:	b017      	add	sp, #92	@ 0x5c
 80088c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c4:	3307      	adds	r3, #7
 80088c6:	e7b8      	b.n	800883a <_printf_float+0x36>
 80088c8:	0032      	movs	r2, r6
 80088ca:	003b      	movs	r3, r7
 80088cc:	0030      	movs	r0, r6
 80088ce:	0039      	movs	r1, r7
 80088d0:	f7fa fd1e 	bl	8003310 <__aeabi_dcmpun>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d00b      	beq.n	80088f0 <_printf_float+0xec>
 80088d8:	2f00      	cmp	r7, #0
 80088da:	da03      	bge.n	80088e4 <_printf_float+0xe0>
 80088dc:	002b      	movs	r3, r5
 80088de:	222d      	movs	r2, #45	@ 0x2d
 80088e0:	3343      	adds	r3, #67	@ 0x43
 80088e2:	701a      	strb	r2, [r3, #0]
 80088e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088e6:	4f87      	ldr	r7, [pc, #540]	@ (8008b04 <_printf_float+0x300>)
 80088e8:	2b47      	cmp	r3, #71	@ 0x47
 80088ea:	d8d5      	bhi.n	8008898 <_printf_float+0x94>
 80088ec:	4f86      	ldr	r7, [pc, #536]	@ (8008b08 <_printf_float+0x304>)
 80088ee:	e7d3      	b.n	8008898 <_printf_float+0x94>
 80088f0:	2220      	movs	r2, #32
 80088f2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80088f4:	686b      	ldr	r3, [r5, #4]
 80088f6:	4394      	bics	r4, r2
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	d146      	bne.n	800898a <_printf_float+0x186>
 80088fc:	3307      	adds	r3, #7
 80088fe:	606b      	str	r3, [r5, #4]
 8008900:	2380      	movs	r3, #128	@ 0x80
 8008902:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	4313      	orrs	r3, r2
 8008908:	2200      	movs	r2, #0
 800890a:	602b      	str	r3, [r5, #0]
 800890c:	9206      	str	r2, [sp, #24]
 800890e:	aa14      	add	r2, sp, #80	@ 0x50
 8008910:	9205      	str	r2, [sp, #20]
 8008912:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008914:	a90a      	add	r1, sp, #40	@ 0x28
 8008916:	9204      	str	r2, [sp, #16]
 8008918:	aa13      	add	r2, sp, #76	@ 0x4c
 800891a:	9203      	str	r2, [sp, #12]
 800891c:	2223      	movs	r2, #35	@ 0x23
 800891e:	1852      	adds	r2, r2, r1
 8008920:	9202      	str	r2, [sp, #8]
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	686b      	ldr	r3, [r5, #4]
 8008926:	0032      	movs	r2, r6
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800892c:	003b      	movs	r3, r7
 800892e:	f7ff fec4 	bl	80086ba <__cvt>
 8008932:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008934:	0007      	movs	r7, r0
 8008936:	2c47      	cmp	r4, #71	@ 0x47
 8008938:	d12d      	bne.n	8008996 <_printf_float+0x192>
 800893a:	1cd3      	adds	r3, r2, #3
 800893c:	db02      	blt.n	8008944 <_printf_float+0x140>
 800893e:	686b      	ldr	r3, [r5, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	dd47      	ble.n	80089d4 <_printf_float+0x1d0>
 8008944:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008946:	3b02      	subs	r3, #2
 8008948:	b2db      	uxtb	r3, r3
 800894a:	930c      	str	r3, [sp, #48]	@ 0x30
 800894c:	0028      	movs	r0, r5
 800894e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008950:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008952:	3901      	subs	r1, #1
 8008954:	3050      	adds	r0, #80	@ 0x50
 8008956:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008958:	f7ff ff15 	bl	8008786 <__exponent>
 800895c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800895e:	0004      	movs	r4, r0
 8008960:	1813      	adds	r3, r2, r0
 8008962:	612b      	str	r3, [r5, #16]
 8008964:	2a01      	cmp	r2, #1
 8008966:	dc02      	bgt.n	800896e <_printf_float+0x16a>
 8008968:	682a      	ldr	r2, [r5, #0]
 800896a:	07d2      	lsls	r2, r2, #31
 800896c:	d501      	bpl.n	8008972 <_printf_float+0x16e>
 800896e:	3301      	adds	r3, #1
 8008970:	612b      	str	r3, [r5, #16]
 8008972:	2323      	movs	r3, #35	@ 0x23
 8008974:	aa0a      	add	r2, sp, #40	@ 0x28
 8008976:	189b      	adds	r3, r3, r2
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d100      	bne.n	8008980 <_printf_float+0x17c>
 800897e:	e792      	b.n	80088a6 <_printf_float+0xa2>
 8008980:	002b      	movs	r3, r5
 8008982:	222d      	movs	r2, #45	@ 0x2d
 8008984:	3343      	adds	r3, #67	@ 0x43
 8008986:	701a      	strb	r2, [r3, #0]
 8008988:	e78d      	b.n	80088a6 <_printf_float+0xa2>
 800898a:	2c47      	cmp	r4, #71	@ 0x47
 800898c:	d1b8      	bne.n	8008900 <_printf_float+0xfc>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1b6      	bne.n	8008900 <_printf_float+0xfc>
 8008992:	3301      	adds	r3, #1
 8008994:	e7b3      	b.n	80088fe <_printf_float+0xfa>
 8008996:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008998:	2b65      	cmp	r3, #101	@ 0x65
 800899a:	d9d7      	bls.n	800894c <_printf_float+0x148>
 800899c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800899e:	2b66      	cmp	r3, #102	@ 0x66
 80089a0:	d11a      	bne.n	80089d8 <_printf_float+0x1d4>
 80089a2:	686b      	ldr	r3, [r5, #4]
 80089a4:	2a00      	cmp	r2, #0
 80089a6:	dd09      	ble.n	80089bc <_printf_float+0x1b8>
 80089a8:	612a      	str	r2, [r5, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d102      	bne.n	80089b4 <_printf_float+0x1b0>
 80089ae:	6829      	ldr	r1, [r5, #0]
 80089b0:	07c9      	lsls	r1, r1, #31
 80089b2:	d50b      	bpl.n	80089cc <_printf_float+0x1c8>
 80089b4:	3301      	adds	r3, #1
 80089b6:	189b      	adds	r3, r3, r2
 80089b8:	612b      	str	r3, [r5, #16]
 80089ba:	e007      	b.n	80089cc <_printf_float+0x1c8>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d103      	bne.n	80089c8 <_printf_float+0x1c4>
 80089c0:	2201      	movs	r2, #1
 80089c2:	6829      	ldr	r1, [r5, #0]
 80089c4:	4211      	tst	r1, r2
 80089c6:	d000      	beq.n	80089ca <_printf_float+0x1c6>
 80089c8:	1c9a      	adds	r2, r3, #2
 80089ca:	612a      	str	r2, [r5, #16]
 80089cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089ce:	2400      	movs	r4, #0
 80089d0:	65ab      	str	r3, [r5, #88]	@ 0x58
 80089d2:	e7ce      	b.n	8008972 <_printf_float+0x16e>
 80089d4:	2367      	movs	r3, #103	@ 0x67
 80089d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80089d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80089da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089dc:	4299      	cmp	r1, r3
 80089de:	db06      	blt.n	80089ee <_printf_float+0x1ea>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	6129      	str	r1, [r5, #16]
 80089e4:	07db      	lsls	r3, r3, #31
 80089e6:	d5f1      	bpl.n	80089cc <_printf_float+0x1c8>
 80089e8:	3101      	adds	r1, #1
 80089ea:	6129      	str	r1, [r5, #16]
 80089ec:	e7ee      	b.n	80089cc <_printf_float+0x1c8>
 80089ee:	2201      	movs	r2, #1
 80089f0:	2900      	cmp	r1, #0
 80089f2:	dce0      	bgt.n	80089b6 <_printf_float+0x1b2>
 80089f4:	1892      	adds	r2, r2, r2
 80089f6:	1a52      	subs	r2, r2, r1
 80089f8:	e7dd      	b.n	80089b6 <_printf_float+0x1b2>
 80089fa:	682a      	ldr	r2, [r5, #0]
 80089fc:	0553      	lsls	r3, r2, #21
 80089fe:	d408      	bmi.n	8008a12 <_printf_float+0x20e>
 8008a00:	692b      	ldr	r3, [r5, #16]
 8008a02:	003a      	movs	r2, r7
 8008a04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a08:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008a0a:	47a0      	blx	r4
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d129      	bne.n	8008a64 <_printf_float+0x260>
 8008a10:	e754      	b.n	80088bc <_printf_float+0xb8>
 8008a12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a14:	2b65      	cmp	r3, #101	@ 0x65
 8008a16:	d800      	bhi.n	8008a1a <_printf_float+0x216>
 8008a18:	e0db      	b.n	8008bd2 <_printf_float+0x3ce>
 8008a1a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008a1c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2300      	movs	r3, #0
 8008a22:	f7f7 fd11 	bl	8000448 <__aeabi_dcmpeq>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d033      	beq.n	8008a92 <_printf_float+0x28e>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4a37      	ldr	r2, [pc, #220]	@ (8008b0c <_printf_float+0x308>)
 8008a2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a32:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008a34:	47a0      	blx	r4
 8008a36:	3001      	adds	r0, #1
 8008a38:	d100      	bne.n	8008a3c <_printf_float+0x238>
 8008a3a:	e73f      	b.n	80088bc <_printf_float+0xb8>
 8008a3c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008a3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a40:	42b3      	cmp	r3, r6
 8008a42:	db02      	blt.n	8008a4a <_printf_float+0x246>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	07db      	lsls	r3, r3, #31
 8008a48:	d50c      	bpl.n	8008a64 <_printf_float+0x260>
 8008a4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a54:	47a0      	blx	r4
 8008a56:	2400      	movs	r4, #0
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d100      	bne.n	8008a5e <_printf_float+0x25a>
 8008a5c:	e72e      	b.n	80088bc <_printf_float+0xb8>
 8008a5e:	1e73      	subs	r3, r6, #1
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	dc0a      	bgt.n	8008a7a <_printf_float+0x276>
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	079b      	lsls	r3, r3, #30
 8008a68:	d500      	bpl.n	8008a6c <_printf_float+0x268>
 8008a6a:	e106      	b.n	8008c7a <_printf_float+0x476>
 8008a6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008a6e:	68e8      	ldr	r0, [r5, #12]
 8008a70:	4298      	cmp	r0, r3
 8008a72:	db00      	blt.n	8008a76 <_printf_float+0x272>
 8008a74:	e724      	b.n	80088c0 <_printf_float+0xbc>
 8008a76:	0018      	movs	r0, r3
 8008a78:	e722      	b.n	80088c0 <_printf_float+0xbc>
 8008a7a:	002a      	movs	r2, r5
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a82:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008a84:	321a      	adds	r2, #26
 8008a86:	47b8      	blx	r7
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d100      	bne.n	8008a8e <_printf_float+0x28a>
 8008a8c:	e716      	b.n	80088bc <_printf_float+0xb8>
 8008a8e:	3401      	adds	r4, #1
 8008a90:	e7e5      	b.n	8008a5e <_printf_float+0x25a>
 8008a92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc3b      	bgt.n	8008b10 <_printf_float+0x30c>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8008b0c <_printf_float+0x308>)
 8008a9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008aa0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008aa2:	47a0      	blx	r4
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d100      	bne.n	8008aaa <_printf_float+0x2a6>
 8008aa8:	e708      	b.n	80088bc <_printf_float+0xb8>
 8008aaa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008aac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008aae:	4333      	orrs	r3, r6
 8008ab0:	d102      	bne.n	8008ab8 <_printf_float+0x2b4>
 8008ab2:	682b      	ldr	r3, [r5, #0]
 8008ab4:	07db      	lsls	r3, r3, #31
 8008ab6:	d5d5      	bpl.n	8008a64 <_printf_float+0x260>
 8008ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008abc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ac0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008ac2:	47a0      	blx	r4
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d100      	bne.n	8008acc <_printf_float+0x2c8>
 8008aca:	e6f7      	b.n	80088bc <_printf_float+0xb8>
 8008acc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ace:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ad0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008ad2:	425b      	negs	r3, r3
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	dc01      	bgt.n	8008adc <_printf_float+0x2d8>
 8008ad8:	0033      	movs	r3, r6
 8008ada:	e792      	b.n	8008a02 <_printf_float+0x1fe>
 8008adc:	002a      	movs	r2, r5
 8008ade:	2301      	movs	r3, #1
 8008ae0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ae4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008ae6:	321a      	adds	r2, #26
 8008ae8:	47a0      	blx	r4
 8008aea:	3001      	adds	r0, #1
 8008aec:	d100      	bne.n	8008af0 <_printf_float+0x2ec>
 8008aee:	e6e5      	b.n	80088bc <_printf_float+0xb8>
 8008af0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008af2:	3301      	adds	r3, #1
 8008af4:	e7ea      	b.n	8008acc <_printf_float+0x2c8>
 8008af6:	46c0      	nop			@ (mov r8, r8)
 8008af8:	7fefffff 	.word	0x7fefffff
 8008afc:	0800ce94 	.word	0x0800ce94
 8008b00:	0800ce90 	.word	0x0800ce90
 8008b04:	0800ce9c 	.word	0x0800ce9c
 8008b08:	0800ce98 	.word	0x0800ce98
 8008b0c:	0800cea0 	.word	0x0800cea0
 8008b10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b12:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008b14:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b16:	429e      	cmp	r6, r3
 8008b18:	dd00      	ble.n	8008b1c <_printf_float+0x318>
 8008b1a:	001e      	movs	r6, r3
 8008b1c:	2e00      	cmp	r6, #0
 8008b1e:	dc31      	bgt.n	8008b84 <_printf_float+0x380>
 8008b20:	43f3      	mvns	r3, r6
 8008b22:	2400      	movs	r4, #0
 8008b24:	17db      	asrs	r3, r3, #31
 8008b26:	4033      	ands	r3, r6
 8008b28:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b2a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008b2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b2e:	1af3      	subs	r3, r6, r3
 8008b30:	42a3      	cmp	r3, r4
 8008b32:	dc30      	bgt.n	8008b96 <_printf_float+0x392>
 8008b34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	dc38      	bgt.n	8008bae <_printf_float+0x3aa>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	07db      	lsls	r3, r3, #31
 8008b40:	d435      	bmi.n	8008bae <_printf_float+0x3aa>
 8008b42:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008b44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b48:	1b9b      	subs	r3, r3, r6
 8008b4a:	1b14      	subs	r4, r2, r4
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	dd00      	ble.n	8008b52 <_printf_float+0x34e>
 8008b50:	001c      	movs	r4, r3
 8008b52:	2c00      	cmp	r4, #0
 8008b54:	dc34      	bgt.n	8008bc0 <_printf_float+0x3bc>
 8008b56:	43e3      	mvns	r3, r4
 8008b58:	2600      	movs	r6, #0
 8008b5a:	17db      	asrs	r3, r3, #31
 8008b5c:	401c      	ands	r4, r3
 8008b5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	1b1b      	subs	r3, r3, r4
 8008b66:	42b3      	cmp	r3, r6
 8008b68:	dc00      	bgt.n	8008b6c <_printf_float+0x368>
 8008b6a:	e77b      	b.n	8008a64 <_printf_float+0x260>
 8008b6c:	002a      	movs	r2, r5
 8008b6e:	2301      	movs	r3, #1
 8008b70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b74:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008b76:	321a      	adds	r2, #26
 8008b78:	47b8      	blx	r7
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d100      	bne.n	8008b80 <_printf_float+0x37c>
 8008b7e:	e69d      	b.n	80088bc <_printf_float+0xb8>
 8008b80:	3601      	adds	r6, #1
 8008b82:	e7ec      	b.n	8008b5e <_printf_float+0x35a>
 8008b84:	0033      	movs	r3, r6
 8008b86:	003a      	movs	r2, r7
 8008b88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b8c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008b8e:	47a0      	blx	r4
 8008b90:	3001      	adds	r0, #1
 8008b92:	d1c5      	bne.n	8008b20 <_printf_float+0x31c>
 8008b94:	e692      	b.n	80088bc <_printf_float+0xb8>
 8008b96:	002a      	movs	r2, r5
 8008b98:	2301      	movs	r3, #1
 8008b9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b9e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008ba0:	321a      	adds	r2, #26
 8008ba2:	47b0      	blx	r6
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d100      	bne.n	8008baa <_printf_float+0x3a6>
 8008ba8:	e688      	b.n	80088bc <_printf_float+0xb8>
 8008baa:	3401      	adds	r4, #1
 8008bac:	e7bd      	b.n	8008b2a <_printf_float+0x326>
 8008bae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008bb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bb6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008bb8:	47a0      	blx	r4
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d1c1      	bne.n	8008b42 <_printf_float+0x33e>
 8008bbe:	e67d      	b.n	80088bc <_printf_float+0xb8>
 8008bc0:	19ba      	adds	r2, r7, r6
 8008bc2:	0023      	movs	r3, r4
 8008bc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bc8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008bca:	47b0      	blx	r6
 8008bcc:	3001      	adds	r0, #1
 8008bce:	d1c2      	bne.n	8008b56 <_printf_float+0x352>
 8008bd0:	e674      	b.n	80088bc <_printf_float+0xb8>
 8008bd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008bd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	dc02      	bgt.n	8008be0 <_printf_float+0x3dc>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	421a      	tst	r2, r3
 8008bde:	d039      	beq.n	8008c54 <_printf_float+0x450>
 8008be0:	2301      	movs	r3, #1
 8008be2:	003a      	movs	r2, r7
 8008be4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008be8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008bea:	47b0      	blx	r6
 8008bec:	3001      	adds	r0, #1
 8008bee:	d100      	bne.n	8008bf2 <_printf_float+0x3ee>
 8008bf0:	e664      	b.n	80088bc <_printf_float+0xb8>
 8008bf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008bf6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bf8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bfa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008bfc:	47b0      	blx	r6
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d100      	bne.n	8008c04 <_printf_float+0x400>
 8008c02:	e65b      	b.n	80088bc <_printf_float+0xb8>
 8008c04:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008c06:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008c08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c10:	2300      	movs	r3, #0
 8008c12:	f7f7 fc19 	bl	8000448 <__aeabi_dcmpeq>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d11a      	bne.n	8008c50 <_printf_float+0x44c>
 8008c1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c1c:	1c7a      	adds	r2, r7, #1
 8008c1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c22:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008c24:	47b0      	blx	r6
 8008c26:	3001      	adds	r0, #1
 8008c28:	d10e      	bne.n	8008c48 <_printf_float+0x444>
 8008c2a:	e647      	b.n	80088bc <_printf_float+0xb8>
 8008c2c:	002a      	movs	r2, r5
 8008c2e:	2301      	movs	r3, #1
 8008c30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c34:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008c36:	321a      	adds	r2, #26
 8008c38:	47b8      	blx	r7
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d100      	bne.n	8008c40 <_printf_float+0x43c>
 8008c3e:	e63d      	b.n	80088bc <_printf_float+0xb8>
 8008c40:	3601      	adds	r6, #1
 8008c42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c44:	429e      	cmp	r6, r3
 8008c46:	dbf1      	blt.n	8008c2c <_printf_float+0x428>
 8008c48:	002a      	movs	r2, r5
 8008c4a:	0023      	movs	r3, r4
 8008c4c:	3250      	adds	r2, #80	@ 0x50
 8008c4e:	e6d9      	b.n	8008a04 <_printf_float+0x200>
 8008c50:	2600      	movs	r6, #0
 8008c52:	e7f6      	b.n	8008c42 <_printf_float+0x43e>
 8008c54:	003a      	movs	r2, r7
 8008c56:	e7e2      	b.n	8008c1e <_printf_float+0x41a>
 8008c58:	002a      	movs	r2, r5
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c60:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008c62:	3219      	adds	r2, #25
 8008c64:	47b0      	blx	r6
 8008c66:	3001      	adds	r0, #1
 8008c68:	d100      	bne.n	8008c6c <_printf_float+0x468>
 8008c6a:	e627      	b.n	80088bc <_printf_float+0xb8>
 8008c6c:	3401      	adds	r4, #1
 8008c6e:	68eb      	ldr	r3, [r5, #12]
 8008c70:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	42a3      	cmp	r3, r4
 8008c76:	dcef      	bgt.n	8008c58 <_printf_float+0x454>
 8008c78:	e6f8      	b.n	8008a6c <_printf_float+0x268>
 8008c7a:	2400      	movs	r4, #0
 8008c7c:	e7f7      	b.n	8008c6e <_printf_float+0x46a>
 8008c7e:	46c0      	nop			@ (mov r8, r8)

08008c80 <_printf_common>:
 8008c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c82:	0016      	movs	r6, r2
 8008c84:	9301      	str	r3, [sp, #4]
 8008c86:	688a      	ldr	r2, [r1, #8]
 8008c88:	690b      	ldr	r3, [r1, #16]
 8008c8a:	000c      	movs	r4, r1
 8008c8c:	9000      	str	r0, [sp, #0]
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	da00      	bge.n	8008c94 <_printf_common+0x14>
 8008c92:	0013      	movs	r3, r2
 8008c94:	0022      	movs	r2, r4
 8008c96:	6033      	str	r3, [r6, #0]
 8008c98:	3243      	adds	r2, #67	@ 0x43
 8008c9a:	7812      	ldrb	r2, [r2, #0]
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	d001      	beq.n	8008ca4 <_printf_common+0x24>
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	6033      	str	r3, [r6, #0]
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	069b      	lsls	r3, r3, #26
 8008ca8:	d502      	bpl.n	8008cb0 <_printf_common+0x30>
 8008caa:	6833      	ldr	r3, [r6, #0]
 8008cac:	3302      	adds	r3, #2
 8008cae:	6033      	str	r3, [r6, #0]
 8008cb0:	6822      	ldr	r2, [r4, #0]
 8008cb2:	2306      	movs	r3, #6
 8008cb4:	0015      	movs	r5, r2
 8008cb6:	401d      	ands	r5, r3
 8008cb8:	421a      	tst	r2, r3
 8008cba:	d027      	beq.n	8008d0c <_printf_common+0x8c>
 8008cbc:	0023      	movs	r3, r4
 8008cbe:	3343      	adds	r3, #67	@ 0x43
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	1e5a      	subs	r2, r3, #1
 8008cc4:	4193      	sbcs	r3, r2
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	0692      	lsls	r2, r2, #26
 8008cca:	d430      	bmi.n	8008d2e <_printf_common+0xae>
 8008ccc:	0022      	movs	r2, r4
 8008cce:	9901      	ldr	r1, [sp, #4]
 8008cd0:	9800      	ldr	r0, [sp, #0]
 8008cd2:	9d08      	ldr	r5, [sp, #32]
 8008cd4:	3243      	adds	r2, #67	@ 0x43
 8008cd6:	47a8      	blx	r5
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d025      	beq.n	8008d28 <_printf_common+0xa8>
 8008cdc:	2206      	movs	r2, #6
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	2500      	movs	r5, #0
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	2b04      	cmp	r3, #4
 8008ce6:	d105      	bne.n	8008cf4 <_printf_common+0x74>
 8008ce8:	6833      	ldr	r3, [r6, #0]
 8008cea:	68e5      	ldr	r5, [r4, #12]
 8008cec:	1aed      	subs	r5, r5, r3
 8008cee:	43eb      	mvns	r3, r5
 8008cf0:	17db      	asrs	r3, r3, #31
 8008cf2:	401d      	ands	r5, r3
 8008cf4:	68a3      	ldr	r3, [r4, #8]
 8008cf6:	6922      	ldr	r2, [r4, #16]
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	dd01      	ble.n	8008d00 <_printf_common+0x80>
 8008cfc:	1a9b      	subs	r3, r3, r2
 8008cfe:	18ed      	adds	r5, r5, r3
 8008d00:	2600      	movs	r6, #0
 8008d02:	42b5      	cmp	r5, r6
 8008d04:	d120      	bne.n	8008d48 <_printf_common+0xc8>
 8008d06:	2000      	movs	r0, #0
 8008d08:	e010      	b.n	8008d2c <_printf_common+0xac>
 8008d0a:	3501      	adds	r5, #1
 8008d0c:	68e3      	ldr	r3, [r4, #12]
 8008d0e:	6832      	ldr	r2, [r6, #0]
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	42ab      	cmp	r3, r5
 8008d14:	ddd2      	ble.n	8008cbc <_printf_common+0x3c>
 8008d16:	0022      	movs	r2, r4
 8008d18:	2301      	movs	r3, #1
 8008d1a:	9901      	ldr	r1, [sp, #4]
 8008d1c:	9800      	ldr	r0, [sp, #0]
 8008d1e:	9f08      	ldr	r7, [sp, #32]
 8008d20:	3219      	adds	r2, #25
 8008d22:	47b8      	blx	r7
 8008d24:	3001      	adds	r0, #1
 8008d26:	d1f0      	bne.n	8008d0a <_printf_common+0x8a>
 8008d28:	2001      	movs	r0, #1
 8008d2a:	4240      	negs	r0, r0
 8008d2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d2e:	2030      	movs	r0, #48	@ 0x30
 8008d30:	18e1      	adds	r1, r4, r3
 8008d32:	3143      	adds	r1, #67	@ 0x43
 8008d34:	7008      	strb	r0, [r1, #0]
 8008d36:	0021      	movs	r1, r4
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	3145      	adds	r1, #69	@ 0x45
 8008d3c:	7809      	ldrb	r1, [r1, #0]
 8008d3e:	18a2      	adds	r2, r4, r2
 8008d40:	3243      	adds	r2, #67	@ 0x43
 8008d42:	3302      	adds	r3, #2
 8008d44:	7011      	strb	r1, [r2, #0]
 8008d46:	e7c1      	b.n	8008ccc <_printf_common+0x4c>
 8008d48:	0022      	movs	r2, r4
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	9901      	ldr	r1, [sp, #4]
 8008d4e:	9800      	ldr	r0, [sp, #0]
 8008d50:	9f08      	ldr	r7, [sp, #32]
 8008d52:	321a      	adds	r2, #26
 8008d54:	47b8      	blx	r7
 8008d56:	3001      	adds	r0, #1
 8008d58:	d0e6      	beq.n	8008d28 <_printf_common+0xa8>
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	e7d1      	b.n	8008d02 <_printf_common+0x82>
	...

08008d60 <_printf_i>:
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	b08b      	sub	sp, #44	@ 0x2c
 8008d64:	9206      	str	r2, [sp, #24]
 8008d66:	000a      	movs	r2, r1
 8008d68:	3243      	adds	r2, #67	@ 0x43
 8008d6a:	9307      	str	r3, [sp, #28]
 8008d6c:	9005      	str	r0, [sp, #20]
 8008d6e:	9203      	str	r2, [sp, #12]
 8008d70:	7e0a      	ldrb	r2, [r1, #24]
 8008d72:	000c      	movs	r4, r1
 8008d74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d76:	2a78      	cmp	r2, #120	@ 0x78
 8008d78:	d809      	bhi.n	8008d8e <_printf_i+0x2e>
 8008d7a:	2a62      	cmp	r2, #98	@ 0x62
 8008d7c:	d80b      	bhi.n	8008d96 <_printf_i+0x36>
 8008d7e:	2a00      	cmp	r2, #0
 8008d80:	d100      	bne.n	8008d84 <_printf_i+0x24>
 8008d82:	e0ba      	b.n	8008efa <_printf_i+0x19a>
 8008d84:	497a      	ldr	r1, [pc, #488]	@ (8008f70 <_printf_i+0x210>)
 8008d86:	9104      	str	r1, [sp, #16]
 8008d88:	2a58      	cmp	r2, #88	@ 0x58
 8008d8a:	d100      	bne.n	8008d8e <_printf_i+0x2e>
 8008d8c:	e08e      	b.n	8008eac <_printf_i+0x14c>
 8008d8e:	0025      	movs	r5, r4
 8008d90:	3542      	adds	r5, #66	@ 0x42
 8008d92:	702a      	strb	r2, [r5, #0]
 8008d94:	e022      	b.n	8008ddc <_printf_i+0x7c>
 8008d96:	0010      	movs	r0, r2
 8008d98:	3863      	subs	r0, #99	@ 0x63
 8008d9a:	2815      	cmp	r0, #21
 8008d9c:	d8f7      	bhi.n	8008d8e <_printf_i+0x2e>
 8008d9e:	f7f7 f9c3 	bl	8000128 <__gnu_thumb1_case_shi>
 8008da2:	0016      	.short	0x0016
 8008da4:	fff6001f 	.word	0xfff6001f
 8008da8:	fff6fff6 	.word	0xfff6fff6
 8008dac:	001ffff6 	.word	0x001ffff6
 8008db0:	fff6fff6 	.word	0xfff6fff6
 8008db4:	fff6fff6 	.word	0xfff6fff6
 8008db8:	0036009f 	.word	0x0036009f
 8008dbc:	fff6007e 	.word	0xfff6007e
 8008dc0:	00b0fff6 	.word	0x00b0fff6
 8008dc4:	0036fff6 	.word	0x0036fff6
 8008dc8:	fff6fff6 	.word	0xfff6fff6
 8008dcc:	0082      	.short	0x0082
 8008dce:	0025      	movs	r5, r4
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	3542      	adds	r5, #66	@ 0x42
 8008dd4:	1d11      	adds	r1, r2, #4
 8008dd6:	6019      	str	r1, [r3, #0]
 8008dd8:	6813      	ldr	r3, [r2, #0]
 8008dda:	702b      	strb	r3, [r5, #0]
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e09e      	b.n	8008f1e <_printf_i+0x1be>
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	6809      	ldr	r1, [r1, #0]
 8008de4:	1d02      	adds	r2, r0, #4
 8008de6:	060d      	lsls	r5, r1, #24
 8008de8:	d50b      	bpl.n	8008e02 <_printf_i+0xa2>
 8008dea:	6806      	ldr	r6, [r0, #0]
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	da03      	bge.n	8008dfa <_printf_i+0x9a>
 8008df2:	232d      	movs	r3, #45	@ 0x2d
 8008df4:	9a03      	ldr	r2, [sp, #12]
 8008df6:	4276      	negs	r6, r6
 8008df8:	7013      	strb	r3, [r2, #0]
 8008dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8008f70 <_printf_i+0x210>)
 8008dfc:	270a      	movs	r7, #10
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	e018      	b.n	8008e34 <_printf_i+0xd4>
 8008e02:	6806      	ldr	r6, [r0, #0]
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	0649      	lsls	r1, r1, #25
 8008e08:	d5f1      	bpl.n	8008dee <_printf_i+0x8e>
 8008e0a:	b236      	sxth	r6, r6
 8008e0c:	e7ef      	b.n	8008dee <_printf_i+0x8e>
 8008e0e:	6808      	ldr	r0, [r1, #0]
 8008e10:	6819      	ldr	r1, [r3, #0]
 8008e12:	c940      	ldmia	r1!, {r6}
 8008e14:	0605      	lsls	r5, r0, #24
 8008e16:	d402      	bmi.n	8008e1e <_printf_i+0xbe>
 8008e18:	0640      	lsls	r0, r0, #25
 8008e1a:	d500      	bpl.n	8008e1e <_printf_i+0xbe>
 8008e1c:	b2b6      	uxth	r6, r6
 8008e1e:	6019      	str	r1, [r3, #0]
 8008e20:	4b53      	ldr	r3, [pc, #332]	@ (8008f70 <_printf_i+0x210>)
 8008e22:	270a      	movs	r7, #10
 8008e24:	9304      	str	r3, [sp, #16]
 8008e26:	2a6f      	cmp	r2, #111	@ 0x6f
 8008e28:	d100      	bne.n	8008e2c <_printf_i+0xcc>
 8008e2a:	3f02      	subs	r7, #2
 8008e2c:	0023      	movs	r3, r4
 8008e2e:	2200      	movs	r2, #0
 8008e30:	3343      	adds	r3, #67	@ 0x43
 8008e32:	701a      	strb	r2, [r3, #0]
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	db06      	blt.n	8008e4a <_printf_i+0xea>
 8008e3c:	2104      	movs	r1, #4
 8008e3e:	6822      	ldr	r2, [r4, #0]
 8008e40:	9d03      	ldr	r5, [sp, #12]
 8008e42:	438a      	bics	r2, r1
 8008e44:	6022      	str	r2, [r4, #0]
 8008e46:	4333      	orrs	r3, r6
 8008e48:	d00c      	beq.n	8008e64 <_printf_i+0x104>
 8008e4a:	9d03      	ldr	r5, [sp, #12]
 8008e4c:	0030      	movs	r0, r6
 8008e4e:	0039      	movs	r1, r7
 8008e50:	f7f7 f9fa 	bl	8000248 <__aeabi_uidivmod>
 8008e54:	9b04      	ldr	r3, [sp, #16]
 8008e56:	3d01      	subs	r5, #1
 8008e58:	5c5b      	ldrb	r3, [r3, r1]
 8008e5a:	702b      	strb	r3, [r5, #0]
 8008e5c:	0033      	movs	r3, r6
 8008e5e:	0006      	movs	r6, r0
 8008e60:	429f      	cmp	r7, r3
 8008e62:	d9f3      	bls.n	8008e4c <_printf_i+0xec>
 8008e64:	2f08      	cmp	r7, #8
 8008e66:	d109      	bne.n	8008e7c <_printf_i+0x11c>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	07db      	lsls	r3, r3, #31
 8008e6c:	d506      	bpl.n	8008e7c <_printf_i+0x11c>
 8008e6e:	6862      	ldr	r2, [r4, #4]
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	dc02      	bgt.n	8008e7c <_printf_i+0x11c>
 8008e76:	2330      	movs	r3, #48	@ 0x30
 8008e78:	3d01      	subs	r5, #1
 8008e7a:	702b      	strb	r3, [r5, #0]
 8008e7c:	9b03      	ldr	r3, [sp, #12]
 8008e7e:	1b5b      	subs	r3, r3, r5
 8008e80:	6123      	str	r3, [r4, #16]
 8008e82:	9b07      	ldr	r3, [sp, #28]
 8008e84:	0021      	movs	r1, r4
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	9805      	ldr	r0, [sp, #20]
 8008e8a:	9b06      	ldr	r3, [sp, #24]
 8008e8c:	aa09      	add	r2, sp, #36	@ 0x24
 8008e8e:	f7ff fef7 	bl	8008c80 <_printf_common>
 8008e92:	3001      	adds	r0, #1
 8008e94:	d148      	bne.n	8008f28 <_printf_i+0x1c8>
 8008e96:	2001      	movs	r0, #1
 8008e98:	4240      	negs	r0, r0
 8008e9a:	b00b      	add	sp, #44	@ 0x2c
 8008e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	6809      	ldr	r1, [r1, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	6022      	str	r2, [r4, #0]
 8008ea6:	2278      	movs	r2, #120	@ 0x78
 8008ea8:	4932      	ldr	r1, [pc, #200]	@ (8008f74 <_printf_i+0x214>)
 8008eaa:	9104      	str	r1, [sp, #16]
 8008eac:	0021      	movs	r1, r4
 8008eae:	3145      	adds	r1, #69	@ 0x45
 8008eb0:	700a      	strb	r2, [r1, #0]
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	6822      	ldr	r2, [r4, #0]
 8008eb6:	c940      	ldmia	r1!, {r6}
 8008eb8:	0610      	lsls	r0, r2, #24
 8008eba:	d402      	bmi.n	8008ec2 <_printf_i+0x162>
 8008ebc:	0650      	lsls	r0, r2, #25
 8008ebe:	d500      	bpl.n	8008ec2 <_printf_i+0x162>
 8008ec0:	b2b6      	uxth	r6, r6
 8008ec2:	6019      	str	r1, [r3, #0]
 8008ec4:	07d3      	lsls	r3, r2, #31
 8008ec6:	d502      	bpl.n	8008ece <_printf_i+0x16e>
 8008ec8:	2320      	movs	r3, #32
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	2e00      	cmp	r6, #0
 8008ed0:	d001      	beq.n	8008ed6 <_printf_i+0x176>
 8008ed2:	2710      	movs	r7, #16
 8008ed4:	e7aa      	b.n	8008e2c <_printf_i+0xcc>
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	4393      	bics	r3, r2
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	e7f8      	b.n	8008ed2 <_printf_i+0x172>
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	680d      	ldr	r5, [r1, #0]
 8008ee4:	1d10      	adds	r0, r2, #4
 8008ee6:	6949      	ldr	r1, [r1, #20]
 8008ee8:	6018      	str	r0, [r3, #0]
 8008eea:	6813      	ldr	r3, [r2, #0]
 8008eec:	062e      	lsls	r6, r5, #24
 8008eee:	d501      	bpl.n	8008ef4 <_printf_i+0x194>
 8008ef0:	6019      	str	r1, [r3, #0]
 8008ef2:	e002      	b.n	8008efa <_printf_i+0x19a>
 8008ef4:	066d      	lsls	r5, r5, #25
 8008ef6:	d5fb      	bpl.n	8008ef0 <_printf_i+0x190>
 8008ef8:	8019      	strh	r1, [r3, #0]
 8008efa:	2300      	movs	r3, #0
 8008efc:	9d03      	ldr	r5, [sp, #12]
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	e7bf      	b.n	8008e82 <_printf_i+0x122>
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	1d11      	adds	r1, r2, #4
 8008f06:	6019      	str	r1, [r3, #0]
 8008f08:	6815      	ldr	r5, [r2, #0]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	0028      	movs	r0, r5
 8008f0e:	6862      	ldr	r2, [r4, #4]
 8008f10:	f000 f9eb 	bl	80092ea <memchr>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d001      	beq.n	8008f1c <_printf_i+0x1bc>
 8008f18:	1b40      	subs	r0, r0, r5
 8008f1a:	6060      	str	r0, [r4, #4]
 8008f1c:	6863      	ldr	r3, [r4, #4]
 8008f1e:	6123      	str	r3, [r4, #16]
 8008f20:	2300      	movs	r3, #0
 8008f22:	9a03      	ldr	r2, [sp, #12]
 8008f24:	7013      	strb	r3, [r2, #0]
 8008f26:	e7ac      	b.n	8008e82 <_printf_i+0x122>
 8008f28:	002a      	movs	r2, r5
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	9906      	ldr	r1, [sp, #24]
 8008f2e:	9805      	ldr	r0, [sp, #20]
 8008f30:	9d07      	ldr	r5, [sp, #28]
 8008f32:	47a8      	blx	r5
 8008f34:	3001      	adds	r0, #1
 8008f36:	d0ae      	beq.n	8008e96 <_printf_i+0x136>
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	079b      	lsls	r3, r3, #30
 8008f3c:	d415      	bmi.n	8008f6a <_printf_i+0x20a>
 8008f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f40:	68e0      	ldr	r0, [r4, #12]
 8008f42:	4298      	cmp	r0, r3
 8008f44:	daa9      	bge.n	8008e9a <_printf_i+0x13a>
 8008f46:	0018      	movs	r0, r3
 8008f48:	e7a7      	b.n	8008e9a <_printf_i+0x13a>
 8008f4a:	0022      	movs	r2, r4
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	9906      	ldr	r1, [sp, #24]
 8008f50:	9805      	ldr	r0, [sp, #20]
 8008f52:	9e07      	ldr	r6, [sp, #28]
 8008f54:	3219      	adds	r2, #25
 8008f56:	47b0      	blx	r6
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d09c      	beq.n	8008e96 <_printf_i+0x136>
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	42ab      	cmp	r3, r5
 8008f66:	dcf0      	bgt.n	8008f4a <_printf_i+0x1ea>
 8008f68:	e7e9      	b.n	8008f3e <_printf_i+0x1de>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	e7f7      	b.n	8008f5e <_printf_i+0x1fe>
 8008f6e:	46c0      	nop			@ (mov r8, r8)
 8008f70:	0800cea2 	.word	0x0800cea2
 8008f74:	0800ceb3 	.word	0x0800ceb3

08008f78 <std>:
 8008f78:	2300      	movs	r3, #0
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	0004      	movs	r4, r0
 8008f7e:	6003      	str	r3, [r0, #0]
 8008f80:	6043      	str	r3, [r0, #4]
 8008f82:	6083      	str	r3, [r0, #8]
 8008f84:	8181      	strh	r1, [r0, #12]
 8008f86:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f88:	81c2      	strh	r2, [r0, #14]
 8008f8a:	6103      	str	r3, [r0, #16]
 8008f8c:	6143      	str	r3, [r0, #20]
 8008f8e:	6183      	str	r3, [r0, #24]
 8008f90:	0019      	movs	r1, r3
 8008f92:	2208      	movs	r2, #8
 8008f94:	305c      	adds	r0, #92	@ 0x5c
 8008f96:	f000 f921 	bl	80091dc <memset>
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc8 <std+0x50>)
 8008f9c:	6224      	str	r4, [r4, #32]
 8008f9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8008fcc <std+0x54>)
 8008fa2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd0 <std+0x58>)
 8008fa6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd4 <std+0x5c>)
 8008faa:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fac:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <std+0x60>)
 8008fae:	429c      	cmp	r4, r3
 8008fb0:	d005      	beq.n	8008fbe <std+0x46>
 8008fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fdc <std+0x64>)
 8008fb4:	429c      	cmp	r4, r3
 8008fb6:	d002      	beq.n	8008fbe <std+0x46>
 8008fb8:	4b09      	ldr	r3, [pc, #36]	@ (8008fe0 <std+0x68>)
 8008fba:	429c      	cmp	r4, r3
 8008fbc:	d103      	bne.n	8008fc6 <std+0x4e>
 8008fbe:	0020      	movs	r0, r4
 8008fc0:	3058      	adds	r0, #88	@ 0x58
 8008fc2:	f000 f98f 	bl	80092e4 <__retarget_lock_init_recursive>
 8008fc6:	bd10      	pop	{r4, pc}
 8008fc8:	08009145 	.word	0x08009145
 8008fcc:	0800916d 	.word	0x0800916d
 8008fd0:	080091a5 	.word	0x080091a5
 8008fd4:	080091d1 	.word	0x080091d1
 8008fd8:	20000c60 	.word	0x20000c60
 8008fdc:	20000cc8 	.word	0x20000cc8
 8008fe0:	20000d30 	.word	0x20000d30

08008fe4 <stdio_exit_handler>:
 8008fe4:	b510      	push	{r4, lr}
 8008fe6:	4a03      	ldr	r2, [pc, #12]	@ (8008ff4 <stdio_exit_handler+0x10>)
 8008fe8:	4903      	ldr	r1, [pc, #12]	@ (8008ff8 <stdio_exit_handler+0x14>)
 8008fea:	4804      	ldr	r0, [pc, #16]	@ (8008ffc <stdio_exit_handler+0x18>)
 8008fec:	f000 f86c 	bl	80090c8 <_fwalk_sglue>
 8008ff0:	bd10      	pop	{r4, pc}
 8008ff2:	46c0      	nop			@ (mov r8, r8)
 8008ff4:	20000010 	.word	0x20000010
 8008ff8:	0800acf9 	.word	0x0800acf9
 8008ffc:	20000020 	.word	0x20000020

08009000 <cleanup_stdio>:
 8009000:	6841      	ldr	r1, [r0, #4]
 8009002:	4b0b      	ldr	r3, [pc, #44]	@ (8009030 <cleanup_stdio+0x30>)
 8009004:	b510      	push	{r4, lr}
 8009006:	0004      	movs	r4, r0
 8009008:	4299      	cmp	r1, r3
 800900a:	d001      	beq.n	8009010 <cleanup_stdio+0x10>
 800900c:	f001 fe74 	bl	800acf8 <_fflush_r>
 8009010:	68a1      	ldr	r1, [r4, #8]
 8009012:	4b08      	ldr	r3, [pc, #32]	@ (8009034 <cleanup_stdio+0x34>)
 8009014:	4299      	cmp	r1, r3
 8009016:	d002      	beq.n	800901e <cleanup_stdio+0x1e>
 8009018:	0020      	movs	r0, r4
 800901a:	f001 fe6d 	bl	800acf8 <_fflush_r>
 800901e:	68e1      	ldr	r1, [r4, #12]
 8009020:	4b05      	ldr	r3, [pc, #20]	@ (8009038 <cleanup_stdio+0x38>)
 8009022:	4299      	cmp	r1, r3
 8009024:	d002      	beq.n	800902c <cleanup_stdio+0x2c>
 8009026:	0020      	movs	r0, r4
 8009028:	f001 fe66 	bl	800acf8 <_fflush_r>
 800902c:	bd10      	pop	{r4, pc}
 800902e:	46c0      	nop			@ (mov r8, r8)
 8009030:	20000c60 	.word	0x20000c60
 8009034:	20000cc8 	.word	0x20000cc8
 8009038:	20000d30 	.word	0x20000d30

0800903c <global_stdio_init.part.0>:
 800903c:	b510      	push	{r4, lr}
 800903e:	4b09      	ldr	r3, [pc, #36]	@ (8009064 <global_stdio_init.part.0+0x28>)
 8009040:	4a09      	ldr	r2, [pc, #36]	@ (8009068 <global_stdio_init.part.0+0x2c>)
 8009042:	2104      	movs	r1, #4
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	4809      	ldr	r0, [pc, #36]	@ (800906c <global_stdio_init.part.0+0x30>)
 8009048:	2200      	movs	r2, #0
 800904a:	f7ff ff95 	bl	8008f78 <std>
 800904e:	2201      	movs	r2, #1
 8009050:	2109      	movs	r1, #9
 8009052:	4807      	ldr	r0, [pc, #28]	@ (8009070 <global_stdio_init.part.0+0x34>)
 8009054:	f7ff ff90 	bl	8008f78 <std>
 8009058:	2202      	movs	r2, #2
 800905a:	2112      	movs	r1, #18
 800905c:	4805      	ldr	r0, [pc, #20]	@ (8009074 <global_stdio_init.part.0+0x38>)
 800905e:	f7ff ff8b 	bl	8008f78 <std>
 8009062:	bd10      	pop	{r4, pc}
 8009064:	20000d98 	.word	0x20000d98
 8009068:	08008fe5 	.word	0x08008fe5
 800906c:	20000c60 	.word	0x20000c60
 8009070:	20000cc8 	.word	0x20000cc8
 8009074:	20000d30 	.word	0x20000d30

08009078 <__sfp_lock_acquire>:
 8009078:	b510      	push	{r4, lr}
 800907a:	4802      	ldr	r0, [pc, #8]	@ (8009084 <__sfp_lock_acquire+0xc>)
 800907c:	f000 f933 	bl	80092e6 <__retarget_lock_acquire_recursive>
 8009080:	bd10      	pop	{r4, pc}
 8009082:	46c0      	nop			@ (mov r8, r8)
 8009084:	20000da1 	.word	0x20000da1

08009088 <__sfp_lock_release>:
 8009088:	b510      	push	{r4, lr}
 800908a:	4802      	ldr	r0, [pc, #8]	@ (8009094 <__sfp_lock_release+0xc>)
 800908c:	f000 f92c 	bl	80092e8 <__retarget_lock_release_recursive>
 8009090:	bd10      	pop	{r4, pc}
 8009092:	46c0      	nop			@ (mov r8, r8)
 8009094:	20000da1 	.word	0x20000da1

08009098 <__sinit>:
 8009098:	b510      	push	{r4, lr}
 800909a:	0004      	movs	r4, r0
 800909c:	f7ff ffec 	bl	8009078 <__sfp_lock_acquire>
 80090a0:	6a23      	ldr	r3, [r4, #32]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <__sinit+0x14>
 80090a6:	f7ff ffef 	bl	8009088 <__sfp_lock_release>
 80090aa:	bd10      	pop	{r4, pc}
 80090ac:	4b04      	ldr	r3, [pc, #16]	@ (80090c0 <__sinit+0x28>)
 80090ae:	6223      	str	r3, [r4, #32]
 80090b0:	4b04      	ldr	r3, [pc, #16]	@ (80090c4 <__sinit+0x2c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1f6      	bne.n	80090a6 <__sinit+0xe>
 80090b8:	f7ff ffc0 	bl	800903c <global_stdio_init.part.0>
 80090bc:	e7f3      	b.n	80090a6 <__sinit+0xe>
 80090be:	46c0      	nop			@ (mov r8, r8)
 80090c0:	08009001 	.word	0x08009001
 80090c4:	20000d98 	.word	0x20000d98

080090c8 <_fwalk_sglue>:
 80090c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ca:	0014      	movs	r4, r2
 80090cc:	2600      	movs	r6, #0
 80090ce:	9000      	str	r0, [sp, #0]
 80090d0:	9101      	str	r1, [sp, #4]
 80090d2:	68a5      	ldr	r5, [r4, #8]
 80090d4:	6867      	ldr	r7, [r4, #4]
 80090d6:	3f01      	subs	r7, #1
 80090d8:	d504      	bpl.n	80090e4 <_fwalk_sglue+0x1c>
 80090da:	6824      	ldr	r4, [r4, #0]
 80090dc:	2c00      	cmp	r4, #0
 80090de:	d1f8      	bne.n	80090d2 <_fwalk_sglue+0xa>
 80090e0:	0030      	movs	r0, r6
 80090e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090e4:	89ab      	ldrh	r3, [r5, #12]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d908      	bls.n	80090fc <_fwalk_sglue+0x34>
 80090ea:	220e      	movs	r2, #14
 80090ec:	5eab      	ldrsh	r3, [r5, r2]
 80090ee:	3301      	adds	r3, #1
 80090f0:	d004      	beq.n	80090fc <_fwalk_sglue+0x34>
 80090f2:	0029      	movs	r1, r5
 80090f4:	9800      	ldr	r0, [sp, #0]
 80090f6:	9b01      	ldr	r3, [sp, #4]
 80090f8:	4798      	blx	r3
 80090fa:	4306      	orrs	r6, r0
 80090fc:	3568      	adds	r5, #104	@ 0x68
 80090fe:	e7ea      	b.n	80090d6 <_fwalk_sglue+0xe>

08009100 <siprintf>:
 8009100:	b40e      	push	{r1, r2, r3}
 8009102:	b510      	push	{r4, lr}
 8009104:	2400      	movs	r4, #0
 8009106:	490c      	ldr	r1, [pc, #48]	@ (8009138 <siprintf+0x38>)
 8009108:	b09d      	sub	sp, #116	@ 0x74
 800910a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800910c:	9002      	str	r0, [sp, #8]
 800910e:	9006      	str	r0, [sp, #24]
 8009110:	9107      	str	r1, [sp, #28]
 8009112:	9104      	str	r1, [sp, #16]
 8009114:	4809      	ldr	r0, [pc, #36]	@ (800913c <siprintf+0x3c>)
 8009116:	490a      	ldr	r1, [pc, #40]	@ (8009140 <siprintf+0x40>)
 8009118:	cb04      	ldmia	r3!, {r2}
 800911a:	9105      	str	r1, [sp, #20]
 800911c:	6800      	ldr	r0, [r0, #0]
 800911e:	a902      	add	r1, sp, #8
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009124:	f001 fc64 	bl	800a9f0 <_svfiprintf_r>
 8009128:	9b02      	ldr	r3, [sp, #8]
 800912a:	701c      	strb	r4, [r3, #0]
 800912c:	b01d      	add	sp, #116	@ 0x74
 800912e:	bc10      	pop	{r4}
 8009130:	bc08      	pop	{r3}
 8009132:	b003      	add	sp, #12
 8009134:	4718      	bx	r3
 8009136:	46c0      	nop			@ (mov r8, r8)
 8009138:	7fffffff 	.word	0x7fffffff
 800913c:	2000001c 	.word	0x2000001c
 8009140:	ffff0208 	.word	0xffff0208

08009144 <__sread>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	000c      	movs	r4, r1
 8009148:	250e      	movs	r5, #14
 800914a:	5f49      	ldrsh	r1, [r1, r5]
 800914c:	f000 f878 	bl	8009240 <_read_r>
 8009150:	2800      	cmp	r0, #0
 8009152:	db03      	blt.n	800915c <__sread+0x18>
 8009154:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009156:	181b      	adds	r3, r3, r0
 8009158:	6563      	str	r3, [r4, #84]	@ 0x54
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	4a02      	ldr	r2, [pc, #8]	@ (8009168 <__sread+0x24>)
 8009160:	4013      	ands	r3, r2
 8009162:	81a3      	strh	r3, [r4, #12]
 8009164:	e7f9      	b.n	800915a <__sread+0x16>
 8009166:	46c0      	nop			@ (mov r8, r8)
 8009168:	ffffefff 	.word	0xffffefff

0800916c <__swrite>:
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916e:	001f      	movs	r7, r3
 8009170:	898b      	ldrh	r3, [r1, #12]
 8009172:	0005      	movs	r5, r0
 8009174:	000c      	movs	r4, r1
 8009176:	0016      	movs	r6, r2
 8009178:	05db      	lsls	r3, r3, #23
 800917a:	d505      	bpl.n	8009188 <__swrite+0x1c>
 800917c:	230e      	movs	r3, #14
 800917e:	5ec9      	ldrsh	r1, [r1, r3]
 8009180:	2200      	movs	r2, #0
 8009182:	2302      	movs	r3, #2
 8009184:	f000 f848 	bl	8009218 <_lseek_r>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	4a05      	ldr	r2, [pc, #20]	@ (80091a0 <__swrite+0x34>)
 800918c:	0028      	movs	r0, r5
 800918e:	4013      	ands	r3, r2
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	0032      	movs	r2, r6
 8009194:	230e      	movs	r3, #14
 8009196:	5ee1      	ldrsh	r1, [r4, r3]
 8009198:	003b      	movs	r3, r7
 800919a:	f000 f865 	bl	8009268 <_write_r>
 800919e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a0:	ffffefff 	.word	0xffffefff

080091a4 <__sseek>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	000c      	movs	r4, r1
 80091a8:	250e      	movs	r5, #14
 80091aa:	5f49      	ldrsh	r1, [r1, r5]
 80091ac:	f000 f834 	bl	8009218 <_lseek_r>
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	1c42      	adds	r2, r0, #1
 80091b4:	d103      	bne.n	80091be <__sseek+0x1a>
 80091b6:	4a05      	ldr	r2, [pc, #20]	@ (80091cc <__sseek+0x28>)
 80091b8:	4013      	ands	r3, r2
 80091ba:	81a3      	strh	r3, [r4, #12]
 80091bc:	bd70      	pop	{r4, r5, r6, pc}
 80091be:	2280      	movs	r2, #128	@ 0x80
 80091c0:	0152      	lsls	r2, r2, #5
 80091c2:	4313      	orrs	r3, r2
 80091c4:	81a3      	strh	r3, [r4, #12]
 80091c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80091c8:	e7f8      	b.n	80091bc <__sseek+0x18>
 80091ca:	46c0      	nop			@ (mov r8, r8)
 80091cc:	ffffefff 	.word	0xffffefff

080091d0 <__sclose>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	230e      	movs	r3, #14
 80091d4:	5ec9      	ldrsh	r1, [r1, r3]
 80091d6:	f000 f80d 	bl	80091f4 <_close_r>
 80091da:	bd10      	pop	{r4, pc}

080091dc <memset>:
 80091dc:	0003      	movs	r3, r0
 80091de:	1882      	adds	r2, r0, r2
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d100      	bne.n	80091e6 <memset+0xa>
 80091e4:	4770      	bx	lr
 80091e6:	7019      	strb	r1, [r3, #0]
 80091e8:	3301      	adds	r3, #1
 80091ea:	e7f9      	b.n	80091e0 <memset+0x4>

080091ec <_localeconv_r>:
 80091ec:	4800      	ldr	r0, [pc, #0]	@ (80091f0 <_localeconv_r+0x4>)
 80091ee:	4770      	bx	lr
 80091f0:	2000015c 	.word	0x2000015c

080091f4 <_close_r>:
 80091f4:	2300      	movs	r3, #0
 80091f6:	b570      	push	{r4, r5, r6, lr}
 80091f8:	4d06      	ldr	r5, [pc, #24]	@ (8009214 <_close_r+0x20>)
 80091fa:	0004      	movs	r4, r0
 80091fc:	0008      	movs	r0, r1
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7fb f870 	bl	80042e4 <_close>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d103      	bne.n	8009210 <_close_r+0x1c>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d000      	beq.n	8009210 <_close_r+0x1c>
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	bd70      	pop	{r4, r5, r6, pc}
 8009212:	46c0      	nop			@ (mov r8, r8)
 8009214:	20000d9c 	.word	0x20000d9c

08009218 <_lseek_r>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	0004      	movs	r4, r0
 800921c:	0008      	movs	r0, r1
 800921e:	0011      	movs	r1, r2
 8009220:	001a      	movs	r2, r3
 8009222:	2300      	movs	r3, #0
 8009224:	4d05      	ldr	r5, [pc, #20]	@ (800923c <_lseek_r+0x24>)
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	f7fb f87d 	bl	8004326 <_lseek>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d103      	bne.n	8009238 <_lseek_r+0x20>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d000      	beq.n	8009238 <_lseek_r+0x20>
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	bd70      	pop	{r4, r5, r6, pc}
 800923a:	46c0      	nop			@ (mov r8, r8)
 800923c:	20000d9c 	.word	0x20000d9c

08009240 <_read_r>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	0004      	movs	r4, r0
 8009244:	0008      	movs	r0, r1
 8009246:	0011      	movs	r1, r2
 8009248:	001a      	movs	r2, r3
 800924a:	2300      	movs	r3, #0
 800924c:	4d05      	ldr	r5, [pc, #20]	@ (8009264 <_read_r+0x24>)
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	f7fb f80f 	bl	8004272 <_read>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d103      	bne.n	8009260 <_read_r+0x20>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d000      	beq.n	8009260 <_read_r+0x20>
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	bd70      	pop	{r4, r5, r6, pc}
 8009262:	46c0      	nop			@ (mov r8, r8)
 8009264:	20000d9c 	.word	0x20000d9c

08009268 <_write_r>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	0004      	movs	r4, r0
 800926c:	0008      	movs	r0, r1
 800926e:	0011      	movs	r1, r2
 8009270:	001a      	movs	r2, r3
 8009272:	2300      	movs	r3, #0
 8009274:	4d05      	ldr	r5, [pc, #20]	@ (800928c <_write_r+0x24>)
 8009276:	602b      	str	r3, [r5, #0]
 8009278:	f7fb f818 	bl	80042ac <_write>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d103      	bne.n	8009288 <_write_r+0x20>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d000      	beq.n	8009288 <_write_r+0x20>
 8009286:	6023      	str	r3, [r4, #0]
 8009288:	bd70      	pop	{r4, r5, r6, pc}
 800928a:	46c0      	nop			@ (mov r8, r8)
 800928c:	20000d9c 	.word	0x20000d9c

08009290 <__errno>:
 8009290:	4b01      	ldr	r3, [pc, #4]	@ (8009298 <__errno+0x8>)
 8009292:	6818      	ldr	r0, [r3, #0]
 8009294:	4770      	bx	lr
 8009296:	46c0      	nop			@ (mov r8, r8)
 8009298:	2000001c 	.word	0x2000001c

0800929c <__libc_init_array>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	2600      	movs	r6, #0
 80092a0:	4c0c      	ldr	r4, [pc, #48]	@ (80092d4 <__libc_init_array+0x38>)
 80092a2:	4d0d      	ldr	r5, [pc, #52]	@ (80092d8 <__libc_init_array+0x3c>)
 80092a4:	1b64      	subs	r4, r4, r5
 80092a6:	10a4      	asrs	r4, r4, #2
 80092a8:	42a6      	cmp	r6, r4
 80092aa:	d109      	bne.n	80092c0 <__libc_init_array+0x24>
 80092ac:	2600      	movs	r6, #0
 80092ae:	f003 f8bf 	bl	800c430 <_init>
 80092b2:	4c0a      	ldr	r4, [pc, #40]	@ (80092dc <__libc_init_array+0x40>)
 80092b4:	4d0a      	ldr	r5, [pc, #40]	@ (80092e0 <__libc_init_array+0x44>)
 80092b6:	1b64      	subs	r4, r4, r5
 80092b8:	10a4      	asrs	r4, r4, #2
 80092ba:	42a6      	cmp	r6, r4
 80092bc:	d105      	bne.n	80092ca <__libc_init_array+0x2e>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	00b3      	lsls	r3, r6, #2
 80092c2:	58eb      	ldr	r3, [r5, r3]
 80092c4:	4798      	blx	r3
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7ee      	b.n	80092a8 <__libc_init_array+0xc>
 80092ca:	00b3      	lsls	r3, r6, #2
 80092cc:	58eb      	ldr	r3, [r5, r3]
 80092ce:	4798      	blx	r3
 80092d0:	3601      	adds	r6, #1
 80092d2:	e7f2      	b.n	80092ba <__libc_init_array+0x1e>
 80092d4:	0800d3e0 	.word	0x0800d3e0
 80092d8:	0800d3e0 	.word	0x0800d3e0
 80092dc:	0800d3e4 	.word	0x0800d3e4
 80092e0:	0800d3e0 	.word	0x0800d3e0

080092e4 <__retarget_lock_init_recursive>:
 80092e4:	4770      	bx	lr

080092e6 <__retarget_lock_acquire_recursive>:
 80092e6:	4770      	bx	lr

080092e8 <__retarget_lock_release_recursive>:
 80092e8:	4770      	bx	lr

080092ea <memchr>:
 80092ea:	b2c9      	uxtb	r1, r1
 80092ec:	1882      	adds	r2, r0, r2
 80092ee:	4290      	cmp	r0, r2
 80092f0:	d101      	bne.n	80092f6 <memchr+0xc>
 80092f2:	2000      	movs	r0, #0
 80092f4:	4770      	bx	lr
 80092f6:	7803      	ldrb	r3, [r0, #0]
 80092f8:	428b      	cmp	r3, r1
 80092fa:	d0fb      	beq.n	80092f4 <memchr+0xa>
 80092fc:	3001      	adds	r0, #1
 80092fe:	e7f6      	b.n	80092ee <memchr+0x4>

08009300 <quorem>:
 8009300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009302:	6903      	ldr	r3, [r0, #16]
 8009304:	690c      	ldr	r4, [r1, #16]
 8009306:	b089      	sub	sp, #36	@ 0x24
 8009308:	9003      	str	r0, [sp, #12]
 800930a:	9106      	str	r1, [sp, #24]
 800930c:	2000      	movs	r0, #0
 800930e:	42a3      	cmp	r3, r4
 8009310:	db63      	blt.n	80093da <quorem+0xda>
 8009312:	000b      	movs	r3, r1
 8009314:	3c01      	subs	r4, #1
 8009316:	3314      	adds	r3, #20
 8009318:	00a5      	lsls	r5, r4, #2
 800931a:	9304      	str	r3, [sp, #16]
 800931c:	195b      	adds	r3, r3, r5
 800931e:	9305      	str	r3, [sp, #20]
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	3314      	adds	r3, #20
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	195d      	adds	r5, r3, r5
 8009328:	9b05      	ldr	r3, [sp, #20]
 800932a:	682f      	ldr	r7, [r5, #0]
 800932c:	681e      	ldr	r6, [r3, #0]
 800932e:	0038      	movs	r0, r7
 8009330:	3601      	adds	r6, #1
 8009332:	0031      	movs	r1, r6
 8009334:	f7f6 ff02 	bl	800013c <__udivsi3>
 8009338:	9002      	str	r0, [sp, #8]
 800933a:	42b7      	cmp	r7, r6
 800933c:	d327      	bcc.n	800938e <quorem+0x8e>
 800933e:	9b04      	ldr	r3, [sp, #16]
 8009340:	2700      	movs	r7, #0
 8009342:	469c      	mov	ip, r3
 8009344:	9e01      	ldr	r6, [sp, #4]
 8009346:	9707      	str	r7, [sp, #28]
 8009348:	4662      	mov	r2, ip
 800934a:	ca08      	ldmia	r2!, {r3}
 800934c:	6830      	ldr	r0, [r6, #0]
 800934e:	4694      	mov	ip, r2
 8009350:	9a02      	ldr	r2, [sp, #8]
 8009352:	b299      	uxth	r1, r3
 8009354:	4351      	muls	r1, r2
 8009356:	0c1b      	lsrs	r3, r3, #16
 8009358:	4353      	muls	r3, r2
 800935a:	19c9      	adds	r1, r1, r7
 800935c:	0c0a      	lsrs	r2, r1, #16
 800935e:	189b      	adds	r3, r3, r2
 8009360:	b289      	uxth	r1, r1
 8009362:	b282      	uxth	r2, r0
 8009364:	1a52      	subs	r2, r2, r1
 8009366:	9907      	ldr	r1, [sp, #28]
 8009368:	0c1f      	lsrs	r7, r3, #16
 800936a:	1852      	adds	r2, r2, r1
 800936c:	0c00      	lsrs	r0, r0, #16
 800936e:	b29b      	uxth	r3, r3
 8009370:	1411      	asrs	r1, r2, #16
 8009372:	1ac3      	subs	r3, r0, r3
 8009374:	185b      	adds	r3, r3, r1
 8009376:	1419      	asrs	r1, r3, #16
 8009378:	b292      	uxth	r2, r2
 800937a:	041b      	lsls	r3, r3, #16
 800937c:	431a      	orrs	r2, r3
 800937e:	9b05      	ldr	r3, [sp, #20]
 8009380:	9107      	str	r1, [sp, #28]
 8009382:	c604      	stmia	r6!, {r2}
 8009384:	4563      	cmp	r3, ip
 8009386:	d2df      	bcs.n	8009348 <quorem+0x48>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d02b      	beq.n	80093e6 <quorem+0xe6>
 800938e:	9906      	ldr	r1, [sp, #24]
 8009390:	9803      	ldr	r0, [sp, #12]
 8009392:	f001 f9b7 	bl	800a704 <__mcmp>
 8009396:	2800      	cmp	r0, #0
 8009398:	db1e      	blt.n	80093d8 <quorem+0xd8>
 800939a:	2600      	movs	r6, #0
 800939c:	9d01      	ldr	r5, [sp, #4]
 800939e:	9904      	ldr	r1, [sp, #16]
 80093a0:	c901      	ldmia	r1!, {r0}
 80093a2:	682b      	ldr	r3, [r5, #0]
 80093a4:	b287      	uxth	r7, r0
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	1bd2      	subs	r2, r2, r7
 80093aa:	1992      	adds	r2, r2, r6
 80093ac:	0c00      	lsrs	r0, r0, #16
 80093ae:	0c1b      	lsrs	r3, r3, #16
 80093b0:	1a1b      	subs	r3, r3, r0
 80093b2:	1410      	asrs	r0, r2, #16
 80093b4:	181b      	adds	r3, r3, r0
 80093b6:	141e      	asrs	r6, r3, #16
 80093b8:	b292      	uxth	r2, r2
 80093ba:	041b      	lsls	r3, r3, #16
 80093bc:	431a      	orrs	r2, r3
 80093be:	9b05      	ldr	r3, [sp, #20]
 80093c0:	c504      	stmia	r5!, {r2}
 80093c2:	428b      	cmp	r3, r1
 80093c4:	d2ec      	bcs.n	80093a0 <quorem+0xa0>
 80093c6:	9a01      	ldr	r2, [sp, #4]
 80093c8:	00a3      	lsls	r3, r4, #2
 80093ca:	18d3      	adds	r3, r2, r3
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	d014      	beq.n	80093fc <quorem+0xfc>
 80093d2:	9b02      	ldr	r3, [sp, #8]
 80093d4:	3301      	adds	r3, #1
 80093d6:	9302      	str	r3, [sp, #8]
 80093d8:	9802      	ldr	r0, [sp, #8]
 80093da:	b009      	add	sp, #36	@ 0x24
 80093dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093de:	682b      	ldr	r3, [r5, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d104      	bne.n	80093ee <quorem+0xee>
 80093e4:	3c01      	subs	r4, #1
 80093e6:	9b01      	ldr	r3, [sp, #4]
 80093e8:	3d04      	subs	r5, #4
 80093ea:	42ab      	cmp	r3, r5
 80093ec:	d3f7      	bcc.n	80093de <quorem+0xde>
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	611c      	str	r4, [r3, #16]
 80093f2:	e7cc      	b.n	800938e <quorem+0x8e>
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	2a00      	cmp	r2, #0
 80093f8:	d104      	bne.n	8009404 <quorem+0x104>
 80093fa:	3c01      	subs	r4, #1
 80093fc:	9a01      	ldr	r2, [sp, #4]
 80093fe:	3b04      	subs	r3, #4
 8009400:	429a      	cmp	r2, r3
 8009402:	d3f7      	bcc.n	80093f4 <quorem+0xf4>
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	611c      	str	r4, [r3, #16]
 8009408:	e7e3      	b.n	80093d2 <quorem+0xd2>
	...

0800940c <_dtoa_r>:
 800940c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800940e:	0014      	movs	r4, r2
 8009410:	001d      	movs	r5, r3
 8009412:	69c6      	ldr	r6, [r0, #28]
 8009414:	b09d      	sub	sp, #116	@ 0x74
 8009416:	940a      	str	r4, [sp, #40]	@ 0x28
 8009418:	950b      	str	r5, [sp, #44]	@ 0x2c
 800941a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800941c:	9003      	str	r0, [sp, #12]
 800941e:	2e00      	cmp	r6, #0
 8009420:	d10f      	bne.n	8009442 <_dtoa_r+0x36>
 8009422:	2010      	movs	r0, #16
 8009424:	f000 fe2c 	bl	800a080 <malloc>
 8009428:	9b03      	ldr	r3, [sp, #12]
 800942a:	1e02      	subs	r2, r0, #0
 800942c:	61d8      	str	r0, [r3, #28]
 800942e:	d104      	bne.n	800943a <_dtoa_r+0x2e>
 8009430:	21ef      	movs	r1, #239	@ 0xef
 8009432:	4bc7      	ldr	r3, [pc, #796]	@ (8009750 <_dtoa_r+0x344>)
 8009434:	48c7      	ldr	r0, [pc, #796]	@ (8009754 <_dtoa_r+0x348>)
 8009436:	f001 fd59 	bl	800aeec <__assert_func>
 800943a:	6046      	str	r6, [r0, #4]
 800943c:	6086      	str	r6, [r0, #8]
 800943e:	6006      	str	r6, [r0, #0]
 8009440:	60c6      	str	r6, [r0, #12]
 8009442:	9b03      	ldr	r3, [sp, #12]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	6819      	ldr	r1, [r3, #0]
 8009448:	2900      	cmp	r1, #0
 800944a:	d00b      	beq.n	8009464 <_dtoa_r+0x58>
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	2301      	movs	r3, #1
 8009450:	4093      	lsls	r3, r2
 8009452:	604a      	str	r2, [r1, #4]
 8009454:	608b      	str	r3, [r1, #8]
 8009456:	9803      	ldr	r0, [sp, #12]
 8009458:	f000 ff12 	bl	800a280 <_Bfree>
 800945c:	2200      	movs	r2, #0
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	2d00      	cmp	r5, #0
 8009466:	da1e      	bge.n	80094a6 <_dtoa_r+0x9a>
 8009468:	2301      	movs	r3, #1
 800946a:	603b      	str	r3, [r7, #0]
 800946c:	006b      	lsls	r3, r5, #1
 800946e:	085b      	lsrs	r3, r3, #1
 8009470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009472:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009474:	4bb8      	ldr	r3, [pc, #736]	@ (8009758 <_dtoa_r+0x34c>)
 8009476:	4ab8      	ldr	r2, [pc, #736]	@ (8009758 <_dtoa_r+0x34c>)
 8009478:	403b      	ands	r3, r7
 800947a:	4293      	cmp	r3, r2
 800947c:	d116      	bne.n	80094ac <_dtoa_r+0xa0>
 800947e:	4bb7      	ldr	r3, [pc, #732]	@ (800975c <_dtoa_r+0x350>)
 8009480:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	033b      	lsls	r3, r7, #12
 8009486:	0b1b      	lsrs	r3, r3, #12
 8009488:	4323      	orrs	r3, r4
 800948a:	d101      	bne.n	8009490 <_dtoa_r+0x84>
 800948c:	f000 fd80 	bl	8009f90 <_dtoa_r+0xb84>
 8009490:	4bb3      	ldr	r3, [pc, #716]	@ (8009760 <_dtoa_r+0x354>)
 8009492:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009494:	9308      	str	r3, [sp, #32]
 8009496:	2a00      	cmp	r2, #0
 8009498:	d002      	beq.n	80094a0 <_dtoa_r+0x94>
 800949a:	4bb2      	ldr	r3, [pc, #712]	@ (8009764 <_dtoa_r+0x358>)
 800949c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	9808      	ldr	r0, [sp, #32]
 80094a2:	b01d      	add	sp, #116	@ 0x74
 80094a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a6:	2300      	movs	r3, #0
 80094a8:	603b      	str	r3, [r7, #0]
 80094aa:	e7e2      	b.n	8009472 <_dtoa_r+0x66>
 80094ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80094b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80094b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80094b8:	2200      	movs	r2, #0
 80094ba:	2300      	movs	r3, #0
 80094bc:	f7f6 ffc4 	bl	8000448 <__aeabi_dcmpeq>
 80094c0:	1e06      	subs	r6, r0, #0
 80094c2:	d00b      	beq.n	80094dc <_dtoa_r+0xd0>
 80094c4:	2301      	movs	r3, #1
 80094c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <_dtoa_r+0xca>
 80094d0:	4ba5      	ldr	r3, [pc, #660]	@ (8009768 <_dtoa_r+0x35c>)
 80094d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	4ba5      	ldr	r3, [pc, #660]	@ (800976c <_dtoa_r+0x360>)
 80094d8:	9308      	str	r3, [sp, #32]
 80094da:	e7e1      	b.n	80094a0 <_dtoa_r+0x94>
 80094dc:	ab1a      	add	r3, sp, #104	@ 0x68
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	9803      	ldr	r0, [sp, #12]
 80094e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80094e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094ea:	f001 f9c1 	bl	800a870 <__d2b>
 80094ee:	007a      	lsls	r2, r7, #1
 80094f0:	9005      	str	r0, [sp, #20]
 80094f2:	0d52      	lsrs	r2, r2, #21
 80094f4:	d100      	bne.n	80094f8 <_dtoa_r+0xec>
 80094f6:	e07b      	b.n	80095f0 <_dtoa_r+0x1e4>
 80094f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094fa:	9618      	str	r6, [sp, #96]	@ 0x60
 80094fc:	0319      	lsls	r1, r3, #12
 80094fe:	4b9c      	ldr	r3, [pc, #624]	@ (8009770 <_dtoa_r+0x364>)
 8009500:	0b09      	lsrs	r1, r1, #12
 8009502:	430b      	orrs	r3, r1
 8009504:	499b      	ldr	r1, [pc, #620]	@ (8009774 <_dtoa_r+0x368>)
 8009506:	1857      	adds	r7, r2, r1
 8009508:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800950a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800950c:	0019      	movs	r1, r3
 800950e:	2200      	movs	r2, #0
 8009510:	4b99      	ldr	r3, [pc, #612]	@ (8009778 <_dtoa_r+0x36c>)
 8009512:	f7f9 faf3 	bl	8002afc <__aeabi_dsub>
 8009516:	4a99      	ldr	r2, [pc, #612]	@ (800977c <_dtoa_r+0x370>)
 8009518:	4b99      	ldr	r3, [pc, #612]	@ (8009780 <_dtoa_r+0x374>)
 800951a:	f7f9 f809 	bl	8002530 <__aeabi_dmul>
 800951e:	4a99      	ldr	r2, [pc, #612]	@ (8009784 <_dtoa_r+0x378>)
 8009520:	4b99      	ldr	r3, [pc, #612]	@ (8009788 <_dtoa_r+0x37c>)
 8009522:	f7f8 f805 	bl	8001530 <__aeabi_dadd>
 8009526:	0004      	movs	r4, r0
 8009528:	0038      	movs	r0, r7
 800952a:	000d      	movs	r5, r1
 800952c:	f7f9 ff4e 	bl	80033cc <__aeabi_i2d>
 8009530:	4a96      	ldr	r2, [pc, #600]	@ (800978c <_dtoa_r+0x380>)
 8009532:	4b97      	ldr	r3, [pc, #604]	@ (8009790 <_dtoa_r+0x384>)
 8009534:	f7f8 fffc 	bl	8002530 <__aeabi_dmul>
 8009538:	0002      	movs	r2, r0
 800953a:	000b      	movs	r3, r1
 800953c:	0020      	movs	r0, r4
 800953e:	0029      	movs	r1, r5
 8009540:	f7f7 fff6 	bl	8001530 <__aeabi_dadd>
 8009544:	0004      	movs	r4, r0
 8009546:	000d      	movs	r5, r1
 8009548:	f7f9 ff04 	bl	8003354 <__aeabi_d2iz>
 800954c:	2200      	movs	r2, #0
 800954e:	9004      	str	r0, [sp, #16]
 8009550:	2300      	movs	r3, #0
 8009552:	0020      	movs	r0, r4
 8009554:	0029      	movs	r1, r5
 8009556:	f7f6 ff7d 	bl	8000454 <__aeabi_dcmplt>
 800955a:	2800      	cmp	r0, #0
 800955c:	d00b      	beq.n	8009576 <_dtoa_r+0x16a>
 800955e:	9804      	ldr	r0, [sp, #16]
 8009560:	f7f9 ff34 	bl	80033cc <__aeabi_i2d>
 8009564:	002b      	movs	r3, r5
 8009566:	0022      	movs	r2, r4
 8009568:	f7f6 ff6e 	bl	8000448 <__aeabi_dcmpeq>
 800956c:	4243      	negs	r3, r0
 800956e:	4158      	adcs	r0, r3
 8009570:	9b04      	ldr	r3, [sp, #16]
 8009572:	1a1b      	subs	r3, r3, r0
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	2301      	movs	r3, #1
 8009578:	9315      	str	r3, [sp, #84]	@ 0x54
 800957a:	9b04      	ldr	r3, [sp, #16]
 800957c:	2b16      	cmp	r3, #22
 800957e:	d810      	bhi.n	80095a2 <_dtoa_r+0x196>
 8009580:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009582:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009584:	9a04      	ldr	r2, [sp, #16]
 8009586:	4b83      	ldr	r3, [pc, #524]	@ (8009794 <_dtoa_r+0x388>)
 8009588:	00d2      	lsls	r2, r2, #3
 800958a:	189b      	adds	r3, r3, r2
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f7f6 ff60 	bl	8000454 <__aeabi_dcmplt>
 8009594:	2800      	cmp	r0, #0
 8009596:	d047      	beq.n	8009628 <_dtoa_r+0x21c>
 8009598:	9b04      	ldr	r3, [sp, #16]
 800959a:	3b01      	subs	r3, #1
 800959c:	9304      	str	r3, [sp, #16]
 800959e:	2300      	movs	r3, #0
 80095a0:	9315      	str	r3, [sp, #84]	@ 0x54
 80095a2:	2200      	movs	r2, #0
 80095a4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80095a6:	9206      	str	r2, [sp, #24]
 80095a8:	1bdb      	subs	r3, r3, r7
 80095aa:	1e5a      	subs	r2, r3, #1
 80095ac:	d53e      	bpl.n	800962c <_dtoa_r+0x220>
 80095ae:	2201      	movs	r2, #1
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	9306      	str	r3, [sp, #24]
 80095b4:	2300      	movs	r3, #0
 80095b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80095b8:	9b04      	ldr	r3, [sp, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	db38      	blt.n	8009630 <_dtoa_r+0x224>
 80095be:	9a04      	ldr	r2, [sp, #16]
 80095c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095c2:	4694      	mov	ip, r2
 80095c4:	4463      	add	r3, ip
 80095c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80095c8:	2300      	movs	r3, #0
 80095ca:	9214      	str	r2, [sp, #80]	@ 0x50
 80095cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80095d0:	2401      	movs	r4, #1
 80095d2:	2b09      	cmp	r3, #9
 80095d4:	d862      	bhi.n	800969c <_dtoa_r+0x290>
 80095d6:	2b05      	cmp	r3, #5
 80095d8:	dd02      	ble.n	80095e0 <_dtoa_r+0x1d4>
 80095da:	2400      	movs	r4, #0
 80095dc:	3b04      	subs	r3, #4
 80095de:	9322      	str	r3, [sp, #136]	@ 0x88
 80095e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80095e2:	1e98      	subs	r0, r3, #2
 80095e4:	2803      	cmp	r0, #3
 80095e6:	d863      	bhi.n	80096b0 <_dtoa_r+0x2a4>
 80095e8:	f7f6 fd94 	bl	8000114 <__gnu_thumb1_case_uqi>
 80095ec:	2b385654 	.word	0x2b385654
 80095f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80095f2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80095f4:	18f6      	adds	r6, r6, r3
 80095f6:	4b68      	ldr	r3, [pc, #416]	@ (8009798 <_dtoa_r+0x38c>)
 80095f8:	18f2      	adds	r2, r6, r3
 80095fa:	2a20      	cmp	r2, #32
 80095fc:	dd0f      	ble.n	800961e <_dtoa_r+0x212>
 80095fe:	2340      	movs	r3, #64	@ 0x40
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	409f      	lsls	r7, r3
 8009604:	4b65      	ldr	r3, [pc, #404]	@ (800979c <_dtoa_r+0x390>)
 8009606:	0038      	movs	r0, r7
 8009608:	18f3      	adds	r3, r6, r3
 800960a:	40dc      	lsrs	r4, r3
 800960c:	4320      	orrs	r0, r4
 800960e:	f7f9 ff0b 	bl	8003428 <__aeabi_ui2d>
 8009612:	2201      	movs	r2, #1
 8009614:	4b62      	ldr	r3, [pc, #392]	@ (80097a0 <_dtoa_r+0x394>)
 8009616:	1e77      	subs	r7, r6, #1
 8009618:	18cb      	adds	r3, r1, r3
 800961a:	9218      	str	r2, [sp, #96]	@ 0x60
 800961c:	e776      	b.n	800950c <_dtoa_r+0x100>
 800961e:	2320      	movs	r3, #32
 8009620:	0020      	movs	r0, r4
 8009622:	1a9b      	subs	r3, r3, r2
 8009624:	4098      	lsls	r0, r3
 8009626:	e7f2      	b.n	800960e <_dtoa_r+0x202>
 8009628:	9015      	str	r0, [sp, #84]	@ 0x54
 800962a:	e7ba      	b.n	80095a2 <_dtoa_r+0x196>
 800962c:	920d      	str	r2, [sp, #52]	@ 0x34
 800962e:	e7c3      	b.n	80095b8 <_dtoa_r+0x1ac>
 8009630:	9b06      	ldr	r3, [sp, #24]
 8009632:	9a04      	ldr	r2, [sp, #16]
 8009634:	1a9b      	subs	r3, r3, r2
 8009636:	9306      	str	r3, [sp, #24]
 8009638:	4253      	negs	r3, r2
 800963a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800963c:	2300      	movs	r3, #0
 800963e:	9314      	str	r3, [sp, #80]	@ 0x50
 8009640:	e7c5      	b.n	80095ce <_dtoa_r+0x1c2>
 8009642:	2301      	movs	r3, #1
 8009644:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009646:	9310      	str	r3, [sp, #64]	@ 0x40
 8009648:	4694      	mov	ip, r2
 800964a:	9b04      	ldr	r3, [sp, #16]
 800964c:	4463      	add	r3, ip
 800964e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009650:	3301      	adds	r3, #1
 8009652:	9309      	str	r3, [sp, #36]	@ 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	dc08      	bgt.n	800966a <_dtoa_r+0x25e>
 8009658:	2301      	movs	r3, #1
 800965a:	e006      	b.n	800966a <_dtoa_r+0x25e>
 800965c:	2301      	movs	r3, #1
 800965e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009660:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009662:	2b00      	cmp	r3, #0
 8009664:	dd28      	ble.n	80096b8 <_dtoa_r+0x2ac>
 8009666:	930e      	str	r3, [sp, #56]	@ 0x38
 8009668:	9309      	str	r3, [sp, #36]	@ 0x24
 800966a:	9a03      	ldr	r2, [sp, #12]
 800966c:	2100      	movs	r1, #0
 800966e:	69d0      	ldr	r0, [r2, #28]
 8009670:	2204      	movs	r2, #4
 8009672:	0015      	movs	r5, r2
 8009674:	3514      	adds	r5, #20
 8009676:	429d      	cmp	r5, r3
 8009678:	d923      	bls.n	80096c2 <_dtoa_r+0x2b6>
 800967a:	6041      	str	r1, [r0, #4]
 800967c:	9803      	ldr	r0, [sp, #12]
 800967e:	f000 fdbb 	bl	800a1f8 <_Balloc>
 8009682:	9008      	str	r0, [sp, #32]
 8009684:	2800      	cmp	r0, #0
 8009686:	d11f      	bne.n	80096c8 <_dtoa_r+0x2bc>
 8009688:	21b0      	movs	r1, #176	@ 0xb0
 800968a:	4b46      	ldr	r3, [pc, #280]	@ (80097a4 <_dtoa_r+0x398>)
 800968c:	4831      	ldr	r0, [pc, #196]	@ (8009754 <_dtoa_r+0x348>)
 800968e:	9a08      	ldr	r2, [sp, #32]
 8009690:	31ff      	adds	r1, #255	@ 0xff
 8009692:	e6d0      	b.n	8009436 <_dtoa_r+0x2a>
 8009694:	2300      	movs	r3, #0
 8009696:	e7e2      	b.n	800965e <_dtoa_r+0x252>
 8009698:	2300      	movs	r3, #0
 800969a:	e7d3      	b.n	8009644 <_dtoa_r+0x238>
 800969c:	2300      	movs	r3, #0
 800969e:	9410      	str	r4, [sp, #64]	@ 0x40
 80096a0:	9322      	str	r3, [sp, #136]	@ 0x88
 80096a2:	3b01      	subs	r3, #1
 80096a4:	2200      	movs	r2, #0
 80096a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80096a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80096aa:	3313      	adds	r3, #19
 80096ac:	9223      	str	r2, [sp, #140]	@ 0x8c
 80096ae:	e7dc      	b.n	800966a <_dtoa_r+0x25e>
 80096b0:	2301      	movs	r3, #1
 80096b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80096b4:	3b02      	subs	r3, #2
 80096b6:	e7f5      	b.n	80096a4 <_dtoa_r+0x298>
 80096b8:	2301      	movs	r3, #1
 80096ba:	001a      	movs	r2, r3
 80096bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80096be:	9309      	str	r3, [sp, #36]	@ 0x24
 80096c0:	e7f4      	b.n	80096ac <_dtoa_r+0x2a0>
 80096c2:	3101      	adds	r1, #1
 80096c4:	0052      	lsls	r2, r2, #1
 80096c6:	e7d4      	b.n	8009672 <_dtoa_r+0x266>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	9a08      	ldr	r2, [sp, #32]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d2:	2b0e      	cmp	r3, #14
 80096d4:	d900      	bls.n	80096d8 <_dtoa_r+0x2cc>
 80096d6:	e0d6      	b.n	8009886 <_dtoa_r+0x47a>
 80096d8:	2c00      	cmp	r4, #0
 80096da:	d100      	bne.n	80096de <_dtoa_r+0x2d2>
 80096dc:	e0d3      	b.n	8009886 <_dtoa_r+0x47a>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	dd63      	ble.n	80097ac <_dtoa_r+0x3a0>
 80096e4:	210f      	movs	r1, #15
 80096e6:	9a04      	ldr	r2, [sp, #16]
 80096e8:	4b2a      	ldr	r3, [pc, #168]	@ (8009794 <_dtoa_r+0x388>)
 80096ea:	400a      	ands	r2, r1
 80096ec:	00d2      	lsls	r2, r2, #3
 80096ee:	189b      	adds	r3, r3, r2
 80096f0:	681e      	ldr	r6, [r3, #0]
 80096f2:	685f      	ldr	r7, [r3, #4]
 80096f4:	9b04      	ldr	r3, [sp, #16]
 80096f6:	2402      	movs	r4, #2
 80096f8:	111d      	asrs	r5, r3, #4
 80096fa:	05db      	lsls	r3, r3, #23
 80096fc:	d50a      	bpl.n	8009714 <_dtoa_r+0x308>
 80096fe:	4b2a      	ldr	r3, [pc, #168]	@ (80097a8 <_dtoa_r+0x39c>)
 8009700:	400d      	ands	r5, r1
 8009702:	6a1a      	ldr	r2, [r3, #32]
 8009704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009706:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009708:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800970a:	f7f8 fad7 	bl	8001cbc <__aeabi_ddiv>
 800970e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009710:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009712:	3401      	adds	r4, #1
 8009714:	4b24      	ldr	r3, [pc, #144]	@ (80097a8 <_dtoa_r+0x39c>)
 8009716:	930c      	str	r3, [sp, #48]	@ 0x30
 8009718:	2d00      	cmp	r5, #0
 800971a:	d108      	bne.n	800972e <_dtoa_r+0x322>
 800971c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800971e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009720:	0032      	movs	r2, r6
 8009722:	003b      	movs	r3, r7
 8009724:	f7f8 faca 	bl	8001cbc <__aeabi_ddiv>
 8009728:	900a      	str	r0, [sp, #40]	@ 0x28
 800972a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800972c:	e059      	b.n	80097e2 <_dtoa_r+0x3d6>
 800972e:	2301      	movs	r3, #1
 8009730:	421d      	tst	r5, r3
 8009732:	d009      	beq.n	8009748 <_dtoa_r+0x33c>
 8009734:	18e4      	adds	r4, r4, r3
 8009736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009738:	0030      	movs	r0, r6
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	0039      	movs	r1, r7
 8009740:	f7f8 fef6 	bl	8002530 <__aeabi_dmul>
 8009744:	0006      	movs	r6, r0
 8009746:	000f      	movs	r7, r1
 8009748:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800974a:	106d      	asrs	r5, r5, #1
 800974c:	3308      	adds	r3, #8
 800974e:	e7e2      	b.n	8009716 <_dtoa_r+0x30a>
 8009750:	0800ced1 	.word	0x0800ced1
 8009754:	0800cee8 	.word	0x0800cee8
 8009758:	7ff00000 	.word	0x7ff00000
 800975c:	0000270f 	.word	0x0000270f
 8009760:	0800cecd 	.word	0x0800cecd
 8009764:	0800ced0 	.word	0x0800ced0
 8009768:	0800cea1 	.word	0x0800cea1
 800976c:	0800cea0 	.word	0x0800cea0
 8009770:	3ff00000 	.word	0x3ff00000
 8009774:	fffffc01 	.word	0xfffffc01
 8009778:	3ff80000 	.word	0x3ff80000
 800977c:	636f4361 	.word	0x636f4361
 8009780:	3fd287a7 	.word	0x3fd287a7
 8009784:	8b60c8b3 	.word	0x8b60c8b3
 8009788:	3fc68a28 	.word	0x3fc68a28
 800978c:	509f79fb 	.word	0x509f79fb
 8009790:	3fd34413 	.word	0x3fd34413
 8009794:	0800d038 	.word	0x0800d038
 8009798:	00000432 	.word	0x00000432
 800979c:	00000412 	.word	0x00000412
 80097a0:	fe100000 	.word	0xfe100000
 80097a4:	0800cf40 	.word	0x0800cf40
 80097a8:	0800d010 	.word	0x0800d010
 80097ac:	9b04      	ldr	r3, [sp, #16]
 80097ae:	2402      	movs	r4, #2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d016      	beq.n	80097e2 <_dtoa_r+0x3d6>
 80097b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80097b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80097b8:	220f      	movs	r2, #15
 80097ba:	425d      	negs	r5, r3
 80097bc:	402a      	ands	r2, r5
 80097be:	4bd5      	ldr	r3, [pc, #852]	@ (8009b14 <_dtoa_r+0x708>)
 80097c0:	00d2      	lsls	r2, r2, #3
 80097c2:	189b      	adds	r3, r3, r2
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	f7f8 feb2 	bl	8002530 <__aeabi_dmul>
 80097cc:	2701      	movs	r7, #1
 80097ce:	2300      	movs	r3, #0
 80097d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80097d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80097d4:	4ed0      	ldr	r6, [pc, #832]	@ (8009b18 <_dtoa_r+0x70c>)
 80097d6:	112d      	asrs	r5, r5, #4
 80097d8:	2d00      	cmp	r5, #0
 80097da:	d000      	beq.n	80097de <_dtoa_r+0x3d2>
 80097dc:	e095      	b.n	800990a <_dtoa_r+0x4fe>
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1a2      	bne.n	8009728 <_dtoa_r+0x31c>
 80097e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80097e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80097e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d100      	bne.n	80097ee <_dtoa_r+0x3e2>
 80097ec:	e098      	b.n	8009920 <_dtoa_r+0x514>
 80097ee:	2200      	movs	r2, #0
 80097f0:	0030      	movs	r0, r6
 80097f2:	0039      	movs	r1, r7
 80097f4:	4bc9      	ldr	r3, [pc, #804]	@ (8009b1c <_dtoa_r+0x710>)
 80097f6:	f7f6 fe2d 	bl	8000454 <__aeabi_dcmplt>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d100      	bne.n	8009800 <_dtoa_r+0x3f4>
 80097fe:	e08f      	b.n	8009920 <_dtoa_r+0x514>
 8009800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009802:	2b00      	cmp	r3, #0
 8009804:	d100      	bne.n	8009808 <_dtoa_r+0x3fc>
 8009806:	e08b      	b.n	8009920 <_dtoa_r+0x514>
 8009808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800980a:	2b00      	cmp	r3, #0
 800980c:	dd37      	ble.n	800987e <_dtoa_r+0x472>
 800980e:	9b04      	ldr	r3, [sp, #16]
 8009810:	2200      	movs	r2, #0
 8009812:	3b01      	subs	r3, #1
 8009814:	930c      	str	r3, [sp, #48]	@ 0x30
 8009816:	0030      	movs	r0, r6
 8009818:	4bc1      	ldr	r3, [pc, #772]	@ (8009b20 <_dtoa_r+0x714>)
 800981a:	0039      	movs	r1, r7
 800981c:	f7f8 fe88 	bl	8002530 <__aeabi_dmul>
 8009820:	900a      	str	r0, [sp, #40]	@ 0x28
 8009822:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009826:	3401      	adds	r4, #1
 8009828:	0020      	movs	r0, r4
 800982a:	9311      	str	r3, [sp, #68]	@ 0x44
 800982c:	f7f9 fdce 	bl	80033cc <__aeabi_i2d>
 8009830:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009834:	f7f8 fe7c 	bl	8002530 <__aeabi_dmul>
 8009838:	4bba      	ldr	r3, [pc, #744]	@ (8009b24 <_dtoa_r+0x718>)
 800983a:	2200      	movs	r2, #0
 800983c:	f7f7 fe78 	bl	8001530 <__aeabi_dadd>
 8009840:	4bb9      	ldr	r3, [pc, #740]	@ (8009b28 <_dtoa_r+0x71c>)
 8009842:	0006      	movs	r6, r0
 8009844:	18cf      	adds	r7, r1, r3
 8009846:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009848:	2b00      	cmp	r3, #0
 800984a:	d16d      	bne.n	8009928 <_dtoa_r+0x51c>
 800984c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800984e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009850:	2200      	movs	r2, #0
 8009852:	4bb6      	ldr	r3, [pc, #728]	@ (8009b2c <_dtoa_r+0x720>)
 8009854:	f7f9 f952 	bl	8002afc <__aeabi_dsub>
 8009858:	0032      	movs	r2, r6
 800985a:	003b      	movs	r3, r7
 800985c:	0004      	movs	r4, r0
 800985e:	000d      	movs	r5, r1
 8009860:	f7f6 fe0c 	bl	800047c <__aeabi_dcmpgt>
 8009864:	2800      	cmp	r0, #0
 8009866:	d000      	beq.n	800986a <_dtoa_r+0x45e>
 8009868:	e2b6      	b.n	8009dd8 <_dtoa_r+0x9cc>
 800986a:	2180      	movs	r1, #128	@ 0x80
 800986c:	0609      	lsls	r1, r1, #24
 800986e:	187b      	adds	r3, r7, r1
 8009870:	0032      	movs	r2, r6
 8009872:	0020      	movs	r0, r4
 8009874:	0029      	movs	r1, r5
 8009876:	f7f6 fded 	bl	8000454 <__aeabi_dcmplt>
 800987a:	2800      	cmp	r0, #0
 800987c:	d128      	bne.n	80098d0 <_dtoa_r+0x4c4>
 800987e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009880:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009882:	930a      	str	r3, [sp, #40]	@ 0x28
 8009884:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009886:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009888:	2b00      	cmp	r3, #0
 800988a:	da00      	bge.n	800988e <_dtoa_r+0x482>
 800988c:	e174      	b.n	8009b78 <_dtoa_r+0x76c>
 800988e:	9a04      	ldr	r2, [sp, #16]
 8009890:	2a0e      	cmp	r2, #14
 8009892:	dd00      	ble.n	8009896 <_dtoa_r+0x48a>
 8009894:	e170      	b.n	8009b78 <_dtoa_r+0x76c>
 8009896:	4b9f      	ldr	r3, [pc, #636]	@ (8009b14 <_dtoa_r+0x708>)
 8009898:	00d2      	lsls	r2, r2, #3
 800989a:	189b      	adds	r3, r3, r2
 800989c:	685c      	ldr	r4, [r3, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	9306      	str	r3, [sp, #24]
 80098a2:	9407      	str	r4, [sp, #28]
 80098a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	db00      	blt.n	80098ac <_dtoa_r+0x4a0>
 80098aa:	e0e7      	b.n	8009a7c <_dtoa_r+0x670>
 80098ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	dd00      	ble.n	80098b4 <_dtoa_r+0x4a8>
 80098b2:	e0e3      	b.n	8009a7c <_dtoa_r+0x670>
 80098b4:	d10c      	bne.n	80098d0 <_dtoa_r+0x4c4>
 80098b6:	9806      	ldr	r0, [sp, #24]
 80098b8:	9907      	ldr	r1, [sp, #28]
 80098ba:	2200      	movs	r2, #0
 80098bc:	4b9b      	ldr	r3, [pc, #620]	@ (8009b2c <_dtoa_r+0x720>)
 80098be:	f7f8 fe37 	bl	8002530 <__aeabi_dmul>
 80098c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098c6:	f7f6 fde3 	bl	8000490 <__aeabi_dcmpge>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d100      	bne.n	80098d0 <_dtoa_r+0x4c4>
 80098ce:	e286      	b.n	8009dde <_dtoa_r+0x9d2>
 80098d0:	2600      	movs	r6, #0
 80098d2:	0037      	movs	r7, r6
 80098d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098d6:	9c08      	ldr	r4, [sp, #32]
 80098d8:	43db      	mvns	r3, r3
 80098da:	930c      	str	r3, [sp, #48]	@ 0x30
 80098dc:	9704      	str	r7, [sp, #16]
 80098de:	2700      	movs	r7, #0
 80098e0:	0031      	movs	r1, r6
 80098e2:	9803      	ldr	r0, [sp, #12]
 80098e4:	f000 fccc 	bl	800a280 <_Bfree>
 80098e8:	9b04      	ldr	r3, [sp, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d100      	bne.n	80098f0 <_dtoa_r+0x4e4>
 80098ee:	e0bb      	b.n	8009a68 <_dtoa_r+0x65c>
 80098f0:	2f00      	cmp	r7, #0
 80098f2:	d005      	beq.n	8009900 <_dtoa_r+0x4f4>
 80098f4:	429f      	cmp	r7, r3
 80098f6:	d003      	beq.n	8009900 <_dtoa_r+0x4f4>
 80098f8:	0039      	movs	r1, r7
 80098fa:	9803      	ldr	r0, [sp, #12]
 80098fc:	f000 fcc0 	bl	800a280 <_Bfree>
 8009900:	9904      	ldr	r1, [sp, #16]
 8009902:	9803      	ldr	r0, [sp, #12]
 8009904:	f000 fcbc 	bl	800a280 <_Bfree>
 8009908:	e0ae      	b.n	8009a68 <_dtoa_r+0x65c>
 800990a:	423d      	tst	r5, r7
 800990c:	d005      	beq.n	800991a <_dtoa_r+0x50e>
 800990e:	6832      	ldr	r2, [r6, #0]
 8009910:	6873      	ldr	r3, [r6, #4]
 8009912:	f7f8 fe0d 	bl	8002530 <__aeabi_dmul>
 8009916:	003b      	movs	r3, r7
 8009918:	3401      	adds	r4, #1
 800991a:	106d      	asrs	r5, r5, #1
 800991c:	3608      	adds	r6, #8
 800991e:	e75b      	b.n	80097d8 <_dtoa_r+0x3cc>
 8009920:	9b04      	ldr	r3, [sp, #16]
 8009922:	930c      	str	r3, [sp, #48]	@ 0x30
 8009924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009926:	e77f      	b.n	8009828 <_dtoa_r+0x41c>
 8009928:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800992a:	4b7a      	ldr	r3, [pc, #488]	@ (8009b14 <_dtoa_r+0x708>)
 800992c:	3a01      	subs	r2, #1
 800992e:	00d2      	lsls	r2, r2, #3
 8009930:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009932:	189b      	adds	r3, r3, r2
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2900      	cmp	r1, #0
 800993a:	d04c      	beq.n	80099d6 <_dtoa_r+0x5ca>
 800993c:	2000      	movs	r0, #0
 800993e:	497c      	ldr	r1, [pc, #496]	@ (8009b30 <_dtoa_r+0x724>)
 8009940:	f7f8 f9bc 	bl	8001cbc <__aeabi_ddiv>
 8009944:	0032      	movs	r2, r6
 8009946:	003b      	movs	r3, r7
 8009948:	f7f9 f8d8 	bl	8002afc <__aeabi_dsub>
 800994c:	9a08      	ldr	r2, [sp, #32]
 800994e:	0006      	movs	r6, r0
 8009950:	4694      	mov	ip, r2
 8009952:	000f      	movs	r7, r1
 8009954:	9b08      	ldr	r3, [sp, #32]
 8009956:	9316      	str	r3, [sp, #88]	@ 0x58
 8009958:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800995a:	4463      	add	r3, ip
 800995c:	9311      	str	r3, [sp, #68]	@ 0x44
 800995e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009960:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009962:	f7f9 fcf7 	bl	8003354 <__aeabi_d2iz>
 8009966:	0005      	movs	r5, r0
 8009968:	f7f9 fd30 	bl	80033cc <__aeabi_i2d>
 800996c:	0002      	movs	r2, r0
 800996e:	000b      	movs	r3, r1
 8009970:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009972:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009974:	f7f9 f8c2 	bl	8002afc <__aeabi_dsub>
 8009978:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800997a:	3530      	adds	r5, #48	@ 0x30
 800997c:	1c5c      	adds	r4, r3, #1
 800997e:	701d      	strb	r5, [r3, #0]
 8009980:	0032      	movs	r2, r6
 8009982:	003b      	movs	r3, r7
 8009984:	900a      	str	r0, [sp, #40]	@ 0x28
 8009986:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009988:	f7f6 fd64 	bl	8000454 <__aeabi_dcmplt>
 800998c:	2800      	cmp	r0, #0
 800998e:	d16b      	bne.n	8009a68 <_dtoa_r+0x65c>
 8009990:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009994:	2000      	movs	r0, #0
 8009996:	4961      	ldr	r1, [pc, #388]	@ (8009b1c <_dtoa_r+0x710>)
 8009998:	f7f9 f8b0 	bl	8002afc <__aeabi_dsub>
 800999c:	0032      	movs	r2, r6
 800999e:	003b      	movs	r3, r7
 80099a0:	f7f6 fd58 	bl	8000454 <__aeabi_dcmplt>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d000      	beq.n	80099aa <_dtoa_r+0x59e>
 80099a8:	e0c6      	b.n	8009b38 <_dtoa_r+0x72c>
 80099aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	d100      	bne.n	80099b2 <_dtoa_r+0x5a6>
 80099b0:	e765      	b.n	800987e <_dtoa_r+0x472>
 80099b2:	2200      	movs	r2, #0
 80099b4:	0030      	movs	r0, r6
 80099b6:	0039      	movs	r1, r7
 80099b8:	4b59      	ldr	r3, [pc, #356]	@ (8009b20 <_dtoa_r+0x714>)
 80099ba:	f7f8 fdb9 	bl	8002530 <__aeabi_dmul>
 80099be:	2200      	movs	r2, #0
 80099c0:	0006      	movs	r6, r0
 80099c2:	000f      	movs	r7, r1
 80099c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099c8:	4b55      	ldr	r3, [pc, #340]	@ (8009b20 <_dtoa_r+0x714>)
 80099ca:	f7f8 fdb1 	bl	8002530 <__aeabi_dmul>
 80099ce:	9416      	str	r4, [sp, #88]	@ 0x58
 80099d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80099d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80099d4:	e7c3      	b.n	800995e <_dtoa_r+0x552>
 80099d6:	0030      	movs	r0, r6
 80099d8:	0039      	movs	r1, r7
 80099da:	f7f8 fda9 	bl	8002530 <__aeabi_dmul>
 80099de:	9d08      	ldr	r5, [sp, #32]
 80099e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80099e2:	002b      	movs	r3, r5
 80099e4:	4694      	mov	ip, r2
 80099e6:	9016      	str	r0, [sp, #88]	@ 0x58
 80099e8:	9117      	str	r1, [sp, #92]	@ 0x5c
 80099ea:	4463      	add	r3, ip
 80099ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80099ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099f2:	f7f9 fcaf 	bl	8003354 <__aeabi_d2iz>
 80099f6:	0004      	movs	r4, r0
 80099f8:	f7f9 fce8 	bl	80033cc <__aeabi_i2d>
 80099fc:	000b      	movs	r3, r1
 80099fe:	0002      	movs	r2, r0
 8009a00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a04:	f7f9 f87a 	bl	8002afc <__aeabi_dsub>
 8009a08:	3430      	adds	r4, #48	@ 0x30
 8009a0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a0c:	702c      	strb	r4, [r5, #0]
 8009a0e:	3501      	adds	r5, #1
 8009a10:	0006      	movs	r6, r0
 8009a12:	000f      	movs	r7, r1
 8009a14:	42ab      	cmp	r3, r5
 8009a16:	d12a      	bne.n	8009a6e <_dtoa_r+0x662>
 8009a18:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8009a1a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009a1c:	9b08      	ldr	r3, [sp, #32]
 8009a1e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009a20:	469c      	mov	ip, r3
 8009a22:	2200      	movs	r2, #0
 8009a24:	4b42      	ldr	r3, [pc, #264]	@ (8009b30 <_dtoa_r+0x724>)
 8009a26:	4464      	add	r4, ip
 8009a28:	f7f7 fd82 	bl	8001530 <__aeabi_dadd>
 8009a2c:	0002      	movs	r2, r0
 8009a2e:	000b      	movs	r3, r1
 8009a30:	0030      	movs	r0, r6
 8009a32:	0039      	movs	r1, r7
 8009a34:	f7f6 fd22 	bl	800047c <__aeabi_dcmpgt>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d000      	beq.n	8009a3e <_dtoa_r+0x632>
 8009a3c:	e07c      	b.n	8009b38 <_dtoa_r+0x72c>
 8009a3e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009a40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a42:	2000      	movs	r0, #0
 8009a44:	493a      	ldr	r1, [pc, #232]	@ (8009b30 <_dtoa_r+0x724>)
 8009a46:	f7f9 f859 	bl	8002afc <__aeabi_dsub>
 8009a4a:	0002      	movs	r2, r0
 8009a4c:	000b      	movs	r3, r1
 8009a4e:	0030      	movs	r0, r6
 8009a50:	0039      	movs	r1, r7
 8009a52:	f7f6 fcff 	bl	8000454 <__aeabi_dcmplt>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d100      	bne.n	8009a5c <_dtoa_r+0x650>
 8009a5a:	e710      	b.n	800987e <_dtoa_r+0x472>
 8009a5c:	0023      	movs	r3, r4
 8009a5e:	3c01      	subs	r4, #1
 8009a60:	7822      	ldrb	r2, [r4, #0]
 8009a62:	2a30      	cmp	r2, #48	@ 0x30
 8009a64:	d0fa      	beq.n	8009a5c <_dtoa_r+0x650>
 8009a66:	001c      	movs	r4, r3
 8009a68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a6a:	9304      	str	r3, [sp, #16]
 8009a6c:	e042      	b.n	8009af4 <_dtoa_r+0x6e8>
 8009a6e:	2200      	movs	r2, #0
 8009a70:	4b2b      	ldr	r3, [pc, #172]	@ (8009b20 <_dtoa_r+0x714>)
 8009a72:	f7f8 fd5d 	bl	8002530 <__aeabi_dmul>
 8009a76:	900a      	str	r0, [sp, #40]	@ 0x28
 8009a78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009a7a:	e7b8      	b.n	80099ee <_dtoa_r+0x5e2>
 8009a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a7e:	9d08      	ldr	r5, [sp, #32]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	195b      	adds	r3, r3, r5
 8009a84:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009a86:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a8a:	9a06      	ldr	r2, [sp, #24]
 8009a8c:	9b07      	ldr	r3, [sp, #28]
 8009a8e:	0030      	movs	r0, r6
 8009a90:	0039      	movs	r1, r7
 8009a92:	f7f8 f913 	bl	8001cbc <__aeabi_ddiv>
 8009a96:	f7f9 fc5d 	bl	8003354 <__aeabi_d2iz>
 8009a9a:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a9c:	f7f9 fc96 	bl	80033cc <__aeabi_i2d>
 8009aa0:	9a06      	ldr	r2, [sp, #24]
 8009aa2:	9b07      	ldr	r3, [sp, #28]
 8009aa4:	f7f8 fd44 	bl	8002530 <__aeabi_dmul>
 8009aa8:	0002      	movs	r2, r0
 8009aaa:	000b      	movs	r3, r1
 8009aac:	0030      	movs	r0, r6
 8009aae:	0039      	movs	r1, r7
 8009ab0:	f7f9 f824 	bl	8002afc <__aeabi_dsub>
 8009ab4:	002b      	movs	r3, r5
 8009ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ab8:	3501      	adds	r5, #1
 8009aba:	3230      	adds	r2, #48	@ 0x30
 8009abc:	701a      	strb	r2, [r3, #0]
 8009abe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ac0:	002c      	movs	r4, r5
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d14b      	bne.n	8009b5e <_dtoa_r+0x752>
 8009ac6:	0002      	movs	r2, r0
 8009ac8:	000b      	movs	r3, r1
 8009aca:	f7f7 fd31 	bl	8001530 <__aeabi_dadd>
 8009ace:	9a06      	ldr	r2, [sp, #24]
 8009ad0:	9b07      	ldr	r3, [sp, #28]
 8009ad2:	0006      	movs	r6, r0
 8009ad4:	000f      	movs	r7, r1
 8009ad6:	f7f6 fcd1 	bl	800047c <__aeabi_dcmpgt>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d12a      	bne.n	8009b34 <_dtoa_r+0x728>
 8009ade:	9a06      	ldr	r2, [sp, #24]
 8009ae0:	9b07      	ldr	r3, [sp, #28]
 8009ae2:	0030      	movs	r0, r6
 8009ae4:	0039      	movs	r1, r7
 8009ae6:	f7f6 fcaf 	bl	8000448 <__aeabi_dcmpeq>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d002      	beq.n	8009af4 <_dtoa_r+0x6e8>
 8009aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af0:	07dd      	lsls	r5, r3, #31
 8009af2:	d41f      	bmi.n	8009b34 <_dtoa_r+0x728>
 8009af4:	9905      	ldr	r1, [sp, #20]
 8009af6:	9803      	ldr	r0, [sp, #12]
 8009af8:	f000 fbc2 	bl	800a280 <_Bfree>
 8009afc:	2300      	movs	r3, #0
 8009afe:	7023      	strb	r3, [r4, #0]
 8009b00:	9b04      	ldr	r3, [sp, #16]
 8009b02:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009b04:	3301      	adds	r3, #1
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d100      	bne.n	8009b10 <_dtoa_r+0x704>
 8009b0e:	e4c7      	b.n	80094a0 <_dtoa_r+0x94>
 8009b10:	601c      	str	r4, [r3, #0]
 8009b12:	e4c5      	b.n	80094a0 <_dtoa_r+0x94>
 8009b14:	0800d038 	.word	0x0800d038
 8009b18:	0800d010 	.word	0x0800d010
 8009b1c:	3ff00000 	.word	0x3ff00000
 8009b20:	40240000 	.word	0x40240000
 8009b24:	401c0000 	.word	0x401c0000
 8009b28:	fcc00000 	.word	0xfcc00000
 8009b2c:	40140000 	.word	0x40140000
 8009b30:	3fe00000 	.word	0x3fe00000
 8009b34:	9b04      	ldr	r3, [sp, #16]
 8009b36:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b38:	0023      	movs	r3, r4
 8009b3a:	001c      	movs	r4, r3
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	781a      	ldrb	r2, [r3, #0]
 8009b40:	2a39      	cmp	r2, #57	@ 0x39
 8009b42:	d108      	bne.n	8009b56 <_dtoa_r+0x74a>
 8009b44:	9a08      	ldr	r2, [sp, #32]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d1f7      	bne.n	8009b3a <_dtoa_r+0x72e>
 8009b4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009b4c:	9908      	ldr	r1, [sp, #32]
 8009b4e:	3201      	adds	r2, #1
 8009b50:	920c      	str	r2, [sp, #48]	@ 0x30
 8009b52:	2230      	movs	r2, #48	@ 0x30
 8009b54:	700a      	strb	r2, [r1, #0]
 8009b56:	781a      	ldrb	r2, [r3, #0]
 8009b58:	3201      	adds	r2, #1
 8009b5a:	701a      	strb	r2, [r3, #0]
 8009b5c:	e784      	b.n	8009a68 <_dtoa_r+0x65c>
 8009b5e:	2200      	movs	r2, #0
 8009b60:	4bc6      	ldr	r3, [pc, #792]	@ (8009e7c <_dtoa_r+0xa70>)
 8009b62:	f7f8 fce5 	bl	8002530 <__aeabi_dmul>
 8009b66:	2200      	movs	r2, #0
 8009b68:	2300      	movs	r3, #0
 8009b6a:	0006      	movs	r6, r0
 8009b6c:	000f      	movs	r7, r1
 8009b6e:	f7f6 fc6b 	bl	8000448 <__aeabi_dcmpeq>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d089      	beq.n	8009a8a <_dtoa_r+0x67e>
 8009b76:	e7bd      	b.n	8009af4 <_dtoa_r+0x6e8>
 8009b78:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009b7a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009b7c:	9c06      	ldr	r4, [sp, #24]
 8009b7e:	2f00      	cmp	r7, #0
 8009b80:	d014      	beq.n	8009bac <_dtoa_r+0x7a0>
 8009b82:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009b84:	2a01      	cmp	r2, #1
 8009b86:	dd00      	ble.n	8009b8a <_dtoa_r+0x77e>
 8009b88:	e0e4      	b.n	8009d54 <_dtoa_r+0x948>
 8009b8a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009b8c:	2a00      	cmp	r2, #0
 8009b8e:	d100      	bne.n	8009b92 <_dtoa_r+0x786>
 8009b90:	e0da      	b.n	8009d48 <_dtoa_r+0x93c>
 8009b92:	4abb      	ldr	r2, [pc, #748]	@ (8009e80 <_dtoa_r+0xa74>)
 8009b94:	189b      	adds	r3, r3, r2
 8009b96:	9a06      	ldr	r2, [sp, #24]
 8009b98:	2101      	movs	r1, #1
 8009b9a:	18d2      	adds	r2, r2, r3
 8009b9c:	9206      	str	r2, [sp, #24]
 8009b9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ba0:	9803      	ldr	r0, [sp, #12]
 8009ba2:	18d3      	adds	r3, r2, r3
 8009ba4:	930d      	str	r3, [sp, #52]	@ 0x34
 8009ba6:	f000 fc23 	bl	800a3f0 <__i2b>
 8009baa:	0007      	movs	r7, r0
 8009bac:	2c00      	cmp	r4, #0
 8009bae:	d00e      	beq.n	8009bce <_dtoa_r+0x7c2>
 8009bb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dd0b      	ble.n	8009bce <_dtoa_r+0x7c2>
 8009bb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bb8:	0023      	movs	r3, r4
 8009bba:	4294      	cmp	r4, r2
 8009bbc:	dd00      	ble.n	8009bc0 <_dtoa_r+0x7b4>
 8009bbe:	0013      	movs	r3, r2
 8009bc0:	9a06      	ldr	r2, [sp, #24]
 8009bc2:	1ae4      	subs	r4, r4, r3
 8009bc4:	1ad2      	subs	r2, r2, r3
 8009bc6:	9206      	str	r2, [sp, #24]
 8009bc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	930d      	str	r3, [sp, #52]	@ 0x34
 8009bce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d021      	beq.n	8009c18 <_dtoa_r+0x80c>
 8009bd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d100      	bne.n	8009bdc <_dtoa_r+0x7d0>
 8009bda:	e0d3      	b.n	8009d84 <_dtoa_r+0x978>
 8009bdc:	9e05      	ldr	r6, [sp, #20]
 8009bde:	2d00      	cmp	r5, #0
 8009be0:	d014      	beq.n	8009c0c <_dtoa_r+0x800>
 8009be2:	0039      	movs	r1, r7
 8009be4:	002a      	movs	r2, r5
 8009be6:	9803      	ldr	r0, [sp, #12]
 8009be8:	f000 fcc4 	bl	800a574 <__pow5mult>
 8009bec:	9a05      	ldr	r2, [sp, #20]
 8009bee:	0001      	movs	r1, r0
 8009bf0:	0007      	movs	r7, r0
 8009bf2:	9803      	ldr	r0, [sp, #12]
 8009bf4:	f000 fc14 	bl	800a420 <__multiply>
 8009bf8:	0006      	movs	r6, r0
 8009bfa:	9905      	ldr	r1, [sp, #20]
 8009bfc:	9803      	ldr	r0, [sp, #12]
 8009bfe:	f000 fb3f 	bl	800a280 <_Bfree>
 8009c02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c04:	9605      	str	r6, [sp, #20]
 8009c06:	1b5b      	subs	r3, r3, r5
 8009c08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c0a:	d005      	beq.n	8009c18 <_dtoa_r+0x80c>
 8009c0c:	0031      	movs	r1, r6
 8009c0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c10:	9803      	ldr	r0, [sp, #12]
 8009c12:	f000 fcaf 	bl	800a574 <__pow5mult>
 8009c16:	9005      	str	r0, [sp, #20]
 8009c18:	2101      	movs	r1, #1
 8009c1a:	9803      	ldr	r0, [sp, #12]
 8009c1c:	f000 fbe8 	bl	800a3f0 <__i2b>
 8009c20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c22:	0006      	movs	r6, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d100      	bne.n	8009c2a <_dtoa_r+0x81e>
 8009c28:	e1bc      	b.n	8009fa4 <_dtoa_r+0xb98>
 8009c2a:	001a      	movs	r2, r3
 8009c2c:	0001      	movs	r1, r0
 8009c2e:	9803      	ldr	r0, [sp, #12]
 8009c30:	f000 fca0 	bl	800a574 <__pow5mult>
 8009c34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009c36:	0006      	movs	r6, r0
 8009c38:	2500      	movs	r5, #0
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	dc16      	bgt.n	8009c6c <_dtoa_r+0x860>
 8009c3e:	2500      	movs	r5, #0
 8009c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c42:	42ab      	cmp	r3, r5
 8009c44:	d10e      	bne.n	8009c64 <_dtoa_r+0x858>
 8009c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c48:	031b      	lsls	r3, r3, #12
 8009c4a:	42ab      	cmp	r3, r5
 8009c4c:	d10a      	bne.n	8009c64 <_dtoa_r+0x858>
 8009c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8009e84 <_dtoa_r+0xa78>)
 8009c50:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c52:	4213      	tst	r3, r2
 8009c54:	d006      	beq.n	8009c64 <_dtoa_r+0x858>
 8009c56:	9b06      	ldr	r3, [sp, #24]
 8009c58:	3501      	adds	r5, #1
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	9306      	str	r3, [sp, #24]
 8009c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c60:	3301      	adds	r3, #1
 8009c62:	930d      	str	r3, [sp, #52]	@ 0x34
 8009c64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c66:	2001      	movs	r0, #1
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d008      	beq.n	8009c7e <_dtoa_r+0x872>
 8009c6c:	6933      	ldr	r3, [r6, #16]
 8009c6e:	3303      	adds	r3, #3
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	18f3      	adds	r3, r6, r3
 8009c74:	6858      	ldr	r0, [r3, #4]
 8009c76:	f000 fb6b 	bl	800a350 <__hi0bits>
 8009c7a:	2320      	movs	r3, #32
 8009c7c:	1a18      	subs	r0, r3, r0
 8009c7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c80:	1818      	adds	r0, r3, r0
 8009c82:	0002      	movs	r2, r0
 8009c84:	231f      	movs	r3, #31
 8009c86:	401a      	ands	r2, r3
 8009c88:	4218      	tst	r0, r3
 8009c8a:	d100      	bne.n	8009c8e <_dtoa_r+0x882>
 8009c8c:	e081      	b.n	8009d92 <_dtoa_r+0x986>
 8009c8e:	3301      	adds	r3, #1
 8009c90:	1a9b      	subs	r3, r3, r2
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	dd79      	ble.n	8009d8a <_dtoa_r+0x97e>
 8009c96:	231c      	movs	r3, #28
 8009c98:	1a9b      	subs	r3, r3, r2
 8009c9a:	9a06      	ldr	r2, [sp, #24]
 8009c9c:	18e4      	adds	r4, r4, r3
 8009c9e:	18d2      	adds	r2, r2, r3
 8009ca0:	9206      	str	r2, [sp, #24]
 8009ca2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ca4:	18d3      	adds	r3, r2, r3
 8009ca6:	930d      	str	r3, [sp, #52]	@ 0x34
 8009ca8:	9b06      	ldr	r3, [sp, #24]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dd05      	ble.n	8009cba <_dtoa_r+0x8ae>
 8009cae:	001a      	movs	r2, r3
 8009cb0:	9905      	ldr	r1, [sp, #20]
 8009cb2:	9803      	ldr	r0, [sp, #12]
 8009cb4:	f000 fcba 	bl	800a62c <__lshift>
 8009cb8:	9005      	str	r0, [sp, #20]
 8009cba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	dd05      	ble.n	8009ccc <_dtoa_r+0x8c0>
 8009cc0:	0031      	movs	r1, r6
 8009cc2:	001a      	movs	r2, r3
 8009cc4:	9803      	ldr	r0, [sp, #12]
 8009cc6:	f000 fcb1 	bl	800a62c <__lshift>
 8009cca:	0006      	movs	r6, r0
 8009ccc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d061      	beq.n	8009d96 <_dtoa_r+0x98a>
 8009cd2:	0031      	movs	r1, r6
 8009cd4:	9805      	ldr	r0, [sp, #20]
 8009cd6:	f000 fd15 	bl	800a704 <__mcmp>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	da5b      	bge.n	8009d96 <_dtoa_r+0x98a>
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	220a      	movs	r2, #10
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ce6:	9905      	ldr	r1, [sp, #20]
 8009ce8:	2300      	movs	r3, #0
 8009cea:	9803      	ldr	r0, [sp, #12]
 8009cec:	f000 faec 	bl	800a2c8 <__multadd>
 8009cf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cf2:	9005      	str	r0, [sp, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d100      	bne.n	8009cfa <_dtoa_r+0x8ee>
 8009cf8:	e15b      	b.n	8009fb2 <_dtoa_r+0xba6>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	0039      	movs	r1, r7
 8009cfe:	220a      	movs	r2, #10
 8009d00:	9803      	ldr	r0, [sp, #12]
 8009d02:	f000 fae1 	bl	800a2c8 <__multadd>
 8009d06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d08:	0007      	movs	r7, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dc4d      	bgt.n	8009daa <_dtoa_r+0x99e>
 8009d0e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	dd46      	ble.n	8009da2 <_dtoa_r+0x996>
 8009d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d000      	beq.n	8009d1c <_dtoa_r+0x910>
 8009d1a:	e5db      	b.n	80098d4 <_dtoa_r+0x4c8>
 8009d1c:	0031      	movs	r1, r6
 8009d1e:	2205      	movs	r2, #5
 8009d20:	9803      	ldr	r0, [sp, #12]
 8009d22:	f000 fad1 	bl	800a2c8 <__multadd>
 8009d26:	0006      	movs	r6, r0
 8009d28:	0001      	movs	r1, r0
 8009d2a:	9805      	ldr	r0, [sp, #20]
 8009d2c:	f000 fcea 	bl	800a704 <__mcmp>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	dc00      	bgt.n	8009d36 <_dtoa_r+0x92a>
 8009d34:	e5ce      	b.n	80098d4 <_dtoa_r+0x4c8>
 8009d36:	9b08      	ldr	r3, [sp, #32]
 8009d38:	9a08      	ldr	r2, [sp, #32]
 8009d3a:	1c5c      	adds	r4, r3, #1
 8009d3c:	2331      	movs	r3, #49	@ 0x31
 8009d3e:	7013      	strb	r3, [r2, #0]
 8009d40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d42:	3301      	adds	r3, #1
 8009d44:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d46:	e5c9      	b.n	80098dc <_dtoa_r+0x4d0>
 8009d48:	2336      	movs	r3, #54	@ 0x36
 8009d4a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d4c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009d4e:	1a9b      	subs	r3, r3, r2
 8009d50:	9c06      	ldr	r4, [sp, #24]
 8009d52:	e720      	b.n	8009b96 <_dtoa_r+0x78a>
 8009d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d56:	1e5d      	subs	r5, r3, #1
 8009d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d5a:	42ab      	cmp	r3, r5
 8009d5c:	db08      	blt.n	8009d70 <_dtoa_r+0x964>
 8009d5e:	1b5d      	subs	r5, r3, r5
 8009d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	daf4      	bge.n	8009d50 <_dtoa_r+0x944>
 8009d66:	9b06      	ldr	r3, [sp, #24]
 8009d68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d6a:	1a9c      	subs	r4, r3, r2
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	e712      	b.n	8009b96 <_dtoa_r+0x78a>
 8009d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d72:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009d74:	1aeb      	subs	r3, r5, r3
 8009d76:	18d3      	adds	r3, r2, r3
 8009d78:	9314      	str	r3, [sp, #80]	@ 0x50
 8009d7a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009d7c:	9c06      	ldr	r4, [sp, #24]
 8009d7e:	2500      	movs	r5, #0
 8009d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d82:	e708      	b.n	8009b96 <_dtoa_r+0x78a>
 8009d84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d86:	9905      	ldr	r1, [sp, #20]
 8009d88:	e742      	b.n	8009c10 <_dtoa_r+0x804>
 8009d8a:	2b04      	cmp	r3, #4
 8009d8c:	d08c      	beq.n	8009ca8 <_dtoa_r+0x89c>
 8009d8e:	331c      	adds	r3, #28
 8009d90:	e783      	b.n	8009c9a <_dtoa_r+0x88e>
 8009d92:	0013      	movs	r3, r2
 8009d94:	e7fb      	b.n	8009d8e <_dtoa_r+0x982>
 8009d96:	9b04      	ldr	r3, [sp, #16]
 8009d98:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	ddb5      	ble.n	8009d0e <_dtoa_r+0x902>
 8009da2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d100      	bne.n	8009daa <_dtoa_r+0x99e>
 8009da8:	e107      	b.n	8009fba <_dtoa_r+0xbae>
 8009daa:	2c00      	cmp	r4, #0
 8009dac:	dd05      	ble.n	8009dba <_dtoa_r+0x9ae>
 8009dae:	0039      	movs	r1, r7
 8009db0:	0022      	movs	r2, r4
 8009db2:	9803      	ldr	r0, [sp, #12]
 8009db4:	f000 fc3a 	bl	800a62c <__lshift>
 8009db8:	0007      	movs	r7, r0
 8009dba:	9704      	str	r7, [sp, #16]
 8009dbc:	2d00      	cmp	r5, #0
 8009dbe:	d020      	beq.n	8009e02 <_dtoa_r+0x9f6>
 8009dc0:	6879      	ldr	r1, [r7, #4]
 8009dc2:	9803      	ldr	r0, [sp, #12]
 8009dc4:	f000 fa18 	bl	800a1f8 <_Balloc>
 8009dc8:	1e04      	subs	r4, r0, #0
 8009dca:	d10c      	bne.n	8009de6 <_dtoa_r+0x9da>
 8009dcc:	0022      	movs	r2, r4
 8009dce:	4b2e      	ldr	r3, [pc, #184]	@ (8009e88 <_dtoa_r+0xa7c>)
 8009dd0:	482e      	ldr	r0, [pc, #184]	@ (8009e8c <_dtoa_r+0xa80>)
 8009dd2:	492f      	ldr	r1, [pc, #188]	@ (8009e90 <_dtoa_r+0xa84>)
 8009dd4:	f7ff fb2f 	bl	8009436 <_dtoa_r+0x2a>
 8009dd8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009dda:	0037      	movs	r7, r6
 8009ddc:	e7ab      	b.n	8009d36 <_dtoa_r+0x92a>
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009de2:	930c      	str	r3, [sp, #48]	@ 0x30
 8009de4:	e7f9      	b.n	8009dda <_dtoa_r+0x9ce>
 8009de6:	0039      	movs	r1, r7
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	310c      	adds	r1, #12
 8009dec:	3202      	adds	r2, #2
 8009dee:	0092      	lsls	r2, r2, #2
 8009df0:	300c      	adds	r0, #12
 8009df2:	f001 f871 	bl	800aed8 <memcpy>
 8009df6:	2201      	movs	r2, #1
 8009df8:	0021      	movs	r1, r4
 8009dfa:	9803      	ldr	r0, [sp, #12]
 8009dfc:	f000 fc16 	bl	800a62c <__lshift>
 8009e00:	9004      	str	r0, [sp, #16]
 8009e02:	9b08      	ldr	r3, [sp, #32]
 8009e04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e06:	9306      	str	r3, [sp, #24]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	189b      	adds	r3, r3, r2
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e12:	4013      	ands	r3, r2
 8009e14:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e16:	0031      	movs	r1, r6
 8009e18:	9805      	ldr	r0, [sp, #20]
 8009e1a:	f7ff fa71 	bl	8009300 <quorem>
 8009e1e:	0039      	movs	r1, r7
 8009e20:	0005      	movs	r5, r0
 8009e22:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e24:	9805      	ldr	r0, [sp, #20]
 8009e26:	f000 fc6d 	bl	800a704 <__mcmp>
 8009e2a:	9a04      	ldr	r2, [sp, #16]
 8009e2c:	900d      	str	r0, [sp, #52]	@ 0x34
 8009e2e:	0031      	movs	r1, r6
 8009e30:	9803      	ldr	r0, [sp, #12]
 8009e32:	f000 fc83 	bl	800a73c <__mdiff>
 8009e36:	2201      	movs	r2, #1
 8009e38:	68c3      	ldr	r3, [r0, #12]
 8009e3a:	0004      	movs	r4, r0
 8009e3c:	3530      	adds	r5, #48	@ 0x30
 8009e3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d104      	bne.n	8009e4e <_dtoa_r+0xa42>
 8009e44:	0001      	movs	r1, r0
 8009e46:	9805      	ldr	r0, [sp, #20]
 8009e48:	f000 fc5c 	bl	800a704 <__mcmp>
 8009e4c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009e4e:	0021      	movs	r1, r4
 8009e50:	9803      	ldr	r0, [sp, #12]
 8009e52:	f000 fa15 	bl	800a280 <_Bfree>
 8009e56:	9b06      	ldr	r3, [sp, #24]
 8009e58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009e5a:	1c5c      	adds	r4, r3, #1
 8009e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e62:	4313      	orrs	r3, r2
 8009e64:	d116      	bne.n	8009e94 <_dtoa_r+0xa88>
 8009e66:	2d39      	cmp	r5, #57	@ 0x39
 8009e68:	d02f      	beq.n	8009eca <_dtoa_r+0xabe>
 8009e6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	dd01      	ble.n	8009e74 <_dtoa_r+0xa68>
 8009e70:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009e72:	3531      	adds	r5, #49	@ 0x31
 8009e74:	9b06      	ldr	r3, [sp, #24]
 8009e76:	701d      	strb	r5, [r3, #0]
 8009e78:	e532      	b.n	80098e0 <_dtoa_r+0x4d4>
 8009e7a:	46c0      	nop			@ (mov r8, r8)
 8009e7c:	40240000 	.word	0x40240000
 8009e80:	00000433 	.word	0x00000433
 8009e84:	7ff00000 	.word	0x7ff00000
 8009e88:	0800cf40 	.word	0x0800cf40
 8009e8c:	0800cee8 	.word	0x0800cee8
 8009e90:	000002ef 	.word	0x000002ef
 8009e94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	db04      	blt.n	8009ea4 <_dtoa_r+0xa98>
 8009e9a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	d11e      	bne.n	8009ee2 <_dtoa_r+0xad6>
 8009ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	dde4      	ble.n	8009e74 <_dtoa_r+0xa68>
 8009eaa:	9905      	ldr	r1, [sp, #20]
 8009eac:	2201      	movs	r2, #1
 8009eae:	9803      	ldr	r0, [sp, #12]
 8009eb0:	f000 fbbc 	bl	800a62c <__lshift>
 8009eb4:	0031      	movs	r1, r6
 8009eb6:	9005      	str	r0, [sp, #20]
 8009eb8:	f000 fc24 	bl	800a704 <__mcmp>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	dc02      	bgt.n	8009ec6 <_dtoa_r+0xaba>
 8009ec0:	d1d8      	bne.n	8009e74 <_dtoa_r+0xa68>
 8009ec2:	07eb      	lsls	r3, r5, #31
 8009ec4:	d5d6      	bpl.n	8009e74 <_dtoa_r+0xa68>
 8009ec6:	2d39      	cmp	r5, #57	@ 0x39
 8009ec8:	d1d2      	bne.n	8009e70 <_dtoa_r+0xa64>
 8009eca:	2339      	movs	r3, #57	@ 0x39
 8009ecc:	9a06      	ldr	r2, [sp, #24]
 8009ece:	7013      	strb	r3, [r2, #0]
 8009ed0:	0023      	movs	r3, r4
 8009ed2:	001c      	movs	r4, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	781a      	ldrb	r2, [r3, #0]
 8009ed8:	2a39      	cmp	r2, #57	@ 0x39
 8009eda:	d050      	beq.n	8009f7e <_dtoa_r+0xb72>
 8009edc:	3201      	adds	r2, #1
 8009ede:	701a      	strb	r2, [r3, #0]
 8009ee0:	e4fe      	b.n	80098e0 <_dtoa_r+0x4d4>
 8009ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	dd03      	ble.n	8009ef0 <_dtoa_r+0xae4>
 8009ee8:	2d39      	cmp	r5, #57	@ 0x39
 8009eea:	d0ee      	beq.n	8009eca <_dtoa_r+0xabe>
 8009eec:	3501      	adds	r5, #1
 8009eee:	e7c1      	b.n	8009e74 <_dtoa_r+0xa68>
 8009ef0:	9b06      	ldr	r3, [sp, #24]
 8009ef2:	9a06      	ldr	r2, [sp, #24]
 8009ef4:	701d      	strb	r5, [r3, #0]
 8009ef6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d02b      	beq.n	8009f54 <_dtoa_r+0xb48>
 8009efc:	2300      	movs	r3, #0
 8009efe:	220a      	movs	r2, #10
 8009f00:	9905      	ldr	r1, [sp, #20]
 8009f02:	9803      	ldr	r0, [sp, #12]
 8009f04:	f000 f9e0 	bl	800a2c8 <__multadd>
 8009f08:	9b04      	ldr	r3, [sp, #16]
 8009f0a:	9005      	str	r0, [sp, #20]
 8009f0c:	429f      	cmp	r7, r3
 8009f0e:	d109      	bne.n	8009f24 <_dtoa_r+0xb18>
 8009f10:	0039      	movs	r1, r7
 8009f12:	2300      	movs	r3, #0
 8009f14:	220a      	movs	r2, #10
 8009f16:	9803      	ldr	r0, [sp, #12]
 8009f18:	f000 f9d6 	bl	800a2c8 <__multadd>
 8009f1c:	0007      	movs	r7, r0
 8009f1e:	9004      	str	r0, [sp, #16]
 8009f20:	9406      	str	r4, [sp, #24]
 8009f22:	e778      	b.n	8009e16 <_dtoa_r+0xa0a>
 8009f24:	0039      	movs	r1, r7
 8009f26:	2300      	movs	r3, #0
 8009f28:	220a      	movs	r2, #10
 8009f2a:	9803      	ldr	r0, [sp, #12]
 8009f2c:	f000 f9cc 	bl	800a2c8 <__multadd>
 8009f30:	2300      	movs	r3, #0
 8009f32:	0007      	movs	r7, r0
 8009f34:	220a      	movs	r2, #10
 8009f36:	9904      	ldr	r1, [sp, #16]
 8009f38:	9803      	ldr	r0, [sp, #12]
 8009f3a:	f000 f9c5 	bl	800a2c8 <__multadd>
 8009f3e:	9004      	str	r0, [sp, #16]
 8009f40:	e7ee      	b.n	8009f20 <_dtoa_r+0xb14>
 8009f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f44:	2401      	movs	r4, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	dd00      	ble.n	8009f4c <_dtoa_r+0xb40>
 8009f4a:	001c      	movs	r4, r3
 8009f4c:	9704      	str	r7, [sp, #16]
 8009f4e:	2700      	movs	r7, #0
 8009f50:	9b08      	ldr	r3, [sp, #32]
 8009f52:	191c      	adds	r4, r3, r4
 8009f54:	9905      	ldr	r1, [sp, #20]
 8009f56:	2201      	movs	r2, #1
 8009f58:	9803      	ldr	r0, [sp, #12]
 8009f5a:	f000 fb67 	bl	800a62c <__lshift>
 8009f5e:	0031      	movs	r1, r6
 8009f60:	9005      	str	r0, [sp, #20]
 8009f62:	f000 fbcf 	bl	800a704 <__mcmp>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	dcb2      	bgt.n	8009ed0 <_dtoa_r+0xac4>
 8009f6a:	d101      	bne.n	8009f70 <_dtoa_r+0xb64>
 8009f6c:	07ed      	lsls	r5, r5, #31
 8009f6e:	d4af      	bmi.n	8009ed0 <_dtoa_r+0xac4>
 8009f70:	0023      	movs	r3, r4
 8009f72:	001c      	movs	r4, r3
 8009f74:	3b01      	subs	r3, #1
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	2a30      	cmp	r2, #48	@ 0x30
 8009f7a:	d0fa      	beq.n	8009f72 <_dtoa_r+0xb66>
 8009f7c:	e4b0      	b.n	80098e0 <_dtoa_r+0x4d4>
 8009f7e:	9a08      	ldr	r2, [sp, #32]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d1a6      	bne.n	8009ed2 <_dtoa_r+0xac6>
 8009f84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f86:	3301      	adds	r3, #1
 8009f88:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f8a:	2331      	movs	r3, #49	@ 0x31
 8009f8c:	7013      	strb	r3, [r2, #0]
 8009f8e:	e4a7      	b.n	80098e0 <_dtoa_r+0x4d4>
 8009f90:	4b14      	ldr	r3, [pc, #80]	@ (8009fe4 <_dtoa_r+0xbd8>)
 8009f92:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009f94:	9308      	str	r3, [sp, #32]
 8009f96:	4b14      	ldr	r3, [pc, #80]	@ (8009fe8 <_dtoa_r+0xbdc>)
 8009f98:	2a00      	cmp	r2, #0
 8009f9a:	d001      	beq.n	8009fa0 <_dtoa_r+0xb94>
 8009f9c:	f7ff fa7e 	bl	800949c <_dtoa_r+0x90>
 8009fa0:	f7ff fa7e 	bl	80094a0 <_dtoa_r+0x94>
 8009fa4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	dc00      	bgt.n	8009fac <_dtoa_r+0xba0>
 8009faa:	e648      	b.n	8009c3e <_dtoa_r+0x832>
 8009fac:	2001      	movs	r0, #1
 8009fae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009fb0:	e665      	b.n	8009c7e <_dtoa_r+0x872>
 8009fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	dc00      	bgt.n	8009fba <_dtoa_r+0xbae>
 8009fb8:	e6a9      	b.n	8009d0e <_dtoa_r+0x902>
 8009fba:	2400      	movs	r4, #0
 8009fbc:	0031      	movs	r1, r6
 8009fbe:	9805      	ldr	r0, [sp, #20]
 8009fc0:	f7ff f99e 	bl	8009300 <quorem>
 8009fc4:	9b08      	ldr	r3, [sp, #32]
 8009fc6:	3030      	adds	r0, #48	@ 0x30
 8009fc8:	5518      	strb	r0, [r3, r4]
 8009fca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fcc:	3401      	adds	r4, #1
 8009fce:	0005      	movs	r5, r0
 8009fd0:	42a3      	cmp	r3, r4
 8009fd2:	ddb6      	ble.n	8009f42 <_dtoa_r+0xb36>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	220a      	movs	r2, #10
 8009fd8:	9905      	ldr	r1, [sp, #20]
 8009fda:	9803      	ldr	r0, [sp, #12]
 8009fdc:	f000 f974 	bl	800a2c8 <__multadd>
 8009fe0:	9005      	str	r0, [sp, #20]
 8009fe2:	e7eb      	b.n	8009fbc <_dtoa_r+0xbb0>
 8009fe4:	0800cec4 	.word	0x0800cec4
 8009fe8:	0800cecc 	.word	0x0800cecc

08009fec <_free_r>:
 8009fec:	b570      	push	{r4, r5, r6, lr}
 8009fee:	0005      	movs	r5, r0
 8009ff0:	1e0c      	subs	r4, r1, #0
 8009ff2:	d010      	beq.n	800a016 <_free_r+0x2a>
 8009ff4:	3c04      	subs	r4, #4
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	da00      	bge.n	8009ffe <_free_r+0x12>
 8009ffc:	18e4      	adds	r4, r4, r3
 8009ffe:	0028      	movs	r0, r5
 800a000:	f000 f8ea 	bl	800a1d8 <__malloc_lock>
 800a004:	4a1d      	ldr	r2, [pc, #116]	@ (800a07c <_free_r+0x90>)
 800a006:	6813      	ldr	r3, [r2, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d105      	bne.n	800a018 <_free_r+0x2c>
 800a00c:	6063      	str	r3, [r4, #4]
 800a00e:	6014      	str	r4, [r2, #0]
 800a010:	0028      	movs	r0, r5
 800a012:	f000 f8e9 	bl	800a1e8 <__malloc_unlock>
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	42a3      	cmp	r3, r4
 800a01a:	d908      	bls.n	800a02e <_free_r+0x42>
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	1821      	adds	r1, r4, r0
 800a020:	428b      	cmp	r3, r1
 800a022:	d1f3      	bne.n	800a00c <_free_r+0x20>
 800a024:	6819      	ldr	r1, [r3, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	1809      	adds	r1, r1, r0
 800a02a:	6021      	str	r1, [r4, #0]
 800a02c:	e7ee      	b.n	800a00c <_free_r+0x20>
 800a02e:	001a      	movs	r2, r3
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <_free_r+0x4e>
 800a036:	42a3      	cmp	r3, r4
 800a038:	d9f9      	bls.n	800a02e <_free_r+0x42>
 800a03a:	6811      	ldr	r1, [r2, #0]
 800a03c:	1850      	adds	r0, r2, r1
 800a03e:	42a0      	cmp	r0, r4
 800a040:	d10b      	bne.n	800a05a <_free_r+0x6e>
 800a042:	6820      	ldr	r0, [r4, #0]
 800a044:	1809      	adds	r1, r1, r0
 800a046:	1850      	adds	r0, r2, r1
 800a048:	6011      	str	r1, [r2, #0]
 800a04a:	4283      	cmp	r3, r0
 800a04c:	d1e0      	bne.n	800a010 <_free_r+0x24>
 800a04e:	6818      	ldr	r0, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	1841      	adds	r1, r0, r1
 800a054:	6011      	str	r1, [r2, #0]
 800a056:	6053      	str	r3, [r2, #4]
 800a058:	e7da      	b.n	800a010 <_free_r+0x24>
 800a05a:	42a0      	cmp	r0, r4
 800a05c:	d902      	bls.n	800a064 <_free_r+0x78>
 800a05e:	230c      	movs	r3, #12
 800a060:	602b      	str	r3, [r5, #0]
 800a062:	e7d5      	b.n	800a010 <_free_r+0x24>
 800a064:	6820      	ldr	r0, [r4, #0]
 800a066:	1821      	adds	r1, r4, r0
 800a068:	428b      	cmp	r3, r1
 800a06a:	d103      	bne.n	800a074 <_free_r+0x88>
 800a06c:	6819      	ldr	r1, [r3, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	1809      	adds	r1, r1, r0
 800a072:	6021      	str	r1, [r4, #0]
 800a074:	6063      	str	r3, [r4, #4]
 800a076:	6054      	str	r4, [r2, #4]
 800a078:	e7ca      	b.n	800a010 <_free_r+0x24>
 800a07a:	46c0      	nop			@ (mov r8, r8)
 800a07c:	20000da8 	.word	0x20000da8

0800a080 <malloc>:
 800a080:	b510      	push	{r4, lr}
 800a082:	4b03      	ldr	r3, [pc, #12]	@ (800a090 <malloc+0x10>)
 800a084:	0001      	movs	r1, r0
 800a086:	6818      	ldr	r0, [r3, #0]
 800a088:	f000 f826 	bl	800a0d8 <_malloc_r>
 800a08c:	bd10      	pop	{r4, pc}
 800a08e:	46c0      	nop			@ (mov r8, r8)
 800a090:	2000001c 	.word	0x2000001c

0800a094 <sbrk_aligned>:
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	4e0f      	ldr	r6, [pc, #60]	@ (800a0d4 <sbrk_aligned+0x40>)
 800a098:	000d      	movs	r5, r1
 800a09a:	6831      	ldr	r1, [r6, #0]
 800a09c:	0004      	movs	r4, r0
 800a09e:	2900      	cmp	r1, #0
 800a0a0:	d102      	bne.n	800a0a8 <sbrk_aligned+0x14>
 800a0a2:	f000 ff07 	bl	800aeb4 <_sbrk_r>
 800a0a6:	6030      	str	r0, [r6, #0]
 800a0a8:	0029      	movs	r1, r5
 800a0aa:	0020      	movs	r0, r4
 800a0ac:	f000 ff02 	bl	800aeb4 <_sbrk_r>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d103      	bne.n	800a0bc <sbrk_aligned+0x28>
 800a0b4:	2501      	movs	r5, #1
 800a0b6:	426d      	negs	r5, r5
 800a0b8:	0028      	movs	r0, r5
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}
 800a0bc:	2303      	movs	r3, #3
 800a0be:	1cc5      	adds	r5, r0, #3
 800a0c0:	439d      	bics	r5, r3
 800a0c2:	42a8      	cmp	r0, r5
 800a0c4:	d0f8      	beq.n	800a0b8 <sbrk_aligned+0x24>
 800a0c6:	1a29      	subs	r1, r5, r0
 800a0c8:	0020      	movs	r0, r4
 800a0ca:	f000 fef3 	bl	800aeb4 <_sbrk_r>
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	d1f2      	bne.n	800a0b8 <sbrk_aligned+0x24>
 800a0d2:	e7ef      	b.n	800a0b4 <sbrk_aligned+0x20>
 800a0d4:	20000da4 	.word	0x20000da4

0800a0d8 <_malloc_r>:
 800a0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0da:	2203      	movs	r2, #3
 800a0dc:	1ccb      	adds	r3, r1, #3
 800a0de:	4393      	bics	r3, r2
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	0005      	movs	r5, r0
 800a0e4:	001f      	movs	r7, r3
 800a0e6:	2b0c      	cmp	r3, #12
 800a0e8:	d234      	bcs.n	800a154 <_malloc_r+0x7c>
 800a0ea:	270c      	movs	r7, #12
 800a0ec:	42b9      	cmp	r1, r7
 800a0ee:	d833      	bhi.n	800a158 <_malloc_r+0x80>
 800a0f0:	0028      	movs	r0, r5
 800a0f2:	f000 f871 	bl	800a1d8 <__malloc_lock>
 800a0f6:	4e37      	ldr	r6, [pc, #220]	@ (800a1d4 <_malloc_r+0xfc>)
 800a0f8:	6833      	ldr	r3, [r6, #0]
 800a0fa:	001c      	movs	r4, r3
 800a0fc:	2c00      	cmp	r4, #0
 800a0fe:	d12f      	bne.n	800a160 <_malloc_r+0x88>
 800a100:	0039      	movs	r1, r7
 800a102:	0028      	movs	r0, r5
 800a104:	f7ff ffc6 	bl	800a094 <sbrk_aligned>
 800a108:	0004      	movs	r4, r0
 800a10a:	1c43      	adds	r3, r0, #1
 800a10c:	d15f      	bne.n	800a1ce <_malloc_r+0xf6>
 800a10e:	6834      	ldr	r4, [r6, #0]
 800a110:	9400      	str	r4, [sp, #0]
 800a112:	9b00      	ldr	r3, [sp, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d14a      	bne.n	800a1ae <_malloc_r+0xd6>
 800a118:	2c00      	cmp	r4, #0
 800a11a:	d052      	beq.n	800a1c2 <_malloc_r+0xea>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	0028      	movs	r0, r5
 800a120:	18e3      	adds	r3, r4, r3
 800a122:	9900      	ldr	r1, [sp, #0]
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	f000 fec5 	bl	800aeb4 <_sbrk_r>
 800a12a:	9b01      	ldr	r3, [sp, #4]
 800a12c:	4283      	cmp	r3, r0
 800a12e:	d148      	bne.n	800a1c2 <_malloc_r+0xea>
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	0028      	movs	r0, r5
 800a134:	1aff      	subs	r7, r7, r3
 800a136:	0039      	movs	r1, r7
 800a138:	f7ff ffac 	bl	800a094 <sbrk_aligned>
 800a13c:	3001      	adds	r0, #1
 800a13e:	d040      	beq.n	800a1c2 <_malloc_r+0xea>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	19db      	adds	r3, r3, r7
 800a144:	6023      	str	r3, [r4, #0]
 800a146:	6833      	ldr	r3, [r6, #0]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	2a00      	cmp	r2, #0
 800a14c:	d133      	bne.n	800a1b6 <_malloc_r+0xde>
 800a14e:	9b00      	ldr	r3, [sp, #0]
 800a150:	6033      	str	r3, [r6, #0]
 800a152:	e019      	b.n	800a188 <_malloc_r+0xb0>
 800a154:	2b00      	cmp	r3, #0
 800a156:	dac9      	bge.n	800a0ec <_malloc_r+0x14>
 800a158:	230c      	movs	r3, #12
 800a15a:	602b      	str	r3, [r5, #0]
 800a15c:	2000      	movs	r0, #0
 800a15e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a160:	6821      	ldr	r1, [r4, #0]
 800a162:	1bc9      	subs	r1, r1, r7
 800a164:	d420      	bmi.n	800a1a8 <_malloc_r+0xd0>
 800a166:	290b      	cmp	r1, #11
 800a168:	d90a      	bls.n	800a180 <_malloc_r+0xa8>
 800a16a:	19e2      	adds	r2, r4, r7
 800a16c:	6027      	str	r7, [r4, #0]
 800a16e:	42a3      	cmp	r3, r4
 800a170:	d104      	bne.n	800a17c <_malloc_r+0xa4>
 800a172:	6032      	str	r2, [r6, #0]
 800a174:	6863      	ldr	r3, [r4, #4]
 800a176:	6011      	str	r1, [r2, #0]
 800a178:	6053      	str	r3, [r2, #4]
 800a17a:	e005      	b.n	800a188 <_malloc_r+0xb0>
 800a17c:	605a      	str	r2, [r3, #4]
 800a17e:	e7f9      	b.n	800a174 <_malloc_r+0x9c>
 800a180:	6862      	ldr	r2, [r4, #4]
 800a182:	42a3      	cmp	r3, r4
 800a184:	d10e      	bne.n	800a1a4 <_malloc_r+0xcc>
 800a186:	6032      	str	r2, [r6, #0]
 800a188:	0028      	movs	r0, r5
 800a18a:	f000 f82d 	bl	800a1e8 <__malloc_unlock>
 800a18e:	0020      	movs	r0, r4
 800a190:	2207      	movs	r2, #7
 800a192:	300b      	adds	r0, #11
 800a194:	1d23      	adds	r3, r4, #4
 800a196:	4390      	bics	r0, r2
 800a198:	1ac2      	subs	r2, r0, r3
 800a19a:	4298      	cmp	r0, r3
 800a19c:	d0df      	beq.n	800a15e <_malloc_r+0x86>
 800a19e:	1a1b      	subs	r3, r3, r0
 800a1a0:	50a3      	str	r3, [r4, r2]
 800a1a2:	e7dc      	b.n	800a15e <_malloc_r+0x86>
 800a1a4:	605a      	str	r2, [r3, #4]
 800a1a6:	e7ef      	b.n	800a188 <_malloc_r+0xb0>
 800a1a8:	0023      	movs	r3, r4
 800a1aa:	6864      	ldr	r4, [r4, #4]
 800a1ac:	e7a6      	b.n	800a0fc <_malloc_r+0x24>
 800a1ae:	9c00      	ldr	r4, [sp, #0]
 800a1b0:	6863      	ldr	r3, [r4, #4]
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	e7ad      	b.n	800a112 <_malloc_r+0x3a>
 800a1b6:	001a      	movs	r2, r3
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	42a3      	cmp	r3, r4
 800a1bc:	d1fb      	bne.n	800a1b6 <_malloc_r+0xde>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e7da      	b.n	800a178 <_malloc_r+0xa0>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	0028      	movs	r0, r5
 800a1c6:	602b      	str	r3, [r5, #0]
 800a1c8:	f000 f80e 	bl	800a1e8 <__malloc_unlock>
 800a1cc:	e7c6      	b.n	800a15c <_malloc_r+0x84>
 800a1ce:	6007      	str	r7, [r0, #0]
 800a1d0:	e7da      	b.n	800a188 <_malloc_r+0xb0>
 800a1d2:	46c0      	nop			@ (mov r8, r8)
 800a1d4:	20000da8 	.word	0x20000da8

0800a1d8 <__malloc_lock>:
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	4802      	ldr	r0, [pc, #8]	@ (800a1e4 <__malloc_lock+0xc>)
 800a1dc:	f7ff f883 	bl	80092e6 <__retarget_lock_acquire_recursive>
 800a1e0:	bd10      	pop	{r4, pc}
 800a1e2:	46c0      	nop			@ (mov r8, r8)
 800a1e4:	20000da0 	.word	0x20000da0

0800a1e8 <__malloc_unlock>:
 800a1e8:	b510      	push	{r4, lr}
 800a1ea:	4802      	ldr	r0, [pc, #8]	@ (800a1f4 <__malloc_unlock+0xc>)
 800a1ec:	f7ff f87c 	bl	80092e8 <__retarget_lock_release_recursive>
 800a1f0:	bd10      	pop	{r4, pc}
 800a1f2:	46c0      	nop			@ (mov r8, r8)
 800a1f4:	20000da0 	.word	0x20000da0

0800a1f8 <_Balloc>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	69c5      	ldr	r5, [r0, #28]
 800a1fc:	0006      	movs	r6, r0
 800a1fe:	000c      	movs	r4, r1
 800a200:	2d00      	cmp	r5, #0
 800a202:	d10e      	bne.n	800a222 <_Balloc+0x2a>
 800a204:	2010      	movs	r0, #16
 800a206:	f7ff ff3b 	bl	800a080 <malloc>
 800a20a:	1e02      	subs	r2, r0, #0
 800a20c:	61f0      	str	r0, [r6, #28]
 800a20e:	d104      	bne.n	800a21a <_Balloc+0x22>
 800a210:	216b      	movs	r1, #107	@ 0x6b
 800a212:	4b19      	ldr	r3, [pc, #100]	@ (800a278 <_Balloc+0x80>)
 800a214:	4819      	ldr	r0, [pc, #100]	@ (800a27c <_Balloc+0x84>)
 800a216:	f000 fe69 	bl	800aeec <__assert_func>
 800a21a:	6045      	str	r5, [r0, #4]
 800a21c:	6085      	str	r5, [r0, #8]
 800a21e:	6005      	str	r5, [r0, #0]
 800a220:	60c5      	str	r5, [r0, #12]
 800a222:	69f5      	ldr	r5, [r6, #28]
 800a224:	68eb      	ldr	r3, [r5, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d013      	beq.n	800a252 <_Balloc+0x5a>
 800a22a:	69f3      	ldr	r3, [r6, #28]
 800a22c:	00a2      	lsls	r2, r4, #2
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	189b      	adds	r3, r3, r2
 800a232:	6818      	ldr	r0, [r3, #0]
 800a234:	2800      	cmp	r0, #0
 800a236:	d118      	bne.n	800a26a <_Balloc+0x72>
 800a238:	2101      	movs	r1, #1
 800a23a:	000d      	movs	r5, r1
 800a23c:	40a5      	lsls	r5, r4
 800a23e:	1d6a      	adds	r2, r5, #5
 800a240:	0030      	movs	r0, r6
 800a242:	0092      	lsls	r2, r2, #2
 800a244:	f000 fe70 	bl	800af28 <_calloc_r>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d00c      	beq.n	800a266 <_Balloc+0x6e>
 800a24c:	6044      	str	r4, [r0, #4]
 800a24e:	6085      	str	r5, [r0, #8]
 800a250:	e00d      	b.n	800a26e <_Balloc+0x76>
 800a252:	2221      	movs	r2, #33	@ 0x21
 800a254:	2104      	movs	r1, #4
 800a256:	0030      	movs	r0, r6
 800a258:	f000 fe66 	bl	800af28 <_calloc_r>
 800a25c:	69f3      	ldr	r3, [r6, #28]
 800a25e:	60e8      	str	r0, [r5, #12]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e1      	bne.n	800a22a <_Balloc+0x32>
 800a266:	2000      	movs	r0, #0
 800a268:	bd70      	pop	{r4, r5, r6, pc}
 800a26a:	6802      	ldr	r2, [r0, #0]
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	2300      	movs	r3, #0
 800a270:	6103      	str	r3, [r0, #16]
 800a272:	60c3      	str	r3, [r0, #12]
 800a274:	e7f8      	b.n	800a268 <_Balloc+0x70>
 800a276:	46c0      	nop			@ (mov r8, r8)
 800a278:	0800ced1 	.word	0x0800ced1
 800a27c:	0800cf51 	.word	0x0800cf51

0800a280 <_Bfree>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	69c6      	ldr	r6, [r0, #28]
 800a284:	0005      	movs	r5, r0
 800a286:	000c      	movs	r4, r1
 800a288:	2e00      	cmp	r6, #0
 800a28a:	d10e      	bne.n	800a2aa <_Bfree+0x2a>
 800a28c:	2010      	movs	r0, #16
 800a28e:	f7ff fef7 	bl	800a080 <malloc>
 800a292:	1e02      	subs	r2, r0, #0
 800a294:	61e8      	str	r0, [r5, #28]
 800a296:	d104      	bne.n	800a2a2 <_Bfree+0x22>
 800a298:	218f      	movs	r1, #143	@ 0x8f
 800a29a:	4b09      	ldr	r3, [pc, #36]	@ (800a2c0 <_Bfree+0x40>)
 800a29c:	4809      	ldr	r0, [pc, #36]	@ (800a2c4 <_Bfree+0x44>)
 800a29e:	f000 fe25 	bl	800aeec <__assert_func>
 800a2a2:	6046      	str	r6, [r0, #4]
 800a2a4:	6086      	str	r6, [r0, #8]
 800a2a6:	6006      	str	r6, [r0, #0]
 800a2a8:	60c6      	str	r6, [r0, #12]
 800a2aa:	2c00      	cmp	r4, #0
 800a2ac:	d007      	beq.n	800a2be <_Bfree+0x3e>
 800a2ae:	69eb      	ldr	r3, [r5, #28]
 800a2b0:	6862      	ldr	r2, [r4, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	0092      	lsls	r2, r2, #2
 800a2b6:	189b      	adds	r3, r3, r2
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	6022      	str	r2, [r4, #0]
 800a2bc:	601c      	str	r4, [r3, #0]
 800a2be:	bd70      	pop	{r4, r5, r6, pc}
 800a2c0:	0800ced1 	.word	0x0800ced1
 800a2c4:	0800cf51 	.word	0x0800cf51

0800a2c8 <__multadd>:
 800a2c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2ca:	000f      	movs	r7, r1
 800a2cc:	9001      	str	r0, [sp, #4]
 800a2ce:	000c      	movs	r4, r1
 800a2d0:	001e      	movs	r6, r3
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	690d      	ldr	r5, [r1, #16]
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	3001      	adds	r0, #1
 800a2dc:	b299      	uxth	r1, r3
 800a2de:	4351      	muls	r1, r2
 800a2e0:	0c1b      	lsrs	r3, r3, #16
 800a2e2:	4353      	muls	r3, r2
 800a2e4:	1989      	adds	r1, r1, r6
 800a2e6:	0c0e      	lsrs	r6, r1, #16
 800a2e8:	199b      	adds	r3, r3, r6
 800a2ea:	0c1e      	lsrs	r6, r3, #16
 800a2ec:	b289      	uxth	r1, r1
 800a2ee:	041b      	lsls	r3, r3, #16
 800a2f0:	185b      	adds	r3, r3, r1
 800a2f2:	c708      	stmia	r7!, {r3}
 800a2f4:	4285      	cmp	r5, r0
 800a2f6:	dcef      	bgt.n	800a2d8 <__multadd+0x10>
 800a2f8:	2e00      	cmp	r6, #0
 800a2fa:	d022      	beq.n	800a342 <__multadd+0x7a>
 800a2fc:	68a3      	ldr	r3, [r4, #8]
 800a2fe:	42ab      	cmp	r3, r5
 800a300:	dc19      	bgt.n	800a336 <__multadd+0x6e>
 800a302:	6861      	ldr	r1, [r4, #4]
 800a304:	9801      	ldr	r0, [sp, #4]
 800a306:	3101      	adds	r1, #1
 800a308:	f7ff ff76 	bl	800a1f8 <_Balloc>
 800a30c:	1e07      	subs	r7, r0, #0
 800a30e:	d105      	bne.n	800a31c <__multadd+0x54>
 800a310:	003a      	movs	r2, r7
 800a312:	21ba      	movs	r1, #186	@ 0xba
 800a314:	4b0c      	ldr	r3, [pc, #48]	@ (800a348 <__multadd+0x80>)
 800a316:	480d      	ldr	r0, [pc, #52]	@ (800a34c <__multadd+0x84>)
 800a318:	f000 fde8 	bl	800aeec <__assert_func>
 800a31c:	0021      	movs	r1, r4
 800a31e:	6922      	ldr	r2, [r4, #16]
 800a320:	310c      	adds	r1, #12
 800a322:	3202      	adds	r2, #2
 800a324:	0092      	lsls	r2, r2, #2
 800a326:	300c      	adds	r0, #12
 800a328:	f000 fdd6 	bl	800aed8 <memcpy>
 800a32c:	0021      	movs	r1, r4
 800a32e:	9801      	ldr	r0, [sp, #4]
 800a330:	f7ff ffa6 	bl	800a280 <_Bfree>
 800a334:	003c      	movs	r4, r7
 800a336:	1d2b      	adds	r3, r5, #4
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	18e3      	adds	r3, r4, r3
 800a33c:	3501      	adds	r5, #1
 800a33e:	605e      	str	r6, [r3, #4]
 800a340:	6125      	str	r5, [r4, #16]
 800a342:	0020      	movs	r0, r4
 800a344:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a346:	46c0      	nop			@ (mov r8, r8)
 800a348:	0800cf40 	.word	0x0800cf40
 800a34c:	0800cf51 	.word	0x0800cf51

0800a350 <__hi0bits>:
 800a350:	2280      	movs	r2, #128	@ 0x80
 800a352:	0003      	movs	r3, r0
 800a354:	0252      	lsls	r2, r2, #9
 800a356:	2000      	movs	r0, #0
 800a358:	4293      	cmp	r3, r2
 800a35a:	d201      	bcs.n	800a360 <__hi0bits+0x10>
 800a35c:	041b      	lsls	r3, r3, #16
 800a35e:	3010      	adds	r0, #16
 800a360:	2280      	movs	r2, #128	@ 0x80
 800a362:	0452      	lsls	r2, r2, #17
 800a364:	4293      	cmp	r3, r2
 800a366:	d201      	bcs.n	800a36c <__hi0bits+0x1c>
 800a368:	3008      	adds	r0, #8
 800a36a:	021b      	lsls	r3, r3, #8
 800a36c:	2280      	movs	r2, #128	@ 0x80
 800a36e:	0552      	lsls	r2, r2, #21
 800a370:	4293      	cmp	r3, r2
 800a372:	d201      	bcs.n	800a378 <__hi0bits+0x28>
 800a374:	3004      	adds	r0, #4
 800a376:	011b      	lsls	r3, r3, #4
 800a378:	2280      	movs	r2, #128	@ 0x80
 800a37a:	05d2      	lsls	r2, r2, #23
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d201      	bcs.n	800a384 <__hi0bits+0x34>
 800a380:	3002      	adds	r0, #2
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	2b00      	cmp	r3, #0
 800a386:	db03      	blt.n	800a390 <__hi0bits+0x40>
 800a388:	3001      	adds	r0, #1
 800a38a:	4213      	tst	r3, r2
 800a38c:	d100      	bne.n	800a390 <__hi0bits+0x40>
 800a38e:	2020      	movs	r0, #32
 800a390:	4770      	bx	lr

0800a392 <__lo0bits>:
 800a392:	6803      	ldr	r3, [r0, #0]
 800a394:	0001      	movs	r1, r0
 800a396:	2207      	movs	r2, #7
 800a398:	0018      	movs	r0, r3
 800a39a:	4010      	ands	r0, r2
 800a39c:	4213      	tst	r3, r2
 800a39e:	d00d      	beq.n	800a3bc <__lo0bits+0x2a>
 800a3a0:	3a06      	subs	r2, #6
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	4213      	tst	r3, r2
 800a3a6:	d105      	bne.n	800a3b4 <__lo0bits+0x22>
 800a3a8:	3002      	adds	r0, #2
 800a3aa:	4203      	tst	r3, r0
 800a3ac:	d003      	beq.n	800a3b6 <__lo0bits+0x24>
 800a3ae:	40d3      	lsrs	r3, r2
 800a3b0:	0010      	movs	r0, r2
 800a3b2:	600b      	str	r3, [r1, #0]
 800a3b4:	4770      	bx	lr
 800a3b6:	089b      	lsrs	r3, r3, #2
 800a3b8:	600b      	str	r3, [r1, #0]
 800a3ba:	e7fb      	b.n	800a3b4 <__lo0bits+0x22>
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	2a00      	cmp	r2, #0
 800a3c0:	d101      	bne.n	800a3c6 <__lo0bits+0x34>
 800a3c2:	2010      	movs	r0, #16
 800a3c4:	0c1b      	lsrs	r3, r3, #16
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	2a00      	cmp	r2, #0
 800a3ca:	d101      	bne.n	800a3d0 <__lo0bits+0x3e>
 800a3cc:	3008      	adds	r0, #8
 800a3ce:	0a1b      	lsrs	r3, r3, #8
 800a3d0:	071a      	lsls	r2, r3, #28
 800a3d2:	d101      	bne.n	800a3d8 <__lo0bits+0x46>
 800a3d4:	3004      	adds	r0, #4
 800a3d6:	091b      	lsrs	r3, r3, #4
 800a3d8:	079a      	lsls	r2, r3, #30
 800a3da:	d101      	bne.n	800a3e0 <__lo0bits+0x4e>
 800a3dc:	3002      	adds	r0, #2
 800a3de:	089b      	lsrs	r3, r3, #2
 800a3e0:	07da      	lsls	r2, r3, #31
 800a3e2:	d4e9      	bmi.n	800a3b8 <__lo0bits+0x26>
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	085b      	lsrs	r3, r3, #1
 800a3e8:	d1e6      	bne.n	800a3b8 <__lo0bits+0x26>
 800a3ea:	2020      	movs	r0, #32
 800a3ec:	e7e2      	b.n	800a3b4 <__lo0bits+0x22>
	...

0800a3f0 <__i2b>:
 800a3f0:	b510      	push	{r4, lr}
 800a3f2:	000c      	movs	r4, r1
 800a3f4:	2101      	movs	r1, #1
 800a3f6:	f7ff feff 	bl	800a1f8 <_Balloc>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d107      	bne.n	800a40e <__i2b+0x1e>
 800a3fe:	2146      	movs	r1, #70	@ 0x46
 800a400:	4c05      	ldr	r4, [pc, #20]	@ (800a418 <__i2b+0x28>)
 800a402:	0002      	movs	r2, r0
 800a404:	4b05      	ldr	r3, [pc, #20]	@ (800a41c <__i2b+0x2c>)
 800a406:	0020      	movs	r0, r4
 800a408:	31ff      	adds	r1, #255	@ 0xff
 800a40a:	f000 fd6f 	bl	800aeec <__assert_func>
 800a40e:	2301      	movs	r3, #1
 800a410:	6144      	str	r4, [r0, #20]
 800a412:	6103      	str	r3, [r0, #16]
 800a414:	bd10      	pop	{r4, pc}
 800a416:	46c0      	nop			@ (mov r8, r8)
 800a418:	0800cf51 	.word	0x0800cf51
 800a41c:	0800cf40 	.word	0x0800cf40

0800a420 <__multiply>:
 800a420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a422:	0014      	movs	r4, r2
 800a424:	690a      	ldr	r2, [r1, #16]
 800a426:	6923      	ldr	r3, [r4, #16]
 800a428:	000d      	movs	r5, r1
 800a42a:	b089      	sub	sp, #36	@ 0x24
 800a42c:	429a      	cmp	r2, r3
 800a42e:	db02      	blt.n	800a436 <__multiply+0x16>
 800a430:	0023      	movs	r3, r4
 800a432:	000c      	movs	r4, r1
 800a434:	001d      	movs	r5, r3
 800a436:	6927      	ldr	r7, [r4, #16]
 800a438:	692e      	ldr	r6, [r5, #16]
 800a43a:	6861      	ldr	r1, [r4, #4]
 800a43c:	19bb      	adds	r3, r7, r6
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	68a3      	ldr	r3, [r4, #8]
 800a442:	19ba      	adds	r2, r7, r6
 800a444:	4293      	cmp	r3, r2
 800a446:	da00      	bge.n	800a44a <__multiply+0x2a>
 800a448:	3101      	adds	r1, #1
 800a44a:	f7ff fed5 	bl	800a1f8 <_Balloc>
 800a44e:	4684      	mov	ip, r0
 800a450:	2800      	cmp	r0, #0
 800a452:	d106      	bne.n	800a462 <__multiply+0x42>
 800a454:	21b1      	movs	r1, #177	@ 0xb1
 800a456:	4662      	mov	r2, ip
 800a458:	4b44      	ldr	r3, [pc, #272]	@ (800a56c <__multiply+0x14c>)
 800a45a:	4845      	ldr	r0, [pc, #276]	@ (800a570 <__multiply+0x150>)
 800a45c:	0049      	lsls	r1, r1, #1
 800a45e:	f000 fd45 	bl	800aeec <__assert_func>
 800a462:	0002      	movs	r2, r0
 800a464:	19bb      	adds	r3, r7, r6
 800a466:	3214      	adds	r2, #20
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	18d3      	adds	r3, r2, r3
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	2100      	movs	r1, #0
 800a470:	0013      	movs	r3, r2
 800a472:	9801      	ldr	r0, [sp, #4]
 800a474:	4283      	cmp	r3, r0
 800a476:	d328      	bcc.n	800a4ca <__multiply+0xaa>
 800a478:	0023      	movs	r3, r4
 800a47a:	00bf      	lsls	r7, r7, #2
 800a47c:	3314      	adds	r3, #20
 800a47e:	9304      	str	r3, [sp, #16]
 800a480:	3514      	adds	r5, #20
 800a482:	19db      	adds	r3, r3, r7
 800a484:	00b6      	lsls	r6, r6, #2
 800a486:	9302      	str	r3, [sp, #8]
 800a488:	19ab      	adds	r3, r5, r6
 800a48a:	9307      	str	r3, [sp, #28]
 800a48c:	2304      	movs	r3, #4
 800a48e:	9305      	str	r3, [sp, #20]
 800a490:	0023      	movs	r3, r4
 800a492:	9902      	ldr	r1, [sp, #8]
 800a494:	3315      	adds	r3, #21
 800a496:	4299      	cmp	r1, r3
 800a498:	d305      	bcc.n	800a4a6 <__multiply+0x86>
 800a49a:	1b0c      	subs	r4, r1, r4
 800a49c:	3c15      	subs	r4, #21
 800a49e:	08a4      	lsrs	r4, r4, #2
 800a4a0:	3401      	adds	r4, #1
 800a4a2:	00a3      	lsls	r3, r4, #2
 800a4a4:	9305      	str	r3, [sp, #20]
 800a4a6:	9b07      	ldr	r3, [sp, #28]
 800a4a8:	429d      	cmp	r5, r3
 800a4aa:	d310      	bcc.n	800a4ce <__multiply+0xae>
 800a4ac:	9b00      	ldr	r3, [sp, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	dd05      	ble.n	800a4be <__multiply+0x9e>
 800a4b2:	9b01      	ldr	r3, [sp, #4]
 800a4b4:	3b04      	subs	r3, #4
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d052      	beq.n	800a564 <__multiply+0x144>
 800a4be:	4663      	mov	r3, ip
 800a4c0:	4660      	mov	r0, ip
 800a4c2:	9a00      	ldr	r2, [sp, #0]
 800a4c4:	611a      	str	r2, [r3, #16]
 800a4c6:	b009      	add	sp, #36	@ 0x24
 800a4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ca:	c302      	stmia	r3!, {r1}
 800a4cc:	e7d1      	b.n	800a472 <__multiply+0x52>
 800a4ce:	682c      	ldr	r4, [r5, #0]
 800a4d0:	b2a4      	uxth	r4, r4
 800a4d2:	2c00      	cmp	r4, #0
 800a4d4:	d01f      	beq.n	800a516 <__multiply+0xf6>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	0017      	movs	r7, r2
 800a4da:	9e04      	ldr	r6, [sp, #16]
 800a4dc:	9303      	str	r3, [sp, #12]
 800a4de:	ce08      	ldmia	r6!, {r3}
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	9306      	str	r3, [sp, #24]
 800a4e4:	466b      	mov	r3, sp
 800a4e6:	8b1b      	ldrh	r3, [r3, #24]
 800a4e8:	b288      	uxth	r0, r1
 800a4ea:	4363      	muls	r3, r4
 800a4ec:	181b      	adds	r3, r3, r0
 800a4ee:	9803      	ldr	r0, [sp, #12]
 800a4f0:	0c09      	lsrs	r1, r1, #16
 800a4f2:	181b      	adds	r3, r3, r0
 800a4f4:	9806      	ldr	r0, [sp, #24]
 800a4f6:	0c00      	lsrs	r0, r0, #16
 800a4f8:	4360      	muls	r0, r4
 800a4fa:	1840      	adds	r0, r0, r1
 800a4fc:	0c19      	lsrs	r1, r3, #16
 800a4fe:	1841      	adds	r1, r0, r1
 800a500:	0c08      	lsrs	r0, r1, #16
 800a502:	b29b      	uxth	r3, r3
 800a504:	0409      	lsls	r1, r1, #16
 800a506:	4319      	orrs	r1, r3
 800a508:	9b02      	ldr	r3, [sp, #8]
 800a50a:	9003      	str	r0, [sp, #12]
 800a50c:	c702      	stmia	r7!, {r1}
 800a50e:	42b3      	cmp	r3, r6
 800a510:	d8e5      	bhi.n	800a4de <__multiply+0xbe>
 800a512:	9b05      	ldr	r3, [sp, #20]
 800a514:	50d0      	str	r0, [r2, r3]
 800a516:	682c      	ldr	r4, [r5, #0]
 800a518:	0c24      	lsrs	r4, r4, #16
 800a51a:	d020      	beq.n	800a55e <__multiply+0x13e>
 800a51c:	2100      	movs	r1, #0
 800a51e:	0010      	movs	r0, r2
 800a520:	6813      	ldr	r3, [r2, #0]
 800a522:	9e04      	ldr	r6, [sp, #16]
 800a524:	9103      	str	r1, [sp, #12]
 800a526:	6831      	ldr	r1, [r6, #0]
 800a528:	6807      	ldr	r7, [r0, #0]
 800a52a:	b289      	uxth	r1, r1
 800a52c:	4361      	muls	r1, r4
 800a52e:	0c3f      	lsrs	r7, r7, #16
 800a530:	19c9      	adds	r1, r1, r7
 800a532:	9f03      	ldr	r7, [sp, #12]
 800a534:	b29b      	uxth	r3, r3
 800a536:	19c9      	adds	r1, r1, r7
 800a538:	040f      	lsls	r7, r1, #16
 800a53a:	431f      	orrs	r7, r3
 800a53c:	6007      	str	r7, [r0, #0]
 800a53e:	ce80      	ldmia	r6!, {r7}
 800a540:	6843      	ldr	r3, [r0, #4]
 800a542:	0c3f      	lsrs	r7, r7, #16
 800a544:	4367      	muls	r7, r4
 800a546:	b29b      	uxth	r3, r3
 800a548:	0c09      	lsrs	r1, r1, #16
 800a54a:	18fb      	adds	r3, r7, r3
 800a54c:	185b      	adds	r3, r3, r1
 800a54e:	0c19      	lsrs	r1, r3, #16
 800a550:	9103      	str	r1, [sp, #12]
 800a552:	9902      	ldr	r1, [sp, #8]
 800a554:	3004      	adds	r0, #4
 800a556:	42b1      	cmp	r1, r6
 800a558:	d8e5      	bhi.n	800a526 <__multiply+0x106>
 800a55a:	9905      	ldr	r1, [sp, #20]
 800a55c:	5053      	str	r3, [r2, r1]
 800a55e:	3504      	adds	r5, #4
 800a560:	3204      	adds	r2, #4
 800a562:	e7a0      	b.n	800a4a6 <__multiply+0x86>
 800a564:	9b00      	ldr	r3, [sp, #0]
 800a566:	3b01      	subs	r3, #1
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	e79f      	b.n	800a4ac <__multiply+0x8c>
 800a56c:	0800cf40 	.word	0x0800cf40
 800a570:	0800cf51 	.word	0x0800cf51

0800a574 <__pow5mult>:
 800a574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a576:	2303      	movs	r3, #3
 800a578:	0015      	movs	r5, r2
 800a57a:	0007      	movs	r7, r0
 800a57c:	000e      	movs	r6, r1
 800a57e:	401a      	ands	r2, r3
 800a580:	421d      	tst	r5, r3
 800a582:	d008      	beq.n	800a596 <__pow5mult+0x22>
 800a584:	4925      	ldr	r1, [pc, #148]	@ (800a61c <__pow5mult+0xa8>)
 800a586:	3a01      	subs	r2, #1
 800a588:	0092      	lsls	r2, r2, #2
 800a58a:	5852      	ldr	r2, [r2, r1]
 800a58c:	2300      	movs	r3, #0
 800a58e:	0031      	movs	r1, r6
 800a590:	f7ff fe9a 	bl	800a2c8 <__multadd>
 800a594:	0006      	movs	r6, r0
 800a596:	10ad      	asrs	r5, r5, #2
 800a598:	d03d      	beq.n	800a616 <__pow5mult+0xa2>
 800a59a:	69fc      	ldr	r4, [r7, #28]
 800a59c:	2c00      	cmp	r4, #0
 800a59e:	d10f      	bne.n	800a5c0 <__pow5mult+0x4c>
 800a5a0:	2010      	movs	r0, #16
 800a5a2:	f7ff fd6d 	bl	800a080 <malloc>
 800a5a6:	1e02      	subs	r2, r0, #0
 800a5a8:	61f8      	str	r0, [r7, #28]
 800a5aa:	d105      	bne.n	800a5b8 <__pow5mult+0x44>
 800a5ac:	21b4      	movs	r1, #180	@ 0xb4
 800a5ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a620 <__pow5mult+0xac>)
 800a5b0:	481c      	ldr	r0, [pc, #112]	@ (800a624 <__pow5mult+0xb0>)
 800a5b2:	31ff      	adds	r1, #255	@ 0xff
 800a5b4:	f000 fc9a 	bl	800aeec <__assert_func>
 800a5b8:	6044      	str	r4, [r0, #4]
 800a5ba:	6084      	str	r4, [r0, #8]
 800a5bc:	6004      	str	r4, [r0, #0]
 800a5be:	60c4      	str	r4, [r0, #12]
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	689c      	ldr	r4, [r3, #8]
 800a5c4:	9301      	str	r3, [sp, #4]
 800a5c6:	2c00      	cmp	r4, #0
 800a5c8:	d108      	bne.n	800a5dc <__pow5mult+0x68>
 800a5ca:	0038      	movs	r0, r7
 800a5cc:	4916      	ldr	r1, [pc, #88]	@ (800a628 <__pow5mult+0xb4>)
 800a5ce:	f7ff ff0f 	bl	800a3f0 <__i2b>
 800a5d2:	9b01      	ldr	r3, [sp, #4]
 800a5d4:	0004      	movs	r4, r0
 800a5d6:	6098      	str	r0, [r3, #8]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	6003      	str	r3, [r0, #0]
 800a5dc:	2301      	movs	r3, #1
 800a5de:	421d      	tst	r5, r3
 800a5e0:	d00a      	beq.n	800a5f8 <__pow5mult+0x84>
 800a5e2:	0031      	movs	r1, r6
 800a5e4:	0022      	movs	r2, r4
 800a5e6:	0038      	movs	r0, r7
 800a5e8:	f7ff ff1a 	bl	800a420 <__multiply>
 800a5ec:	0031      	movs	r1, r6
 800a5ee:	9001      	str	r0, [sp, #4]
 800a5f0:	0038      	movs	r0, r7
 800a5f2:	f7ff fe45 	bl	800a280 <_Bfree>
 800a5f6:	9e01      	ldr	r6, [sp, #4]
 800a5f8:	106d      	asrs	r5, r5, #1
 800a5fa:	d00c      	beq.n	800a616 <__pow5mult+0xa2>
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d107      	bne.n	800a612 <__pow5mult+0x9e>
 800a602:	0022      	movs	r2, r4
 800a604:	0021      	movs	r1, r4
 800a606:	0038      	movs	r0, r7
 800a608:	f7ff ff0a 	bl	800a420 <__multiply>
 800a60c:	2300      	movs	r3, #0
 800a60e:	6020      	str	r0, [r4, #0]
 800a610:	6003      	str	r3, [r0, #0]
 800a612:	0004      	movs	r4, r0
 800a614:	e7e2      	b.n	800a5dc <__pow5mult+0x68>
 800a616:	0030      	movs	r0, r6
 800a618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a61a:	46c0      	nop			@ (mov r8, r8)
 800a61c:	0800d004 	.word	0x0800d004
 800a620:	0800ced1 	.word	0x0800ced1
 800a624:	0800cf51 	.word	0x0800cf51
 800a628:	00000271 	.word	0x00000271

0800a62c <__lshift>:
 800a62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a62e:	000c      	movs	r4, r1
 800a630:	0016      	movs	r6, r2
 800a632:	6923      	ldr	r3, [r4, #16]
 800a634:	1157      	asrs	r7, r2, #5
 800a636:	b085      	sub	sp, #20
 800a638:	18fb      	adds	r3, r7, r3
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	3301      	adds	r3, #1
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	6849      	ldr	r1, [r1, #4]
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	9002      	str	r0, [sp, #8]
 800a646:	9a00      	ldr	r2, [sp, #0]
 800a648:	4293      	cmp	r3, r2
 800a64a:	db10      	blt.n	800a66e <__lshift+0x42>
 800a64c:	9802      	ldr	r0, [sp, #8]
 800a64e:	f7ff fdd3 	bl	800a1f8 <_Balloc>
 800a652:	2300      	movs	r3, #0
 800a654:	0001      	movs	r1, r0
 800a656:	0005      	movs	r5, r0
 800a658:	001a      	movs	r2, r3
 800a65a:	3114      	adds	r1, #20
 800a65c:	4298      	cmp	r0, r3
 800a65e:	d10c      	bne.n	800a67a <__lshift+0x4e>
 800a660:	21ef      	movs	r1, #239	@ 0xef
 800a662:	002a      	movs	r2, r5
 800a664:	4b25      	ldr	r3, [pc, #148]	@ (800a6fc <__lshift+0xd0>)
 800a666:	4826      	ldr	r0, [pc, #152]	@ (800a700 <__lshift+0xd4>)
 800a668:	0049      	lsls	r1, r1, #1
 800a66a:	f000 fc3f 	bl	800aeec <__assert_func>
 800a66e:	3101      	adds	r1, #1
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	e7e8      	b.n	800a646 <__lshift+0x1a>
 800a674:	0098      	lsls	r0, r3, #2
 800a676:	500a      	str	r2, [r1, r0]
 800a678:	3301      	adds	r3, #1
 800a67a:	42bb      	cmp	r3, r7
 800a67c:	dbfa      	blt.n	800a674 <__lshift+0x48>
 800a67e:	43fb      	mvns	r3, r7
 800a680:	17db      	asrs	r3, r3, #31
 800a682:	401f      	ands	r7, r3
 800a684:	00bf      	lsls	r7, r7, #2
 800a686:	0023      	movs	r3, r4
 800a688:	201f      	movs	r0, #31
 800a68a:	19c9      	adds	r1, r1, r7
 800a68c:	0037      	movs	r7, r6
 800a68e:	6922      	ldr	r2, [r4, #16]
 800a690:	3314      	adds	r3, #20
 800a692:	0092      	lsls	r2, r2, #2
 800a694:	189a      	adds	r2, r3, r2
 800a696:	4007      	ands	r7, r0
 800a698:	4206      	tst	r6, r0
 800a69a:	d029      	beq.n	800a6f0 <__lshift+0xc4>
 800a69c:	3001      	adds	r0, #1
 800a69e:	1bc0      	subs	r0, r0, r7
 800a6a0:	9003      	str	r0, [sp, #12]
 800a6a2:	468c      	mov	ip, r1
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	681e      	ldr	r6, [r3, #0]
 800a6a8:	40be      	lsls	r6, r7
 800a6aa:	4306      	orrs	r6, r0
 800a6ac:	4660      	mov	r0, ip
 800a6ae:	c040      	stmia	r0!, {r6}
 800a6b0:	4684      	mov	ip, r0
 800a6b2:	9e03      	ldr	r6, [sp, #12]
 800a6b4:	cb01      	ldmia	r3!, {r0}
 800a6b6:	40f0      	lsrs	r0, r6
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d8f4      	bhi.n	800a6a6 <__lshift+0x7a>
 800a6bc:	0026      	movs	r6, r4
 800a6be:	3615      	adds	r6, #21
 800a6c0:	2304      	movs	r3, #4
 800a6c2:	42b2      	cmp	r2, r6
 800a6c4:	d304      	bcc.n	800a6d0 <__lshift+0xa4>
 800a6c6:	1b13      	subs	r3, r2, r4
 800a6c8:	3b15      	subs	r3, #21
 800a6ca:	089b      	lsrs	r3, r3, #2
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	50c8      	str	r0, [r1, r3]
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d002      	beq.n	800a6dc <__lshift+0xb0>
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	3302      	adds	r3, #2
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	9b00      	ldr	r3, [sp, #0]
 800a6de:	9802      	ldr	r0, [sp, #8]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	0021      	movs	r1, r4
 800a6e4:	612b      	str	r3, [r5, #16]
 800a6e6:	f7ff fdcb 	bl	800a280 <_Bfree>
 800a6ea:	0028      	movs	r0, r5
 800a6ec:	b005      	add	sp, #20
 800a6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f0:	cb01      	ldmia	r3!, {r0}
 800a6f2:	c101      	stmia	r1!, {r0}
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d8fb      	bhi.n	800a6f0 <__lshift+0xc4>
 800a6f8:	e7f0      	b.n	800a6dc <__lshift+0xb0>
 800a6fa:	46c0      	nop			@ (mov r8, r8)
 800a6fc:	0800cf40 	.word	0x0800cf40
 800a700:	0800cf51 	.word	0x0800cf51

0800a704 <__mcmp>:
 800a704:	b530      	push	{r4, r5, lr}
 800a706:	690b      	ldr	r3, [r1, #16]
 800a708:	6904      	ldr	r4, [r0, #16]
 800a70a:	0002      	movs	r2, r0
 800a70c:	1ae0      	subs	r0, r4, r3
 800a70e:	429c      	cmp	r4, r3
 800a710:	d10f      	bne.n	800a732 <__mcmp+0x2e>
 800a712:	3214      	adds	r2, #20
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	3114      	adds	r1, #20
 800a718:	0014      	movs	r4, r2
 800a71a:	18c9      	adds	r1, r1, r3
 800a71c:	18d2      	adds	r2, r2, r3
 800a71e:	3a04      	subs	r2, #4
 800a720:	3904      	subs	r1, #4
 800a722:	6815      	ldr	r5, [r2, #0]
 800a724:	680b      	ldr	r3, [r1, #0]
 800a726:	429d      	cmp	r5, r3
 800a728:	d004      	beq.n	800a734 <__mcmp+0x30>
 800a72a:	2001      	movs	r0, #1
 800a72c:	429d      	cmp	r5, r3
 800a72e:	d200      	bcs.n	800a732 <__mcmp+0x2e>
 800a730:	3802      	subs	r0, #2
 800a732:	bd30      	pop	{r4, r5, pc}
 800a734:	4294      	cmp	r4, r2
 800a736:	d3f2      	bcc.n	800a71e <__mcmp+0x1a>
 800a738:	e7fb      	b.n	800a732 <__mcmp+0x2e>
	...

0800a73c <__mdiff>:
 800a73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73e:	000c      	movs	r4, r1
 800a740:	b087      	sub	sp, #28
 800a742:	9000      	str	r0, [sp, #0]
 800a744:	0011      	movs	r1, r2
 800a746:	0020      	movs	r0, r4
 800a748:	0017      	movs	r7, r2
 800a74a:	f7ff ffdb 	bl	800a704 <__mcmp>
 800a74e:	1e05      	subs	r5, r0, #0
 800a750:	d110      	bne.n	800a774 <__mdiff+0x38>
 800a752:	0001      	movs	r1, r0
 800a754:	9800      	ldr	r0, [sp, #0]
 800a756:	f7ff fd4f 	bl	800a1f8 <_Balloc>
 800a75a:	1e02      	subs	r2, r0, #0
 800a75c:	d104      	bne.n	800a768 <__mdiff+0x2c>
 800a75e:	4b40      	ldr	r3, [pc, #256]	@ (800a860 <__mdiff+0x124>)
 800a760:	4840      	ldr	r0, [pc, #256]	@ (800a864 <__mdiff+0x128>)
 800a762:	4941      	ldr	r1, [pc, #260]	@ (800a868 <__mdiff+0x12c>)
 800a764:	f000 fbc2 	bl	800aeec <__assert_func>
 800a768:	2301      	movs	r3, #1
 800a76a:	6145      	str	r5, [r0, #20]
 800a76c:	6103      	str	r3, [r0, #16]
 800a76e:	0010      	movs	r0, r2
 800a770:	b007      	add	sp, #28
 800a772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a774:	2600      	movs	r6, #0
 800a776:	42b0      	cmp	r0, r6
 800a778:	da03      	bge.n	800a782 <__mdiff+0x46>
 800a77a:	0023      	movs	r3, r4
 800a77c:	003c      	movs	r4, r7
 800a77e:	001f      	movs	r7, r3
 800a780:	3601      	adds	r6, #1
 800a782:	6861      	ldr	r1, [r4, #4]
 800a784:	9800      	ldr	r0, [sp, #0]
 800a786:	f7ff fd37 	bl	800a1f8 <_Balloc>
 800a78a:	1e02      	subs	r2, r0, #0
 800a78c:	d103      	bne.n	800a796 <__mdiff+0x5a>
 800a78e:	4b34      	ldr	r3, [pc, #208]	@ (800a860 <__mdiff+0x124>)
 800a790:	4834      	ldr	r0, [pc, #208]	@ (800a864 <__mdiff+0x128>)
 800a792:	4936      	ldr	r1, [pc, #216]	@ (800a86c <__mdiff+0x130>)
 800a794:	e7e6      	b.n	800a764 <__mdiff+0x28>
 800a796:	6923      	ldr	r3, [r4, #16]
 800a798:	3414      	adds	r4, #20
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	18e3      	adds	r3, r4, r3
 800a7a0:	0021      	movs	r1, r4
 800a7a2:	9401      	str	r4, [sp, #4]
 800a7a4:	003c      	movs	r4, r7
 800a7a6:	9302      	str	r3, [sp, #8]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	3414      	adds	r4, #20
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	18e3      	adds	r3, r4, r3
 800a7b0:	9303      	str	r3, [sp, #12]
 800a7b2:	0003      	movs	r3, r0
 800a7b4:	60c6      	str	r6, [r0, #12]
 800a7b6:	468c      	mov	ip, r1
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	3314      	adds	r3, #20
 800a7bc:	9304      	str	r3, [sp, #16]
 800a7be:	9305      	str	r3, [sp, #20]
 800a7c0:	4663      	mov	r3, ip
 800a7c2:	cb20      	ldmia	r3!, {r5}
 800a7c4:	b2a9      	uxth	r1, r5
 800a7c6:	000e      	movs	r6, r1
 800a7c8:	469c      	mov	ip, r3
 800a7ca:	cc08      	ldmia	r4!, {r3}
 800a7cc:	0c2d      	lsrs	r5, r5, #16
 800a7ce:	b299      	uxth	r1, r3
 800a7d0:	1a71      	subs	r1, r6, r1
 800a7d2:	1809      	adds	r1, r1, r0
 800a7d4:	0c1b      	lsrs	r3, r3, #16
 800a7d6:	1408      	asrs	r0, r1, #16
 800a7d8:	1aeb      	subs	r3, r5, r3
 800a7da:	181b      	adds	r3, r3, r0
 800a7dc:	1418      	asrs	r0, r3, #16
 800a7de:	b289      	uxth	r1, r1
 800a7e0:	041b      	lsls	r3, r3, #16
 800a7e2:	4319      	orrs	r1, r3
 800a7e4:	9b05      	ldr	r3, [sp, #20]
 800a7e6:	c302      	stmia	r3!, {r1}
 800a7e8:	9305      	str	r3, [sp, #20]
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	42a3      	cmp	r3, r4
 800a7ee:	d8e7      	bhi.n	800a7c0 <__mdiff+0x84>
 800a7f0:	0039      	movs	r1, r7
 800a7f2:	9c03      	ldr	r4, [sp, #12]
 800a7f4:	3115      	adds	r1, #21
 800a7f6:	2304      	movs	r3, #4
 800a7f8:	428c      	cmp	r4, r1
 800a7fa:	d304      	bcc.n	800a806 <__mdiff+0xca>
 800a7fc:	1be3      	subs	r3, r4, r7
 800a7fe:	3b15      	subs	r3, #21
 800a800:	089b      	lsrs	r3, r3, #2
 800a802:	3301      	adds	r3, #1
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	9901      	ldr	r1, [sp, #4]
 800a808:	18cd      	adds	r5, r1, r3
 800a80a:	9904      	ldr	r1, [sp, #16]
 800a80c:	002e      	movs	r6, r5
 800a80e:	18cb      	adds	r3, r1, r3
 800a810:	001f      	movs	r7, r3
 800a812:	9902      	ldr	r1, [sp, #8]
 800a814:	428e      	cmp	r6, r1
 800a816:	d311      	bcc.n	800a83c <__mdiff+0x100>
 800a818:	9c02      	ldr	r4, [sp, #8]
 800a81a:	1ee9      	subs	r1, r5, #3
 800a81c:	2000      	movs	r0, #0
 800a81e:	428c      	cmp	r4, r1
 800a820:	d304      	bcc.n	800a82c <__mdiff+0xf0>
 800a822:	0021      	movs	r1, r4
 800a824:	3103      	adds	r1, #3
 800a826:	1b49      	subs	r1, r1, r5
 800a828:	0889      	lsrs	r1, r1, #2
 800a82a:	0088      	lsls	r0, r1, #2
 800a82c:	181b      	adds	r3, r3, r0
 800a82e:	3b04      	subs	r3, #4
 800a830:	6819      	ldr	r1, [r3, #0]
 800a832:	2900      	cmp	r1, #0
 800a834:	d010      	beq.n	800a858 <__mdiff+0x11c>
 800a836:	9b00      	ldr	r3, [sp, #0]
 800a838:	6113      	str	r3, [r2, #16]
 800a83a:	e798      	b.n	800a76e <__mdiff+0x32>
 800a83c:	4684      	mov	ip, r0
 800a83e:	ce02      	ldmia	r6!, {r1}
 800a840:	b288      	uxth	r0, r1
 800a842:	4460      	add	r0, ip
 800a844:	1400      	asrs	r0, r0, #16
 800a846:	0c0c      	lsrs	r4, r1, #16
 800a848:	1904      	adds	r4, r0, r4
 800a84a:	4461      	add	r1, ip
 800a84c:	1420      	asrs	r0, r4, #16
 800a84e:	b289      	uxth	r1, r1
 800a850:	0424      	lsls	r4, r4, #16
 800a852:	4321      	orrs	r1, r4
 800a854:	c702      	stmia	r7!, {r1}
 800a856:	e7dc      	b.n	800a812 <__mdiff+0xd6>
 800a858:	9900      	ldr	r1, [sp, #0]
 800a85a:	3901      	subs	r1, #1
 800a85c:	9100      	str	r1, [sp, #0]
 800a85e:	e7e6      	b.n	800a82e <__mdiff+0xf2>
 800a860:	0800cf40 	.word	0x0800cf40
 800a864:	0800cf51 	.word	0x0800cf51
 800a868:	00000237 	.word	0x00000237
 800a86c:	00000245 	.word	0x00000245

0800a870 <__d2b>:
 800a870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a872:	2101      	movs	r1, #1
 800a874:	0016      	movs	r6, r2
 800a876:	001f      	movs	r7, r3
 800a878:	f7ff fcbe 	bl	800a1f8 <_Balloc>
 800a87c:	1e04      	subs	r4, r0, #0
 800a87e:	d105      	bne.n	800a88c <__d2b+0x1c>
 800a880:	0022      	movs	r2, r4
 800a882:	4b25      	ldr	r3, [pc, #148]	@ (800a918 <__d2b+0xa8>)
 800a884:	4825      	ldr	r0, [pc, #148]	@ (800a91c <__d2b+0xac>)
 800a886:	4926      	ldr	r1, [pc, #152]	@ (800a920 <__d2b+0xb0>)
 800a888:	f000 fb30 	bl	800aeec <__assert_func>
 800a88c:	033b      	lsls	r3, r7, #12
 800a88e:	007d      	lsls	r5, r7, #1
 800a890:	0b1b      	lsrs	r3, r3, #12
 800a892:	0d6d      	lsrs	r5, r5, #21
 800a894:	d002      	beq.n	800a89c <__d2b+0x2c>
 800a896:	2280      	movs	r2, #128	@ 0x80
 800a898:	0352      	lsls	r2, r2, #13
 800a89a:	4313      	orrs	r3, r2
 800a89c:	9301      	str	r3, [sp, #4]
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	d025      	beq.n	800a8ee <__d2b+0x7e>
 800a8a2:	4668      	mov	r0, sp
 800a8a4:	9600      	str	r6, [sp, #0]
 800a8a6:	f7ff fd74 	bl	800a392 <__lo0bits>
 800a8aa:	9b01      	ldr	r3, [sp, #4]
 800a8ac:	9900      	ldr	r1, [sp, #0]
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d01b      	beq.n	800a8ea <__d2b+0x7a>
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	001e      	movs	r6, r3
 800a8b6:	1a12      	subs	r2, r2, r0
 800a8b8:	4096      	lsls	r6, r2
 800a8ba:	0032      	movs	r2, r6
 800a8bc:	40c3      	lsrs	r3, r0
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	6162      	str	r2, [r4, #20]
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	9e01      	ldr	r6, [sp, #4]
 800a8c6:	61a6      	str	r6, [r4, #24]
 800a8c8:	1e73      	subs	r3, r6, #1
 800a8ca:	419e      	sbcs	r6, r3
 800a8cc:	3601      	adds	r6, #1
 800a8ce:	6126      	str	r6, [r4, #16]
 800a8d0:	2d00      	cmp	r5, #0
 800a8d2:	d014      	beq.n	800a8fe <__d2b+0x8e>
 800a8d4:	2635      	movs	r6, #53	@ 0x35
 800a8d6:	4b13      	ldr	r3, [pc, #76]	@ (800a924 <__d2b+0xb4>)
 800a8d8:	18ed      	adds	r5, r5, r3
 800a8da:	9b08      	ldr	r3, [sp, #32]
 800a8dc:	182d      	adds	r5, r5, r0
 800a8de:	601d      	str	r5, [r3, #0]
 800a8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e2:	1a36      	subs	r6, r6, r0
 800a8e4:	601e      	str	r6, [r3, #0]
 800a8e6:	0020      	movs	r0, r4
 800a8e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a8ea:	6161      	str	r1, [r4, #20]
 800a8ec:	e7ea      	b.n	800a8c4 <__d2b+0x54>
 800a8ee:	a801      	add	r0, sp, #4
 800a8f0:	f7ff fd4f 	bl	800a392 <__lo0bits>
 800a8f4:	9b01      	ldr	r3, [sp, #4]
 800a8f6:	2601      	movs	r6, #1
 800a8f8:	6163      	str	r3, [r4, #20]
 800a8fa:	3020      	adds	r0, #32
 800a8fc:	e7e7      	b.n	800a8ce <__d2b+0x5e>
 800a8fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a928 <__d2b+0xb8>)
 800a900:	18c0      	adds	r0, r0, r3
 800a902:	9b08      	ldr	r3, [sp, #32]
 800a904:	6018      	str	r0, [r3, #0]
 800a906:	4b09      	ldr	r3, [pc, #36]	@ (800a92c <__d2b+0xbc>)
 800a908:	18f3      	adds	r3, r6, r3
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	18e3      	adds	r3, r4, r3
 800a90e:	6958      	ldr	r0, [r3, #20]
 800a910:	f7ff fd1e 	bl	800a350 <__hi0bits>
 800a914:	0176      	lsls	r6, r6, #5
 800a916:	e7e3      	b.n	800a8e0 <__d2b+0x70>
 800a918:	0800cf40 	.word	0x0800cf40
 800a91c:	0800cf51 	.word	0x0800cf51
 800a920:	0000030f 	.word	0x0000030f
 800a924:	fffffbcd 	.word	0xfffffbcd
 800a928:	fffffbce 	.word	0xfffffbce
 800a92c:	3fffffff 	.word	0x3fffffff

0800a930 <__ssputs_r>:
 800a930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a932:	688e      	ldr	r6, [r1, #8]
 800a934:	b085      	sub	sp, #20
 800a936:	001f      	movs	r7, r3
 800a938:	000c      	movs	r4, r1
 800a93a:	680b      	ldr	r3, [r1, #0]
 800a93c:	9002      	str	r0, [sp, #8]
 800a93e:	9203      	str	r2, [sp, #12]
 800a940:	42be      	cmp	r6, r7
 800a942:	d830      	bhi.n	800a9a6 <__ssputs_r+0x76>
 800a944:	210c      	movs	r1, #12
 800a946:	5e62      	ldrsh	r2, [r4, r1]
 800a948:	2190      	movs	r1, #144	@ 0x90
 800a94a:	00c9      	lsls	r1, r1, #3
 800a94c:	420a      	tst	r2, r1
 800a94e:	d028      	beq.n	800a9a2 <__ssputs_r+0x72>
 800a950:	2003      	movs	r0, #3
 800a952:	6921      	ldr	r1, [r4, #16]
 800a954:	1a5b      	subs	r3, r3, r1
 800a956:	9301      	str	r3, [sp, #4]
 800a958:	6963      	ldr	r3, [r4, #20]
 800a95a:	4343      	muls	r3, r0
 800a95c:	9801      	ldr	r0, [sp, #4]
 800a95e:	0fdd      	lsrs	r5, r3, #31
 800a960:	18ed      	adds	r5, r5, r3
 800a962:	1c7b      	adds	r3, r7, #1
 800a964:	181b      	adds	r3, r3, r0
 800a966:	106d      	asrs	r5, r5, #1
 800a968:	42ab      	cmp	r3, r5
 800a96a:	d900      	bls.n	800a96e <__ssputs_r+0x3e>
 800a96c:	001d      	movs	r5, r3
 800a96e:	0552      	lsls	r2, r2, #21
 800a970:	d528      	bpl.n	800a9c4 <__ssputs_r+0x94>
 800a972:	0029      	movs	r1, r5
 800a974:	9802      	ldr	r0, [sp, #8]
 800a976:	f7ff fbaf 	bl	800a0d8 <_malloc_r>
 800a97a:	1e06      	subs	r6, r0, #0
 800a97c:	d02c      	beq.n	800a9d8 <__ssputs_r+0xa8>
 800a97e:	9a01      	ldr	r2, [sp, #4]
 800a980:	6921      	ldr	r1, [r4, #16]
 800a982:	f000 faa9 	bl	800aed8 <memcpy>
 800a986:	89a2      	ldrh	r2, [r4, #12]
 800a988:	4b18      	ldr	r3, [pc, #96]	@ (800a9ec <__ssputs_r+0xbc>)
 800a98a:	401a      	ands	r2, r3
 800a98c:	2380      	movs	r3, #128	@ 0x80
 800a98e:	4313      	orrs	r3, r2
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	9b01      	ldr	r3, [sp, #4]
 800a994:	6126      	str	r6, [r4, #16]
 800a996:	18f6      	adds	r6, r6, r3
 800a998:	6026      	str	r6, [r4, #0]
 800a99a:	003e      	movs	r6, r7
 800a99c:	6165      	str	r5, [r4, #20]
 800a99e:	1aed      	subs	r5, r5, r3
 800a9a0:	60a5      	str	r5, [r4, #8]
 800a9a2:	42be      	cmp	r6, r7
 800a9a4:	d900      	bls.n	800a9a8 <__ssputs_r+0x78>
 800a9a6:	003e      	movs	r6, r7
 800a9a8:	0032      	movs	r2, r6
 800a9aa:	9903      	ldr	r1, [sp, #12]
 800a9ac:	6820      	ldr	r0, [r4, #0]
 800a9ae:	f000 fa6f 	bl	800ae90 <memmove>
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	68a3      	ldr	r3, [r4, #8]
 800a9b6:	1b9b      	subs	r3, r3, r6
 800a9b8:	60a3      	str	r3, [r4, #8]
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	199b      	adds	r3, r3, r6
 800a9be:	6023      	str	r3, [r4, #0]
 800a9c0:	b005      	add	sp, #20
 800a9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c4:	002a      	movs	r2, r5
 800a9c6:	9802      	ldr	r0, [sp, #8]
 800a9c8:	f000 faed 	bl	800afa6 <_realloc_r>
 800a9cc:	1e06      	subs	r6, r0, #0
 800a9ce:	d1e0      	bne.n	800a992 <__ssputs_r+0x62>
 800a9d0:	6921      	ldr	r1, [r4, #16]
 800a9d2:	9802      	ldr	r0, [sp, #8]
 800a9d4:	f7ff fb0a 	bl	8009fec <_free_r>
 800a9d8:	230c      	movs	r3, #12
 800a9da:	2001      	movs	r0, #1
 800a9dc:	9a02      	ldr	r2, [sp, #8]
 800a9de:	4240      	negs	r0, r0
 800a9e0:	6013      	str	r3, [r2, #0]
 800a9e2:	89a2      	ldrh	r2, [r4, #12]
 800a9e4:	3334      	adds	r3, #52	@ 0x34
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	81a3      	strh	r3, [r4, #12]
 800a9ea:	e7e9      	b.n	800a9c0 <__ssputs_r+0x90>
 800a9ec:	fffffb7f 	.word	0xfffffb7f

0800a9f0 <_svfiprintf_r>:
 800a9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f2:	b0a1      	sub	sp, #132	@ 0x84
 800a9f4:	9003      	str	r0, [sp, #12]
 800a9f6:	001d      	movs	r5, r3
 800a9f8:	898b      	ldrh	r3, [r1, #12]
 800a9fa:	000f      	movs	r7, r1
 800a9fc:	0016      	movs	r6, r2
 800a9fe:	061b      	lsls	r3, r3, #24
 800aa00:	d511      	bpl.n	800aa26 <_svfiprintf_r+0x36>
 800aa02:	690b      	ldr	r3, [r1, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10e      	bne.n	800aa26 <_svfiprintf_r+0x36>
 800aa08:	2140      	movs	r1, #64	@ 0x40
 800aa0a:	f7ff fb65 	bl	800a0d8 <_malloc_r>
 800aa0e:	6038      	str	r0, [r7, #0]
 800aa10:	6138      	str	r0, [r7, #16]
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d105      	bne.n	800aa22 <_svfiprintf_r+0x32>
 800aa16:	230c      	movs	r3, #12
 800aa18:	9a03      	ldr	r2, [sp, #12]
 800aa1a:	6013      	str	r3, [r2, #0]
 800aa1c:	2001      	movs	r0, #1
 800aa1e:	4240      	negs	r0, r0
 800aa20:	e0cf      	b.n	800abc2 <_svfiprintf_r+0x1d2>
 800aa22:	2340      	movs	r3, #64	@ 0x40
 800aa24:	617b      	str	r3, [r7, #20]
 800aa26:	2300      	movs	r3, #0
 800aa28:	ac08      	add	r4, sp, #32
 800aa2a:	6163      	str	r3, [r4, #20]
 800aa2c:	3320      	adds	r3, #32
 800aa2e:	7663      	strb	r3, [r4, #25]
 800aa30:	3310      	adds	r3, #16
 800aa32:	76a3      	strb	r3, [r4, #26]
 800aa34:	9507      	str	r5, [sp, #28]
 800aa36:	0035      	movs	r5, r6
 800aa38:	782b      	ldrb	r3, [r5, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <_svfiprintf_r+0x52>
 800aa3e:	2b25      	cmp	r3, #37	@ 0x25
 800aa40:	d148      	bne.n	800aad4 <_svfiprintf_r+0xe4>
 800aa42:	1bab      	subs	r3, r5, r6
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	42b5      	cmp	r5, r6
 800aa48:	d00b      	beq.n	800aa62 <_svfiprintf_r+0x72>
 800aa4a:	0032      	movs	r2, r6
 800aa4c:	0039      	movs	r1, r7
 800aa4e:	9803      	ldr	r0, [sp, #12]
 800aa50:	f7ff ff6e 	bl	800a930 <__ssputs_r>
 800aa54:	3001      	adds	r0, #1
 800aa56:	d100      	bne.n	800aa5a <_svfiprintf_r+0x6a>
 800aa58:	e0ae      	b.n	800abb8 <_svfiprintf_r+0x1c8>
 800aa5a:	6963      	ldr	r3, [r4, #20]
 800aa5c:	9a05      	ldr	r2, [sp, #20]
 800aa5e:	189b      	adds	r3, r3, r2
 800aa60:	6163      	str	r3, [r4, #20]
 800aa62:	782b      	ldrb	r3, [r5, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d100      	bne.n	800aa6a <_svfiprintf_r+0x7a>
 800aa68:	e0a6      	b.n	800abb8 <_svfiprintf_r+0x1c8>
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	4252      	negs	r2, r2
 800aa70:	6062      	str	r2, [r4, #4]
 800aa72:	a904      	add	r1, sp, #16
 800aa74:	3254      	adds	r2, #84	@ 0x54
 800aa76:	1852      	adds	r2, r2, r1
 800aa78:	1c6e      	adds	r6, r5, #1
 800aa7a:	6023      	str	r3, [r4, #0]
 800aa7c:	60e3      	str	r3, [r4, #12]
 800aa7e:	60a3      	str	r3, [r4, #8]
 800aa80:	7013      	strb	r3, [r2, #0]
 800aa82:	65a3      	str	r3, [r4, #88]	@ 0x58
 800aa84:	4b54      	ldr	r3, [pc, #336]	@ (800abd8 <_svfiprintf_r+0x1e8>)
 800aa86:	2205      	movs	r2, #5
 800aa88:	0018      	movs	r0, r3
 800aa8a:	7831      	ldrb	r1, [r6, #0]
 800aa8c:	9305      	str	r3, [sp, #20]
 800aa8e:	f7fe fc2c 	bl	80092ea <memchr>
 800aa92:	1c75      	adds	r5, r6, #1
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d11f      	bne.n	800aad8 <_svfiprintf_r+0xe8>
 800aa98:	6822      	ldr	r2, [r4, #0]
 800aa9a:	06d3      	lsls	r3, r2, #27
 800aa9c:	d504      	bpl.n	800aaa8 <_svfiprintf_r+0xb8>
 800aa9e:	2353      	movs	r3, #83	@ 0x53
 800aaa0:	a904      	add	r1, sp, #16
 800aaa2:	185b      	adds	r3, r3, r1
 800aaa4:	2120      	movs	r1, #32
 800aaa6:	7019      	strb	r1, [r3, #0]
 800aaa8:	0713      	lsls	r3, r2, #28
 800aaaa:	d504      	bpl.n	800aab6 <_svfiprintf_r+0xc6>
 800aaac:	2353      	movs	r3, #83	@ 0x53
 800aaae:	a904      	add	r1, sp, #16
 800aab0:	185b      	adds	r3, r3, r1
 800aab2:	212b      	movs	r1, #43	@ 0x2b
 800aab4:	7019      	strb	r1, [r3, #0]
 800aab6:	7833      	ldrb	r3, [r6, #0]
 800aab8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaba:	d016      	beq.n	800aaea <_svfiprintf_r+0xfa>
 800aabc:	0035      	movs	r5, r6
 800aabe:	2100      	movs	r1, #0
 800aac0:	200a      	movs	r0, #10
 800aac2:	68e3      	ldr	r3, [r4, #12]
 800aac4:	782a      	ldrb	r2, [r5, #0]
 800aac6:	1c6e      	adds	r6, r5, #1
 800aac8:	3a30      	subs	r2, #48	@ 0x30
 800aaca:	2a09      	cmp	r2, #9
 800aacc:	d950      	bls.n	800ab70 <_svfiprintf_r+0x180>
 800aace:	2900      	cmp	r1, #0
 800aad0:	d111      	bne.n	800aaf6 <_svfiprintf_r+0x106>
 800aad2:	e017      	b.n	800ab04 <_svfiprintf_r+0x114>
 800aad4:	3501      	adds	r5, #1
 800aad6:	e7af      	b.n	800aa38 <_svfiprintf_r+0x48>
 800aad8:	9b05      	ldr	r3, [sp, #20]
 800aada:	6822      	ldr	r2, [r4, #0]
 800aadc:	1ac0      	subs	r0, r0, r3
 800aade:	2301      	movs	r3, #1
 800aae0:	4083      	lsls	r3, r0
 800aae2:	4313      	orrs	r3, r2
 800aae4:	002e      	movs	r6, r5
 800aae6:	6023      	str	r3, [r4, #0]
 800aae8:	e7cc      	b.n	800aa84 <_svfiprintf_r+0x94>
 800aaea:	9b07      	ldr	r3, [sp, #28]
 800aaec:	1d19      	adds	r1, r3, #4
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	9107      	str	r1, [sp, #28]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	db01      	blt.n	800aafa <_svfiprintf_r+0x10a>
 800aaf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaf8:	e004      	b.n	800ab04 <_svfiprintf_r+0x114>
 800aafa:	425b      	negs	r3, r3
 800aafc:	60e3      	str	r3, [r4, #12]
 800aafe:	2302      	movs	r3, #2
 800ab00:	4313      	orrs	r3, r2
 800ab02:	6023      	str	r3, [r4, #0]
 800ab04:	782b      	ldrb	r3, [r5, #0]
 800ab06:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab08:	d10c      	bne.n	800ab24 <_svfiprintf_r+0x134>
 800ab0a:	786b      	ldrb	r3, [r5, #1]
 800ab0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab0e:	d134      	bne.n	800ab7a <_svfiprintf_r+0x18a>
 800ab10:	9b07      	ldr	r3, [sp, #28]
 800ab12:	3502      	adds	r5, #2
 800ab14:	1d1a      	adds	r2, r3, #4
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	9207      	str	r2, [sp, #28]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	da01      	bge.n	800ab22 <_svfiprintf_r+0x132>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	425b      	negs	r3, r3
 800ab22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab24:	4e2d      	ldr	r6, [pc, #180]	@ (800abdc <_svfiprintf_r+0x1ec>)
 800ab26:	2203      	movs	r2, #3
 800ab28:	0030      	movs	r0, r6
 800ab2a:	7829      	ldrb	r1, [r5, #0]
 800ab2c:	f7fe fbdd 	bl	80092ea <memchr>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d006      	beq.n	800ab42 <_svfiprintf_r+0x152>
 800ab34:	2340      	movs	r3, #64	@ 0x40
 800ab36:	1b80      	subs	r0, r0, r6
 800ab38:	4083      	lsls	r3, r0
 800ab3a:	6822      	ldr	r2, [r4, #0]
 800ab3c:	3501      	adds	r5, #1
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	6023      	str	r3, [r4, #0]
 800ab42:	7829      	ldrb	r1, [r5, #0]
 800ab44:	2206      	movs	r2, #6
 800ab46:	4826      	ldr	r0, [pc, #152]	@ (800abe0 <_svfiprintf_r+0x1f0>)
 800ab48:	1c6e      	adds	r6, r5, #1
 800ab4a:	7621      	strb	r1, [r4, #24]
 800ab4c:	f7fe fbcd 	bl	80092ea <memchr>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d038      	beq.n	800abc6 <_svfiprintf_r+0x1d6>
 800ab54:	4b23      	ldr	r3, [pc, #140]	@ (800abe4 <_svfiprintf_r+0x1f4>)
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d122      	bne.n	800aba0 <_svfiprintf_r+0x1b0>
 800ab5a:	2207      	movs	r2, #7
 800ab5c:	9b07      	ldr	r3, [sp, #28]
 800ab5e:	3307      	adds	r3, #7
 800ab60:	4393      	bics	r3, r2
 800ab62:	3308      	adds	r3, #8
 800ab64:	9307      	str	r3, [sp, #28]
 800ab66:	6963      	ldr	r3, [r4, #20]
 800ab68:	9a04      	ldr	r2, [sp, #16]
 800ab6a:	189b      	adds	r3, r3, r2
 800ab6c:	6163      	str	r3, [r4, #20]
 800ab6e:	e762      	b.n	800aa36 <_svfiprintf_r+0x46>
 800ab70:	4343      	muls	r3, r0
 800ab72:	0035      	movs	r5, r6
 800ab74:	2101      	movs	r1, #1
 800ab76:	189b      	adds	r3, r3, r2
 800ab78:	e7a4      	b.n	800aac4 <_svfiprintf_r+0xd4>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	200a      	movs	r0, #10
 800ab7e:	0019      	movs	r1, r3
 800ab80:	3501      	adds	r5, #1
 800ab82:	6063      	str	r3, [r4, #4]
 800ab84:	782a      	ldrb	r2, [r5, #0]
 800ab86:	1c6e      	adds	r6, r5, #1
 800ab88:	3a30      	subs	r2, #48	@ 0x30
 800ab8a:	2a09      	cmp	r2, #9
 800ab8c:	d903      	bls.n	800ab96 <_svfiprintf_r+0x1a6>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d0c8      	beq.n	800ab24 <_svfiprintf_r+0x134>
 800ab92:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab94:	e7c6      	b.n	800ab24 <_svfiprintf_r+0x134>
 800ab96:	4341      	muls	r1, r0
 800ab98:	0035      	movs	r5, r6
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	1889      	adds	r1, r1, r2
 800ab9e:	e7f1      	b.n	800ab84 <_svfiprintf_r+0x194>
 800aba0:	aa07      	add	r2, sp, #28
 800aba2:	9200      	str	r2, [sp, #0]
 800aba4:	0021      	movs	r1, r4
 800aba6:	003a      	movs	r2, r7
 800aba8:	4b0f      	ldr	r3, [pc, #60]	@ (800abe8 <_svfiprintf_r+0x1f8>)
 800abaa:	9803      	ldr	r0, [sp, #12]
 800abac:	f7fd fe2a 	bl	8008804 <_printf_float>
 800abb0:	9004      	str	r0, [sp, #16]
 800abb2:	9b04      	ldr	r3, [sp, #16]
 800abb4:	3301      	adds	r3, #1
 800abb6:	d1d6      	bne.n	800ab66 <_svfiprintf_r+0x176>
 800abb8:	89bb      	ldrh	r3, [r7, #12]
 800abba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800abbc:	065b      	lsls	r3, r3, #25
 800abbe:	d500      	bpl.n	800abc2 <_svfiprintf_r+0x1d2>
 800abc0:	e72c      	b.n	800aa1c <_svfiprintf_r+0x2c>
 800abc2:	b021      	add	sp, #132	@ 0x84
 800abc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc6:	aa07      	add	r2, sp, #28
 800abc8:	9200      	str	r2, [sp, #0]
 800abca:	0021      	movs	r1, r4
 800abcc:	003a      	movs	r2, r7
 800abce:	4b06      	ldr	r3, [pc, #24]	@ (800abe8 <_svfiprintf_r+0x1f8>)
 800abd0:	9803      	ldr	r0, [sp, #12]
 800abd2:	f7fe f8c5 	bl	8008d60 <_printf_i>
 800abd6:	e7eb      	b.n	800abb0 <_svfiprintf_r+0x1c0>
 800abd8:	0800cfaa 	.word	0x0800cfaa
 800abdc:	0800cfb0 	.word	0x0800cfb0
 800abe0:	0800cfb4 	.word	0x0800cfb4
 800abe4:	08008805 	.word	0x08008805
 800abe8:	0800a931 	.word	0x0800a931

0800abec <__sflush_r>:
 800abec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abee:	220c      	movs	r2, #12
 800abf0:	5e8b      	ldrsh	r3, [r1, r2]
 800abf2:	0005      	movs	r5, r0
 800abf4:	000c      	movs	r4, r1
 800abf6:	071a      	lsls	r2, r3, #28
 800abf8:	d456      	bmi.n	800aca8 <__sflush_r+0xbc>
 800abfa:	684a      	ldr	r2, [r1, #4]
 800abfc:	2a00      	cmp	r2, #0
 800abfe:	dc02      	bgt.n	800ac06 <__sflush_r+0x1a>
 800ac00:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800ac02:	2a00      	cmp	r2, #0
 800ac04:	dd4e      	ble.n	800aca4 <__sflush_r+0xb8>
 800ac06:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ac08:	2f00      	cmp	r7, #0
 800ac0a:	d04b      	beq.n	800aca4 <__sflush_r+0xb8>
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2080      	movs	r0, #128	@ 0x80
 800ac10:	682e      	ldr	r6, [r5, #0]
 800ac12:	602a      	str	r2, [r5, #0]
 800ac14:	001a      	movs	r2, r3
 800ac16:	0140      	lsls	r0, r0, #5
 800ac18:	6a21      	ldr	r1, [r4, #32]
 800ac1a:	4002      	ands	r2, r0
 800ac1c:	4203      	tst	r3, r0
 800ac1e:	d033      	beq.n	800ac88 <__sflush_r+0x9c>
 800ac20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	075b      	lsls	r3, r3, #29
 800ac26:	d506      	bpl.n	800ac36 <__sflush_r+0x4a>
 800ac28:	6863      	ldr	r3, [r4, #4]
 800ac2a:	1ad2      	subs	r2, r2, r3
 800ac2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <__sflush_r+0x4a>
 800ac32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac34:	1ad2      	subs	r2, r2, r3
 800ac36:	2300      	movs	r3, #0
 800ac38:	0028      	movs	r0, r5
 800ac3a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ac3c:	6a21      	ldr	r1, [r4, #32]
 800ac3e:	47b8      	blx	r7
 800ac40:	89a2      	ldrh	r2, [r4, #12]
 800ac42:	1c43      	adds	r3, r0, #1
 800ac44:	d106      	bne.n	800ac54 <__sflush_r+0x68>
 800ac46:	6829      	ldr	r1, [r5, #0]
 800ac48:	291d      	cmp	r1, #29
 800ac4a:	d846      	bhi.n	800acda <__sflush_r+0xee>
 800ac4c:	4b29      	ldr	r3, [pc, #164]	@ (800acf4 <__sflush_r+0x108>)
 800ac4e:	40cb      	lsrs	r3, r1
 800ac50:	07db      	lsls	r3, r3, #31
 800ac52:	d542      	bpl.n	800acda <__sflush_r+0xee>
 800ac54:	2300      	movs	r3, #0
 800ac56:	6063      	str	r3, [r4, #4]
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	6023      	str	r3, [r4, #0]
 800ac5c:	04d2      	lsls	r2, r2, #19
 800ac5e:	d505      	bpl.n	800ac6c <__sflush_r+0x80>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d102      	bne.n	800ac6a <__sflush_r+0x7e>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d100      	bne.n	800ac6c <__sflush_r+0x80>
 800ac6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac6e:	602e      	str	r6, [r5, #0]
 800ac70:	2900      	cmp	r1, #0
 800ac72:	d017      	beq.n	800aca4 <__sflush_r+0xb8>
 800ac74:	0023      	movs	r3, r4
 800ac76:	3344      	adds	r3, #68	@ 0x44
 800ac78:	4299      	cmp	r1, r3
 800ac7a:	d002      	beq.n	800ac82 <__sflush_r+0x96>
 800ac7c:	0028      	movs	r0, r5
 800ac7e:	f7ff f9b5 	bl	8009fec <_free_r>
 800ac82:	2300      	movs	r3, #0
 800ac84:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac86:	e00d      	b.n	800aca4 <__sflush_r+0xb8>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	0028      	movs	r0, r5
 800ac8c:	47b8      	blx	r7
 800ac8e:	0002      	movs	r2, r0
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d1c6      	bne.n	800ac22 <__sflush_r+0x36>
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d0c3      	beq.n	800ac22 <__sflush_r+0x36>
 800ac9a:	2b1d      	cmp	r3, #29
 800ac9c:	d001      	beq.n	800aca2 <__sflush_r+0xb6>
 800ac9e:	2b16      	cmp	r3, #22
 800aca0:	d11a      	bne.n	800acd8 <__sflush_r+0xec>
 800aca2:	602e      	str	r6, [r5, #0]
 800aca4:	2000      	movs	r0, #0
 800aca6:	e01e      	b.n	800ace6 <__sflush_r+0xfa>
 800aca8:	690e      	ldr	r6, [r1, #16]
 800acaa:	2e00      	cmp	r6, #0
 800acac:	d0fa      	beq.n	800aca4 <__sflush_r+0xb8>
 800acae:	680f      	ldr	r7, [r1, #0]
 800acb0:	600e      	str	r6, [r1, #0]
 800acb2:	1bba      	subs	r2, r7, r6
 800acb4:	9201      	str	r2, [sp, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	079b      	lsls	r3, r3, #30
 800acba:	d100      	bne.n	800acbe <__sflush_r+0xd2>
 800acbc:	694a      	ldr	r2, [r1, #20]
 800acbe:	60a2      	str	r2, [r4, #8]
 800acc0:	9b01      	ldr	r3, [sp, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	ddee      	ble.n	800aca4 <__sflush_r+0xb8>
 800acc6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800acc8:	0032      	movs	r2, r6
 800acca:	001f      	movs	r7, r3
 800accc:	0028      	movs	r0, r5
 800acce:	9b01      	ldr	r3, [sp, #4]
 800acd0:	6a21      	ldr	r1, [r4, #32]
 800acd2:	47b8      	blx	r7
 800acd4:	2800      	cmp	r0, #0
 800acd6:	dc07      	bgt.n	800ace8 <__sflush_r+0xfc>
 800acd8:	89a2      	ldrh	r2, [r4, #12]
 800acda:	2340      	movs	r3, #64	@ 0x40
 800acdc:	2001      	movs	r0, #1
 800acde:	4313      	orrs	r3, r2
 800ace0:	b21b      	sxth	r3, r3
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	4240      	negs	r0, r0
 800ace6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	1836      	adds	r6, r6, r0
 800acec:	1a1b      	subs	r3, r3, r0
 800acee:	9301      	str	r3, [sp, #4]
 800acf0:	e7e6      	b.n	800acc0 <__sflush_r+0xd4>
 800acf2:	46c0      	nop			@ (mov r8, r8)
 800acf4:	20400001 	.word	0x20400001

0800acf8 <_fflush_r>:
 800acf8:	690b      	ldr	r3, [r1, #16]
 800acfa:	b570      	push	{r4, r5, r6, lr}
 800acfc:	0005      	movs	r5, r0
 800acfe:	000c      	movs	r4, r1
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d102      	bne.n	800ad0a <_fflush_r+0x12>
 800ad04:	2500      	movs	r5, #0
 800ad06:	0028      	movs	r0, r5
 800ad08:	bd70      	pop	{r4, r5, r6, pc}
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d004      	beq.n	800ad18 <_fflush_r+0x20>
 800ad0e:	6a03      	ldr	r3, [r0, #32]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <_fflush_r+0x20>
 800ad14:	f7fe f9c0 	bl	8009098 <__sinit>
 800ad18:	220c      	movs	r2, #12
 800ad1a:	5ea3      	ldrsh	r3, [r4, r2]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0f1      	beq.n	800ad04 <_fflush_r+0xc>
 800ad20:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad22:	07d2      	lsls	r2, r2, #31
 800ad24:	d404      	bmi.n	800ad30 <_fflush_r+0x38>
 800ad26:	059b      	lsls	r3, r3, #22
 800ad28:	d402      	bmi.n	800ad30 <_fflush_r+0x38>
 800ad2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad2c:	f7fe fadb 	bl	80092e6 <__retarget_lock_acquire_recursive>
 800ad30:	0028      	movs	r0, r5
 800ad32:	0021      	movs	r1, r4
 800ad34:	f7ff ff5a 	bl	800abec <__sflush_r>
 800ad38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad3a:	0005      	movs	r5, r0
 800ad3c:	07db      	lsls	r3, r3, #31
 800ad3e:	d4e2      	bmi.n	800ad06 <_fflush_r+0xe>
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	059b      	lsls	r3, r3, #22
 800ad44:	d4df      	bmi.n	800ad06 <_fflush_r+0xe>
 800ad46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad48:	f7fe face 	bl	80092e8 <__retarget_lock_release_recursive>
 800ad4c:	e7db      	b.n	800ad06 <_fflush_r+0xe>

0800ad4e <__swbuf_r>:
 800ad4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad50:	0006      	movs	r6, r0
 800ad52:	000d      	movs	r5, r1
 800ad54:	0014      	movs	r4, r2
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d004      	beq.n	800ad64 <__swbuf_r+0x16>
 800ad5a:	6a03      	ldr	r3, [r0, #32]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <__swbuf_r+0x16>
 800ad60:	f7fe f99a 	bl	8009098 <__sinit>
 800ad64:	69a3      	ldr	r3, [r4, #24]
 800ad66:	60a3      	str	r3, [r4, #8]
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	071b      	lsls	r3, r3, #28
 800ad6c:	d502      	bpl.n	800ad74 <__swbuf_r+0x26>
 800ad6e:	6923      	ldr	r3, [r4, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d109      	bne.n	800ad88 <__swbuf_r+0x3a>
 800ad74:	0021      	movs	r1, r4
 800ad76:	0030      	movs	r0, r6
 800ad78:	f000 f82c 	bl	800add4 <__swsetup_r>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d003      	beq.n	800ad88 <__swbuf_r+0x3a>
 800ad80:	2501      	movs	r5, #1
 800ad82:	426d      	negs	r5, r5
 800ad84:	0028      	movs	r0, r5
 800ad86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	6820      	ldr	r0, [r4, #0]
 800ad8c:	b2ef      	uxtb	r7, r5
 800ad8e:	1ac0      	subs	r0, r0, r3
 800ad90:	6963      	ldr	r3, [r4, #20]
 800ad92:	b2ed      	uxtb	r5, r5
 800ad94:	4283      	cmp	r3, r0
 800ad96:	dc05      	bgt.n	800ada4 <__swbuf_r+0x56>
 800ad98:	0021      	movs	r1, r4
 800ad9a:	0030      	movs	r0, r6
 800ad9c:	f7ff ffac 	bl	800acf8 <_fflush_r>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d1ed      	bne.n	800ad80 <__swbuf_r+0x32>
 800ada4:	68a3      	ldr	r3, [r4, #8]
 800ada6:	3001      	adds	r0, #1
 800ada8:	3b01      	subs	r3, #1
 800adaa:	60a3      	str	r3, [r4, #8]
 800adac:	6823      	ldr	r3, [r4, #0]
 800adae:	1c5a      	adds	r2, r3, #1
 800adb0:	6022      	str	r2, [r4, #0]
 800adb2:	701f      	strb	r7, [r3, #0]
 800adb4:	6963      	ldr	r3, [r4, #20]
 800adb6:	4283      	cmp	r3, r0
 800adb8:	d004      	beq.n	800adc4 <__swbuf_r+0x76>
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	07db      	lsls	r3, r3, #31
 800adbe:	d5e1      	bpl.n	800ad84 <__swbuf_r+0x36>
 800adc0:	2d0a      	cmp	r5, #10
 800adc2:	d1df      	bne.n	800ad84 <__swbuf_r+0x36>
 800adc4:	0021      	movs	r1, r4
 800adc6:	0030      	movs	r0, r6
 800adc8:	f7ff ff96 	bl	800acf8 <_fflush_r>
 800adcc:	2800      	cmp	r0, #0
 800adce:	d0d9      	beq.n	800ad84 <__swbuf_r+0x36>
 800add0:	e7d6      	b.n	800ad80 <__swbuf_r+0x32>
	...

0800add4 <__swsetup_r>:
 800add4:	4b2d      	ldr	r3, [pc, #180]	@ (800ae8c <__swsetup_r+0xb8>)
 800add6:	b570      	push	{r4, r5, r6, lr}
 800add8:	0005      	movs	r5, r0
 800adda:	6818      	ldr	r0, [r3, #0]
 800addc:	000c      	movs	r4, r1
 800adde:	2800      	cmp	r0, #0
 800ade0:	d004      	beq.n	800adec <__swsetup_r+0x18>
 800ade2:	6a03      	ldr	r3, [r0, #32]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <__swsetup_r+0x18>
 800ade8:	f7fe f956 	bl	8009098 <__sinit>
 800adec:	220c      	movs	r2, #12
 800adee:	5ea3      	ldrsh	r3, [r4, r2]
 800adf0:	071a      	lsls	r2, r3, #28
 800adf2:	d423      	bmi.n	800ae3c <__swsetup_r+0x68>
 800adf4:	06da      	lsls	r2, r3, #27
 800adf6:	d407      	bmi.n	800ae08 <__swsetup_r+0x34>
 800adf8:	2209      	movs	r2, #9
 800adfa:	602a      	str	r2, [r5, #0]
 800adfc:	2240      	movs	r2, #64	@ 0x40
 800adfe:	2001      	movs	r0, #1
 800ae00:	4313      	orrs	r3, r2
 800ae02:	81a3      	strh	r3, [r4, #12]
 800ae04:	4240      	negs	r0, r0
 800ae06:	e03a      	b.n	800ae7e <__swsetup_r+0xaa>
 800ae08:	075b      	lsls	r3, r3, #29
 800ae0a:	d513      	bpl.n	800ae34 <__swsetup_r+0x60>
 800ae0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae0e:	2900      	cmp	r1, #0
 800ae10:	d008      	beq.n	800ae24 <__swsetup_r+0x50>
 800ae12:	0023      	movs	r3, r4
 800ae14:	3344      	adds	r3, #68	@ 0x44
 800ae16:	4299      	cmp	r1, r3
 800ae18:	d002      	beq.n	800ae20 <__swsetup_r+0x4c>
 800ae1a:	0028      	movs	r0, r5
 800ae1c:	f7ff f8e6 	bl	8009fec <_free_r>
 800ae20:	2300      	movs	r3, #0
 800ae22:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae24:	2224      	movs	r2, #36	@ 0x24
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	4393      	bics	r3, r2
 800ae2a:	81a3      	strh	r3, [r4, #12]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	6063      	str	r3, [r4, #4]
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	6023      	str	r3, [r4, #0]
 800ae34:	2308      	movs	r3, #8
 800ae36:	89a2      	ldrh	r2, [r4, #12]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	81a3      	strh	r3, [r4, #12]
 800ae3c:	6923      	ldr	r3, [r4, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10b      	bne.n	800ae5a <__swsetup_r+0x86>
 800ae42:	21a0      	movs	r1, #160	@ 0xa0
 800ae44:	2280      	movs	r2, #128	@ 0x80
 800ae46:	89a3      	ldrh	r3, [r4, #12]
 800ae48:	0089      	lsls	r1, r1, #2
 800ae4a:	0092      	lsls	r2, r2, #2
 800ae4c:	400b      	ands	r3, r1
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d003      	beq.n	800ae5a <__swsetup_r+0x86>
 800ae52:	0021      	movs	r1, r4
 800ae54:	0028      	movs	r0, r5
 800ae56:	f000 f91d 	bl	800b094 <__smakebuf_r>
 800ae5a:	220c      	movs	r2, #12
 800ae5c:	5ea3      	ldrsh	r3, [r4, r2]
 800ae5e:	2101      	movs	r1, #1
 800ae60:	001a      	movs	r2, r3
 800ae62:	400a      	ands	r2, r1
 800ae64:	420b      	tst	r3, r1
 800ae66:	d00b      	beq.n	800ae80 <__swsetup_r+0xac>
 800ae68:	2200      	movs	r2, #0
 800ae6a:	60a2      	str	r2, [r4, #8]
 800ae6c:	6962      	ldr	r2, [r4, #20]
 800ae6e:	4252      	negs	r2, r2
 800ae70:	61a2      	str	r2, [r4, #24]
 800ae72:	2000      	movs	r0, #0
 800ae74:	6922      	ldr	r2, [r4, #16]
 800ae76:	4282      	cmp	r2, r0
 800ae78:	d101      	bne.n	800ae7e <__swsetup_r+0xaa>
 800ae7a:	061a      	lsls	r2, r3, #24
 800ae7c:	d4be      	bmi.n	800adfc <__swsetup_r+0x28>
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	0799      	lsls	r1, r3, #30
 800ae82:	d400      	bmi.n	800ae86 <__swsetup_r+0xb2>
 800ae84:	6962      	ldr	r2, [r4, #20]
 800ae86:	60a2      	str	r2, [r4, #8]
 800ae88:	e7f3      	b.n	800ae72 <__swsetup_r+0x9e>
 800ae8a:	46c0      	nop			@ (mov r8, r8)
 800ae8c:	2000001c 	.word	0x2000001c

0800ae90 <memmove>:
 800ae90:	b510      	push	{r4, lr}
 800ae92:	4288      	cmp	r0, r1
 800ae94:	d902      	bls.n	800ae9c <memmove+0xc>
 800ae96:	188b      	adds	r3, r1, r2
 800ae98:	4298      	cmp	r0, r3
 800ae9a:	d308      	bcc.n	800aeae <memmove+0x1e>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d007      	beq.n	800aeb2 <memmove+0x22>
 800aea2:	5ccc      	ldrb	r4, [r1, r3]
 800aea4:	54c4      	strb	r4, [r0, r3]
 800aea6:	3301      	adds	r3, #1
 800aea8:	e7f9      	b.n	800ae9e <memmove+0xe>
 800aeaa:	5c8b      	ldrb	r3, [r1, r2]
 800aeac:	5483      	strb	r3, [r0, r2]
 800aeae:	3a01      	subs	r2, #1
 800aeb0:	d2fb      	bcs.n	800aeaa <memmove+0x1a>
 800aeb2:	bd10      	pop	{r4, pc}

0800aeb4 <_sbrk_r>:
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	b570      	push	{r4, r5, r6, lr}
 800aeb8:	4d06      	ldr	r5, [pc, #24]	@ (800aed4 <_sbrk_r+0x20>)
 800aeba:	0004      	movs	r4, r0
 800aebc:	0008      	movs	r0, r1
 800aebe:	602b      	str	r3, [r5, #0]
 800aec0:	f7f9 fa3c 	bl	800433c <_sbrk>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d103      	bne.n	800aed0 <_sbrk_r+0x1c>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d000      	beq.n	800aed0 <_sbrk_r+0x1c>
 800aece:	6023      	str	r3, [r4, #0]
 800aed0:	bd70      	pop	{r4, r5, r6, pc}
 800aed2:	46c0      	nop			@ (mov r8, r8)
 800aed4:	20000d9c 	.word	0x20000d9c

0800aed8 <memcpy>:
 800aed8:	2300      	movs	r3, #0
 800aeda:	b510      	push	{r4, lr}
 800aedc:	429a      	cmp	r2, r3
 800aede:	d100      	bne.n	800aee2 <memcpy+0xa>
 800aee0:	bd10      	pop	{r4, pc}
 800aee2:	5ccc      	ldrb	r4, [r1, r3]
 800aee4:	54c4      	strb	r4, [r0, r3]
 800aee6:	3301      	adds	r3, #1
 800aee8:	e7f8      	b.n	800aedc <memcpy+0x4>
	...

0800aeec <__assert_func>:
 800aeec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aeee:	0014      	movs	r4, r2
 800aef0:	001a      	movs	r2, r3
 800aef2:	4b09      	ldr	r3, [pc, #36]	@ (800af18 <__assert_func+0x2c>)
 800aef4:	0005      	movs	r5, r0
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	000e      	movs	r6, r1
 800aefa:	68d8      	ldr	r0, [r3, #12]
 800aefc:	4b07      	ldr	r3, [pc, #28]	@ (800af1c <__assert_func+0x30>)
 800aefe:	2c00      	cmp	r4, #0
 800af00:	d101      	bne.n	800af06 <__assert_func+0x1a>
 800af02:	4b07      	ldr	r3, [pc, #28]	@ (800af20 <__assert_func+0x34>)
 800af04:	001c      	movs	r4, r3
 800af06:	4907      	ldr	r1, [pc, #28]	@ (800af24 <__assert_func+0x38>)
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	9402      	str	r4, [sp, #8]
 800af0c:	002b      	movs	r3, r5
 800af0e:	9600      	str	r6, [sp, #0]
 800af10:	f000 f886 	bl	800b020 <fiprintf>
 800af14:	f000 f924 	bl	800b160 <abort>
 800af18:	2000001c 	.word	0x2000001c
 800af1c:	0800cfc5 	.word	0x0800cfc5
 800af20:	0800d000 	.word	0x0800d000
 800af24:	0800cfd2 	.word	0x0800cfd2

0800af28 <_calloc_r>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	0c0b      	lsrs	r3, r1, #16
 800af2c:	0c15      	lsrs	r5, r2, #16
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d11e      	bne.n	800af70 <_calloc_r+0x48>
 800af32:	2d00      	cmp	r5, #0
 800af34:	d10c      	bne.n	800af50 <_calloc_r+0x28>
 800af36:	b289      	uxth	r1, r1
 800af38:	b294      	uxth	r4, r2
 800af3a:	434c      	muls	r4, r1
 800af3c:	0021      	movs	r1, r4
 800af3e:	f7ff f8cb 	bl	800a0d8 <_malloc_r>
 800af42:	1e05      	subs	r5, r0, #0
 800af44:	d01b      	beq.n	800af7e <_calloc_r+0x56>
 800af46:	0022      	movs	r2, r4
 800af48:	2100      	movs	r1, #0
 800af4a:	f7fe f947 	bl	80091dc <memset>
 800af4e:	e016      	b.n	800af7e <_calloc_r+0x56>
 800af50:	1c2b      	adds	r3, r5, #0
 800af52:	1c0c      	adds	r4, r1, #0
 800af54:	b289      	uxth	r1, r1
 800af56:	b292      	uxth	r2, r2
 800af58:	434a      	muls	r2, r1
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	b2a1      	uxth	r1, r4
 800af5e:	4359      	muls	r1, r3
 800af60:	0c14      	lsrs	r4, r2, #16
 800af62:	190c      	adds	r4, r1, r4
 800af64:	0c23      	lsrs	r3, r4, #16
 800af66:	d107      	bne.n	800af78 <_calloc_r+0x50>
 800af68:	0424      	lsls	r4, r4, #16
 800af6a:	b292      	uxth	r2, r2
 800af6c:	4314      	orrs	r4, r2
 800af6e:	e7e5      	b.n	800af3c <_calloc_r+0x14>
 800af70:	2d00      	cmp	r5, #0
 800af72:	d101      	bne.n	800af78 <_calloc_r+0x50>
 800af74:	1c14      	adds	r4, r2, #0
 800af76:	e7ed      	b.n	800af54 <_calloc_r+0x2c>
 800af78:	230c      	movs	r3, #12
 800af7a:	2500      	movs	r5, #0
 800af7c:	6003      	str	r3, [r0, #0]
 800af7e:	0028      	movs	r0, r5
 800af80:	bd70      	pop	{r4, r5, r6, pc}

0800af82 <__ascii_mbtowc>:
 800af82:	b082      	sub	sp, #8
 800af84:	2900      	cmp	r1, #0
 800af86:	d100      	bne.n	800af8a <__ascii_mbtowc+0x8>
 800af88:	a901      	add	r1, sp, #4
 800af8a:	1e10      	subs	r0, r2, #0
 800af8c:	d006      	beq.n	800af9c <__ascii_mbtowc+0x1a>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d006      	beq.n	800afa0 <__ascii_mbtowc+0x1e>
 800af92:	7813      	ldrb	r3, [r2, #0]
 800af94:	600b      	str	r3, [r1, #0]
 800af96:	7810      	ldrb	r0, [r2, #0]
 800af98:	1e43      	subs	r3, r0, #1
 800af9a:	4198      	sbcs	r0, r3
 800af9c:	b002      	add	sp, #8
 800af9e:	4770      	bx	lr
 800afa0:	2002      	movs	r0, #2
 800afa2:	4240      	negs	r0, r0
 800afa4:	e7fa      	b.n	800af9c <__ascii_mbtowc+0x1a>

0800afa6 <_realloc_r>:
 800afa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afa8:	0006      	movs	r6, r0
 800afaa:	000c      	movs	r4, r1
 800afac:	0015      	movs	r5, r2
 800afae:	2900      	cmp	r1, #0
 800afb0:	d105      	bne.n	800afbe <_realloc_r+0x18>
 800afb2:	0011      	movs	r1, r2
 800afb4:	f7ff f890 	bl	800a0d8 <_malloc_r>
 800afb8:	0004      	movs	r4, r0
 800afba:	0020      	movs	r0, r4
 800afbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800afbe:	2a00      	cmp	r2, #0
 800afc0:	d103      	bne.n	800afca <_realloc_r+0x24>
 800afc2:	f7ff f813 	bl	8009fec <_free_r>
 800afc6:	002c      	movs	r4, r5
 800afc8:	e7f7      	b.n	800afba <_realloc_r+0x14>
 800afca:	f000 f8d0 	bl	800b16e <_malloc_usable_size_r>
 800afce:	0007      	movs	r7, r0
 800afd0:	4285      	cmp	r5, r0
 800afd2:	d802      	bhi.n	800afda <_realloc_r+0x34>
 800afd4:	0843      	lsrs	r3, r0, #1
 800afd6:	42ab      	cmp	r3, r5
 800afd8:	d3ef      	bcc.n	800afba <_realloc_r+0x14>
 800afda:	0029      	movs	r1, r5
 800afdc:	0030      	movs	r0, r6
 800afde:	f7ff f87b 	bl	800a0d8 <_malloc_r>
 800afe2:	9001      	str	r0, [sp, #4]
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d101      	bne.n	800afec <_realloc_r+0x46>
 800afe8:	9c01      	ldr	r4, [sp, #4]
 800afea:	e7e6      	b.n	800afba <_realloc_r+0x14>
 800afec:	002a      	movs	r2, r5
 800afee:	42bd      	cmp	r5, r7
 800aff0:	d900      	bls.n	800aff4 <_realloc_r+0x4e>
 800aff2:	003a      	movs	r2, r7
 800aff4:	0021      	movs	r1, r4
 800aff6:	9801      	ldr	r0, [sp, #4]
 800aff8:	f7ff ff6e 	bl	800aed8 <memcpy>
 800affc:	0021      	movs	r1, r4
 800affe:	0030      	movs	r0, r6
 800b000:	f7fe fff4 	bl	8009fec <_free_r>
 800b004:	e7f0      	b.n	800afe8 <_realloc_r+0x42>

0800b006 <__ascii_wctomb>:
 800b006:	0003      	movs	r3, r0
 800b008:	1e08      	subs	r0, r1, #0
 800b00a:	d005      	beq.n	800b018 <__ascii_wctomb+0x12>
 800b00c:	2aff      	cmp	r2, #255	@ 0xff
 800b00e:	d904      	bls.n	800b01a <__ascii_wctomb+0x14>
 800b010:	228a      	movs	r2, #138	@ 0x8a
 800b012:	2001      	movs	r0, #1
 800b014:	601a      	str	r2, [r3, #0]
 800b016:	4240      	negs	r0, r0
 800b018:	4770      	bx	lr
 800b01a:	2001      	movs	r0, #1
 800b01c:	700a      	strb	r2, [r1, #0]
 800b01e:	e7fb      	b.n	800b018 <__ascii_wctomb+0x12>

0800b020 <fiprintf>:
 800b020:	b40e      	push	{r1, r2, r3}
 800b022:	b517      	push	{r0, r1, r2, r4, lr}
 800b024:	4c05      	ldr	r4, [pc, #20]	@ (800b03c <fiprintf+0x1c>)
 800b026:	ab05      	add	r3, sp, #20
 800b028:	cb04      	ldmia	r3!, {r2}
 800b02a:	0001      	movs	r1, r0
 800b02c:	6820      	ldr	r0, [r4, #0]
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	f000 f8cc 	bl	800b1cc <_vfiprintf_r>
 800b034:	bc1e      	pop	{r1, r2, r3, r4}
 800b036:	bc08      	pop	{r3}
 800b038:	b003      	add	sp, #12
 800b03a:	4718      	bx	r3
 800b03c:	2000001c 	.word	0x2000001c

0800b040 <__swhatbuf_r>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	000e      	movs	r6, r1
 800b044:	001d      	movs	r5, r3
 800b046:	230e      	movs	r3, #14
 800b048:	5ec9      	ldrsh	r1, [r1, r3]
 800b04a:	0014      	movs	r4, r2
 800b04c:	b096      	sub	sp, #88	@ 0x58
 800b04e:	2900      	cmp	r1, #0
 800b050:	da0c      	bge.n	800b06c <__swhatbuf_r+0x2c>
 800b052:	89b2      	ldrh	r2, [r6, #12]
 800b054:	2380      	movs	r3, #128	@ 0x80
 800b056:	0011      	movs	r1, r2
 800b058:	4019      	ands	r1, r3
 800b05a:	421a      	tst	r2, r3
 800b05c:	d114      	bne.n	800b088 <__swhatbuf_r+0x48>
 800b05e:	2380      	movs	r3, #128	@ 0x80
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	2000      	movs	r0, #0
 800b064:	6029      	str	r1, [r5, #0]
 800b066:	6023      	str	r3, [r4, #0]
 800b068:	b016      	add	sp, #88	@ 0x58
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	466a      	mov	r2, sp
 800b06e:	f000 f853 	bl	800b118 <_fstat_r>
 800b072:	2800      	cmp	r0, #0
 800b074:	dbed      	blt.n	800b052 <__swhatbuf_r+0x12>
 800b076:	23f0      	movs	r3, #240	@ 0xf0
 800b078:	9901      	ldr	r1, [sp, #4]
 800b07a:	021b      	lsls	r3, r3, #8
 800b07c:	4019      	ands	r1, r3
 800b07e:	4b04      	ldr	r3, [pc, #16]	@ (800b090 <__swhatbuf_r+0x50>)
 800b080:	18c9      	adds	r1, r1, r3
 800b082:	424b      	negs	r3, r1
 800b084:	4159      	adcs	r1, r3
 800b086:	e7ea      	b.n	800b05e <__swhatbuf_r+0x1e>
 800b088:	2100      	movs	r1, #0
 800b08a:	2340      	movs	r3, #64	@ 0x40
 800b08c:	e7e9      	b.n	800b062 <__swhatbuf_r+0x22>
 800b08e:	46c0      	nop			@ (mov r8, r8)
 800b090:	ffffe000 	.word	0xffffe000

0800b094 <__smakebuf_r>:
 800b094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b096:	2602      	movs	r6, #2
 800b098:	898b      	ldrh	r3, [r1, #12]
 800b09a:	0005      	movs	r5, r0
 800b09c:	000c      	movs	r4, r1
 800b09e:	b085      	sub	sp, #20
 800b0a0:	4233      	tst	r3, r6
 800b0a2:	d007      	beq.n	800b0b4 <__smakebuf_r+0x20>
 800b0a4:	0023      	movs	r3, r4
 800b0a6:	3347      	adds	r3, #71	@ 0x47
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	6123      	str	r3, [r4, #16]
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	6163      	str	r3, [r4, #20]
 800b0b0:	b005      	add	sp, #20
 800b0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0b4:	ab03      	add	r3, sp, #12
 800b0b6:	aa02      	add	r2, sp, #8
 800b0b8:	f7ff ffc2 	bl	800b040 <__swhatbuf_r>
 800b0bc:	9f02      	ldr	r7, [sp, #8]
 800b0be:	9001      	str	r0, [sp, #4]
 800b0c0:	0039      	movs	r1, r7
 800b0c2:	0028      	movs	r0, r5
 800b0c4:	f7ff f808 	bl	800a0d8 <_malloc_r>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d108      	bne.n	800b0de <__smakebuf_r+0x4a>
 800b0cc:	220c      	movs	r2, #12
 800b0ce:	5ea3      	ldrsh	r3, [r4, r2]
 800b0d0:	059a      	lsls	r2, r3, #22
 800b0d2:	d4ed      	bmi.n	800b0b0 <__smakebuf_r+0x1c>
 800b0d4:	2203      	movs	r2, #3
 800b0d6:	4393      	bics	r3, r2
 800b0d8:	431e      	orrs	r6, r3
 800b0da:	81a6      	strh	r6, [r4, #12]
 800b0dc:	e7e2      	b.n	800b0a4 <__smakebuf_r+0x10>
 800b0de:	2380      	movs	r3, #128	@ 0x80
 800b0e0:	89a2      	ldrh	r2, [r4, #12]
 800b0e2:	6020      	str	r0, [r4, #0]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	81a3      	strh	r3, [r4, #12]
 800b0e8:	9b03      	ldr	r3, [sp, #12]
 800b0ea:	6120      	str	r0, [r4, #16]
 800b0ec:	6167      	str	r7, [r4, #20]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00c      	beq.n	800b10c <__smakebuf_r+0x78>
 800b0f2:	0028      	movs	r0, r5
 800b0f4:	230e      	movs	r3, #14
 800b0f6:	5ee1      	ldrsh	r1, [r4, r3]
 800b0f8:	f000 f820 	bl	800b13c <_isatty_r>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d005      	beq.n	800b10c <__smakebuf_r+0x78>
 800b100:	2303      	movs	r3, #3
 800b102:	89a2      	ldrh	r2, [r4, #12]
 800b104:	439a      	bics	r2, r3
 800b106:	3b02      	subs	r3, #2
 800b108:	4313      	orrs	r3, r2
 800b10a:	81a3      	strh	r3, [r4, #12]
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	9a01      	ldr	r2, [sp, #4]
 800b110:	4313      	orrs	r3, r2
 800b112:	81a3      	strh	r3, [r4, #12]
 800b114:	e7cc      	b.n	800b0b0 <__smakebuf_r+0x1c>
	...

0800b118 <_fstat_r>:
 800b118:	2300      	movs	r3, #0
 800b11a:	b570      	push	{r4, r5, r6, lr}
 800b11c:	4d06      	ldr	r5, [pc, #24]	@ (800b138 <_fstat_r+0x20>)
 800b11e:	0004      	movs	r4, r0
 800b120:	0008      	movs	r0, r1
 800b122:	0011      	movs	r1, r2
 800b124:	602b      	str	r3, [r5, #0]
 800b126:	f7f9 f8e7 	bl	80042f8 <_fstat>
 800b12a:	1c43      	adds	r3, r0, #1
 800b12c:	d103      	bne.n	800b136 <_fstat_r+0x1e>
 800b12e:	682b      	ldr	r3, [r5, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d000      	beq.n	800b136 <_fstat_r+0x1e>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	20000d9c 	.word	0x20000d9c

0800b13c <_isatty_r>:
 800b13c:	2300      	movs	r3, #0
 800b13e:	b570      	push	{r4, r5, r6, lr}
 800b140:	4d06      	ldr	r5, [pc, #24]	@ (800b15c <_isatty_r+0x20>)
 800b142:	0004      	movs	r4, r0
 800b144:	0008      	movs	r0, r1
 800b146:	602b      	str	r3, [r5, #0]
 800b148:	f7f9 f8e4 	bl	8004314 <_isatty>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d103      	bne.n	800b158 <_isatty_r+0x1c>
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d000      	beq.n	800b158 <_isatty_r+0x1c>
 800b156:	6023      	str	r3, [r4, #0]
 800b158:	bd70      	pop	{r4, r5, r6, pc}
 800b15a:	46c0      	nop			@ (mov r8, r8)
 800b15c:	20000d9c 	.word	0x20000d9c

0800b160 <abort>:
 800b160:	2006      	movs	r0, #6
 800b162:	b510      	push	{r4, lr}
 800b164:	f000 f978 	bl	800b458 <raise>
 800b168:	2001      	movs	r0, #1
 800b16a:	f7f9 f875 	bl	8004258 <_exit>

0800b16e <_malloc_usable_size_r>:
 800b16e:	1f0b      	subs	r3, r1, #4
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	1f18      	subs	r0, r3, #4
 800b174:	2b00      	cmp	r3, #0
 800b176:	da01      	bge.n	800b17c <_malloc_usable_size_r+0xe>
 800b178:	580b      	ldr	r3, [r1, r0]
 800b17a:	18c0      	adds	r0, r0, r3
 800b17c:	4770      	bx	lr

0800b17e <__sfputc_r>:
 800b17e:	6893      	ldr	r3, [r2, #8]
 800b180:	b510      	push	{r4, lr}
 800b182:	3b01      	subs	r3, #1
 800b184:	6093      	str	r3, [r2, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	da04      	bge.n	800b194 <__sfputc_r+0x16>
 800b18a:	6994      	ldr	r4, [r2, #24]
 800b18c:	42a3      	cmp	r3, r4
 800b18e:	db07      	blt.n	800b1a0 <__sfputc_r+0x22>
 800b190:	290a      	cmp	r1, #10
 800b192:	d005      	beq.n	800b1a0 <__sfputc_r+0x22>
 800b194:	6813      	ldr	r3, [r2, #0]
 800b196:	1c58      	adds	r0, r3, #1
 800b198:	6010      	str	r0, [r2, #0]
 800b19a:	7019      	strb	r1, [r3, #0]
 800b19c:	0008      	movs	r0, r1
 800b19e:	bd10      	pop	{r4, pc}
 800b1a0:	f7ff fdd5 	bl	800ad4e <__swbuf_r>
 800b1a4:	0001      	movs	r1, r0
 800b1a6:	e7f9      	b.n	800b19c <__sfputc_r+0x1e>

0800b1a8 <__sfputs_r>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	0006      	movs	r6, r0
 800b1ac:	000f      	movs	r7, r1
 800b1ae:	0014      	movs	r4, r2
 800b1b0:	18d5      	adds	r5, r2, r3
 800b1b2:	42ac      	cmp	r4, r5
 800b1b4:	d101      	bne.n	800b1ba <__sfputs_r+0x12>
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	e007      	b.n	800b1ca <__sfputs_r+0x22>
 800b1ba:	7821      	ldrb	r1, [r4, #0]
 800b1bc:	003a      	movs	r2, r7
 800b1be:	0030      	movs	r0, r6
 800b1c0:	f7ff ffdd 	bl	800b17e <__sfputc_r>
 800b1c4:	3401      	adds	r4, #1
 800b1c6:	1c43      	adds	r3, r0, #1
 800b1c8:	d1f3      	bne.n	800b1b2 <__sfputs_r+0xa>
 800b1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1cc <_vfiprintf_r>:
 800b1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ce:	b0a1      	sub	sp, #132	@ 0x84
 800b1d0:	000f      	movs	r7, r1
 800b1d2:	0015      	movs	r5, r2
 800b1d4:	001e      	movs	r6, r3
 800b1d6:	9003      	str	r0, [sp, #12]
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d004      	beq.n	800b1e6 <_vfiprintf_r+0x1a>
 800b1dc:	6a03      	ldr	r3, [r0, #32]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <_vfiprintf_r+0x1a>
 800b1e2:	f7fd ff59 	bl	8009098 <__sinit>
 800b1e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1e8:	07db      	lsls	r3, r3, #31
 800b1ea:	d405      	bmi.n	800b1f8 <_vfiprintf_r+0x2c>
 800b1ec:	89bb      	ldrh	r3, [r7, #12]
 800b1ee:	059b      	lsls	r3, r3, #22
 800b1f0:	d402      	bmi.n	800b1f8 <_vfiprintf_r+0x2c>
 800b1f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b1f4:	f7fe f877 	bl	80092e6 <__retarget_lock_acquire_recursive>
 800b1f8:	89bb      	ldrh	r3, [r7, #12]
 800b1fa:	071b      	lsls	r3, r3, #28
 800b1fc:	d502      	bpl.n	800b204 <_vfiprintf_r+0x38>
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d113      	bne.n	800b22c <_vfiprintf_r+0x60>
 800b204:	0039      	movs	r1, r7
 800b206:	9803      	ldr	r0, [sp, #12]
 800b208:	f7ff fde4 	bl	800add4 <__swsetup_r>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d00d      	beq.n	800b22c <_vfiprintf_r+0x60>
 800b210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b212:	07db      	lsls	r3, r3, #31
 800b214:	d503      	bpl.n	800b21e <_vfiprintf_r+0x52>
 800b216:	2001      	movs	r0, #1
 800b218:	4240      	negs	r0, r0
 800b21a:	b021      	add	sp, #132	@ 0x84
 800b21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b21e:	89bb      	ldrh	r3, [r7, #12]
 800b220:	059b      	lsls	r3, r3, #22
 800b222:	d4f8      	bmi.n	800b216 <_vfiprintf_r+0x4a>
 800b224:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b226:	f7fe f85f 	bl	80092e8 <__retarget_lock_release_recursive>
 800b22a:	e7f4      	b.n	800b216 <_vfiprintf_r+0x4a>
 800b22c:	2300      	movs	r3, #0
 800b22e:	ac08      	add	r4, sp, #32
 800b230:	6163      	str	r3, [r4, #20]
 800b232:	3320      	adds	r3, #32
 800b234:	7663      	strb	r3, [r4, #25]
 800b236:	3310      	adds	r3, #16
 800b238:	76a3      	strb	r3, [r4, #26]
 800b23a:	9607      	str	r6, [sp, #28]
 800b23c:	002e      	movs	r6, r5
 800b23e:	7833      	ldrb	r3, [r6, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <_vfiprintf_r+0x7c>
 800b244:	2b25      	cmp	r3, #37	@ 0x25
 800b246:	d148      	bne.n	800b2da <_vfiprintf_r+0x10e>
 800b248:	1b73      	subs	r3, r6, r5
 800b24a:	9305      	str	r3, [sp, #20]
 800b24c:	42ae      	cmp	r6, r5
 800b24e:	d00b      	beq.n	800b268 <_vfiprintf_r+0x9c>
 800b250:	002a      	movs	r2, r5
 800b252:	0039      	movs	r1, r7
 800b254:	9803      	ldr	r0, [sp, #12]
 800b256:	f7ff ffa7 	bl	800b1a8 <__sfputs_r>
 800b25a:	3001      	adds	r0, #1
 800b25c:	d100      	bne.n	800b260 <_vfiprintf_r+0x94>
 800b25e:	e0ae      	b.n	800b3be <_vfiprintf_r+0x1f2>
 800b260:	6963      	ldr	r3, [r4, #20]
 800b262:	9a05      	ldr	r2, [sp, #20]
 800b264:	189b      	adds	r3, r3, r2
 800b266:	6163      	str	r3, [r4, #20]
 800b268:	7833      	ldrb	r3, [r6, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d100      	bne.n	800b270 <_vfiprintf_r+0xa4>
 800b26e:	e0a6      	b.n	800b3be <_vfiprintf_r+0x1f2>
 800b270:	2201      	movs	r2, #1
 800b272:	2300      	movs	r3, #0
 800b274:	4252      	negs	r2, r2
 800b276:	6062      	str	r2, [r4, #4]
 800b278:	a904      	add	r1, sp, #16
 800b27a:	3254      	adds	r2, #84	@ 0x54
 800b27c:	1852      	adds	r2, r2, r1
 800b27e:	1c75      	adds	r5, r6, #1
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	60e3      	str	r3, [r4, #12]
 800b284:	60a3      	str	r3, [r4, #8]
 800b286:	7013      	strb	r3, [r2, #0]
 800b288:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b28a:	4b59      	ldr	r3, [pc, #356]	@ (800b3f0 <_vfiprintf_r+0x224>)
 800b28c:	2205      	movs	r2, #5
 800b28e:	0018      	movs	r0, r3
 800b290:	7829      	ldrb	r1, [r5, #0]
 800b292:	9305      	str	r3, [sp, #20]
 800b294:	f7fe f829 	bl	80092ea <memchr>
 800b298:	1c6e      	adds	r6, r5, #1
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d11f      	bne.n	800b2de <_vfiprintf_r+0x112>
 800b29e:	6822      	ldr	r2, [r4, #0]
 800b2a0:	06d3      	lsls	r3, r2, #27
 800b2a2:	d504      	bpl.n	800b2ae <_vfiprintf_r+0xe2>
 800b2a4:	2353      	movs	r3, #83	@ 0x53
 800b2a6:	a904      	add	r1, sp, #16
 800b2a8:	185b      	adds	r3, r3, r1
 800b2aa:	2120      	movs	r1, #32
 800b2ac:	7019      	strb	r1, [r3, #0]
 800b2ae:	0713      	lsls	r3, r2, #28
 800b2b0:	d504      	bpl.n	800b2bc <_vfiprintf_r+0xf0>
 800b2b2:	2353      	movs	r3, #83	@ 0x53
 800b2b4:	a904      	add	r1, sp, #16
 800b2b6:	185b      	adds	r3, r3, r1
 800b2b8:	212b      	movs	r1, #43	@ 0x2b
 800b2ba:	7019      	strb	r1, [r3, #0]
 800b2bc:	782b      	ldrb	r3, [r5, #0]
 800b2be:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2c0:	d016      	beq.n	800b2f0 <_vfiprintf_r+0x124>
 800b2c2:	002e      	movs	r6, r5
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	200a      	movs	r0, #10
 800b2c8:	68e3      	ldr	r3, [r4, #12]
 800b2ca:	7832      	ldrb	r2, [r6, #0]
 800b2cc:	1c75      	adds	r5, r6, #1
 800b2ce:	3a30      	subs	r2, #48	@ 0x30
 800b2d0:	2a09      	cmp	r2, #9
 800b2d2:	d950      	bls.n	800b376 <_vfiprintf_r+0x1aa>
 800b2d4:	2900      	cmp	r1, #0
 800b2d6:	d111      	bne.n	800b2fc <_vfiprintf_r+0x130>
 800b2d8:	e017      	b.n	800b30a <_vfiprintf_r+0x13e>
 800b2da:	3601      	adds	r6, #1
 800b2dc:	e7af      	b.n	800b23e <_vfiprintf_r+0x72>
 800b2de:	9b05      	ldr	r3, [sp, #20]
 800b2e0:	6822      	ldr	r2, [r4, #0]
 800b2e2:	1ac0      	subs	r0, r0, r3
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	4083      	lsls	r3, r0
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	0035      	movs	r5, r6
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	e7cc      	b.n	800b28a <_vfiprintf_r+0xbe>
 800b2f0:	9b07      	ldr	r3, [sp, #28]
 800b2f2:	1d19      	adds	r1, r3, #4
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	9107      	str	r1, [sp, #28]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	db01      	blt.n	800b300 <_vfiprintf_r+0x134>
 800b2fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2fe:	e004      	b.n	800b30a <_vfiprintf_r+0x13e>
 800b300:	425b      	negs	r3, r3
 800b302:	60e3      	str	r3, [r4, #12]
 800b304:	2302      	movs	r3, #2
 800b306:	4313      	orrs	r3, r2
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	7833      	ldrb	r3, [r6, #0]
 800b30c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b30e:	d10c      	bne.n	800b32a <_vfiprintf_r+0x15e>
 800b310:	7873      	ldrb	r3, [r6, #1]
 800b312:	2b2a      	cmp	r3, #42	@ 0x2a
 800b314:	d134      	bne.n	800b380 <_vfiprintf_r+0x1b4>
 800b316:	9b07      	ldr	r3, [sp, #28]
 800b318:	3602      	adds	r6, #2
 800b31a:	1d1a      	adds	r2, r3, #4
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	9207      	str	r2, [sp, #28]
 800b320:	2b00      	cmp	r3, #0
 800b322:	da01      	bge.n	800b328 <_vfiprintf_r+0x15c>
 800b324:	2301      	movs	r3, #1
 800b326:	425b      	negs	r3, r3
 800b328:	9309      	str	r3, [sp, #36]	@ 0x24
 800b32a:	4d32      	ldr	r5, [pc, #200]	@ (800b3f4 <_vfiprintf_r+0x228>)
 800b32c:	2203      	movs	r2, #3
 800b32e:	0028      	movs	r0, r5
 800b330:	7831      	ldrb	r1, [r6, #0]
 800b332:	f7fd ffda 	bl	80092ea <memchr>
 800b336:	2800      	cmp	r0, #0
 800b338:	d006      	beq.n	800b348 <_vfiprintf_r+0x17c>
 800b33a:	2340      	movs	r3, #64	@ 0x40
 800b33c:	1b40      	subs	r0, r0, r5
 800b33e:	4083      	lsls	r3, r0
 800b340:	6822      	ldr	r2, [r4, #0]
 800b342:	3601      	adds	r6, #1
 800b344:	4313      	orrs	r3, r2
 800b346:	6023      	str	r3, [r4, #0]
 800b348:	7831      	ldrb	r1, [r6, #0]
 800b34a:	2206      	movs	r2, #6
 800b34c:	482a      	ldr	r0, [pc, #168]	@ (800b3f8 <_vfiprintf_r+0x22c>)
 800b34e:	1c75      	adds	r5, r6, #1
 800b350:	7621      	strb	r1, [r4, #24]
 800b352:	f7fd ffca 	bl	80092ea <memchr>
 800b356:	2800      	cmp	r0, #0
 800b358:	d040      	beq.n	800b3dc <_vfiprintf_r+0x210>
 800b35a:	4b28      	ldr	r3, [pc, #160]	@ (800b3fc <_vfiprintf_r+0x230>)
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d122      	bne.n	800b3a6 <_vfiprintf_r+0x1da>
 800b360:	2207      	movs	r2, #7
 800b362:	9b07      	ldr	r3, [sp, #28]
 800b364:	3307      	adds	r3, #7
 800b366:	4393      	bics	r3, r2
 800b368:	3308      	adds	r3, #8
 800b36a:	9307      	str	r3, [sp, #28]
 800b36c:	6963      	ldr	r3, [r4, #20]
 800b36e:	9a04      	ldr	r2, [sp, #16]
 800b370:	189b      	adds	r3, r3, r2
 800b372:	6163      	str	r3, [r4, #20]
 800b374:	e762      	b.n	800b23c <_vfiprintf_r+0x70>
 800b376:	4343      	muls	r3, r0
 800b378:	002e      	movs	r6, r5
 800b37a:	2101      	movs	r1, #1
 800b37c:	189b      	adds	r3, r3, r2
 800b37e:	e7a4      	b.n	800b2ca <_vfiprintf_r+0xfe>
 800b380:	2300      	movs	r3, #0
 800b382:	200a      	movs	r0, #10
 800b384:	0019      	movs	r1, r3
 800b386:	3601      	adds	r6, #1
 800b388:	6063      	str	r3, [r4, #4]
 800b38a:	7832      	ldrb	r2, [r6, #0]
 800b38c:	1c75      	adds	r5, r6, #1
 800b38e:	3a30      	subs	r2, #48	@ 0x30
 800b390:	2a09      	cmp	r2, #9
 800b392:	d903      	bls.n	800b39c <_vfiprintf_r+0x1d0>
 800b394:	2b00      	cmp	r3, #0
 800b396:	d0c8      	beq.n	800b32a <_vfiprintf_r+0x15e>
 800b398:	9109      	str	r1, [sp, #36]	@ 0x24
 800b39a:	e7c6      	b.n	800b32a <_vfiprintf_r+0x15e>
 800b39c:	4341      	muls	r1, r0
 800b39e:	002e      	movs	r6, r5
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	1889      	adds	r1, r1, r2
 800b3a4:	e7f1      	b.n	800b38a <_vfiprintf_r+0x1be>
 800b3a6:	aa07      	add	r2, sp, #28
 800b3a8:	9200      	str	r2, [sp, #0]
 800b3aa:	0021      	movs	r1, r4
 800b3ac:	003a      	movs	r2, r7
 800b3ae:	4b14      	ldr	r3, [pc, #80]	@ (800b400 <_vfiprintf_r+0x234>)
 800b3b0:	9803      	ldr	r0, [sp, #12]
 800b3b2:	f7fd fa27 	bl	8008804 <_printf_float>
 800b3b6:	9004      	str	r0, [sp, #16]
 800b3b8:	9b04      	ldr	r3, [sp, #16]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	d1d6      	bne.n	800b36c <_vfiprintf_r+0x1a0>
 800b3be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3c0:	07db      	lsls	r3, r3, #31
 800b3c2:	d405      	bmi.n	800b3d0 <_vfiprintf_r+0x204>
 800b3c4:	89bb      	ldrh	r3, [r7, #12]
 800b3c6:	059b      	lsls	r3, r3, #22
 800b3c8:	d402      	bmi.n	800b3d0 <_vfiprintf_r+0x204>
 800b3ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b3cc:	f7fd ff8c 	bl	80092e8 <__retarget_lock_release_recursive>
 800b3d0:	89bb      	ldrh	r3, [r7, #12]
 800b3d2:	065b      	lsls	r3, r3, #25
 800b3d4:	d500      	bpl.n	800b3d8 <_vfiprintf_r+0x20c>
 800b3d6:	e71e      	b.n	800b216 <_vfiprintf_r+0x4a>
 800b3d8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b3da:	e71e      	b.n	800b21a <_vfiprintf_r+0x4e>
 800b3dc:	aa07      	add	r2, sp, #28
 800b3de:	9200      	str	r2, [sp, #0]
 800b3e0:	0021      	movs	r1, r4
 800b3e2:	003a      	movs	r2, r7
 800b3e4:	4b06      	ldr	r3, [pc, #24]	@ (800b400 <_vfiprintf_r+0x234>)
 800b3e6:	9803      	ldr	r0, [sp, #12]
 800b3e8:	f7fd fcba 	bl	8008d60 <_printf_i>
 800b3ec:	e7e3      	b.n	800b3b6 <_vfiprintf_r+0x1ea>
 800b3ee:	46c0      	nop			@ (mov r8, r8)
 800b3f0:	0800cfaa 	.word	0x0800cfaa
 800b3f4:	0800cfb0 	.word	0x0800cfb0
 800b3f8:	0800cfb4 	.word	0x0800cfb4
 800b3fc:	08008805 	.word	0x08008805
 800b400:	0800b1a9 	.word	0x0800b1a9

0800b404 <_raise_r>:
 800b404:	b570      	push	{r4, r5, r6, lr}
 800b406:	0004      	movs	r4, r0
 800b408:	000d      	movs	r5, r1
 800b40a:	291f      	cmp	r1, #31
 800b40c:	d904      	bls.n	800b418 <_raise_r+0x14>
 800b40e:	2316      	movs	r3, #22
 800b410:	6003      	str	r3, [r0, #0]
 800b412:	2001      	movs	r0, #1
 800b414:	4240      	negs	r0, r0
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d004      	beq.n	800b428 <_raise_r+0x24>
 800b41e:	008a      	lsls	r2, r1, #2
 800b420:	189b      	adds	r3, r3, r2
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	2a00      	cmp	r2, #0
 800b426:	d108      	bne.n	800b43a <_raise_r+0x36>
 800b428:	0020      	movs	r0, r4
 800b42a:	f000 f831 	bl	800b490 <_getpid_r>
 800b42e:	002a      	movs	r2, r5
 800b430:	0001      	movs	r1, r0
 800b432:	0020      	movs	r0, r4
 800b434:	f000 f81a 	bl	800b46c <_kill_r>
 800b438:	e7ed      	b.n	800b416 <_raise_r+0x12>
 800b43a:	2a01      	cmp	r2, #1
 800b43c:	d009      	beq.n	800b452 <_raise_r+0x4e>
 800b43e:	1c51      	adds	r1, r2, #1
 800b440:	d103      	bne.n	800b44a <_raise_r+0x46>
 800b442:	2316      	movs	r3, #22
 800b444:	6003      	str	r3, [r0, #0]
 800b446:	2001      	movs	r0, #1
 800b448:	e7e5      	b.n	800b416 <_raise_r+0x12>
 800b44a:	2100      	movs	r1, #0
 800b44c:	0028      	movs	r0, r5
 800b44e:	6019      	str	r1, [r3, #0]
 800b450:	4790      	blx	r2
 800b452:	2000      	movs	r0, #0
 800b454:	e7df      	b.n	800b416 <_raise_r+0x12>
	...

0800b458 <raise>:
 800b458:	b510      	push	{r4, lr}
 800b45a:	4b03      	ldr	r3, [pc, #12]	@ (800b468 <raise+0x10>)
 800b45c:	0001      	movs	r1, r0
 800b45e:	6818      	ldr	r0, [r3, #0]
 800b460:	f7ff ffd0 	bl	800b404 <_raise_r>
 800b464:	bd10      	pop	{r4, pc}
 800b466:	46c0      	nop			@ (mov r8, r8)
 800b468:	2000001c 	.word	0x2000001c

0800b46c <_kill_r>:
 800b46c:	2300      	movs	r3, #0
 800b46e:	b570      	push	{r4, r5, r6, lr}
 800b470:	4d06      	ldr	r5, [pc, #24]	@ (800b48c <_kill_r+0x20>)
 800b472:	0004      	movs	r4, r0
 800b474:	0008      	movs	r0, r1
 800b476:	0011      	movs	r1, r2
 800b478:	602b      	str	r3, [r5, #0]
 800b47a:	f7f8 fedd 	bl	8004238 <_kill>
 800b47e:	1c43      	adds	r3, r0, #1
 800b480:	d103      	bne.n	800b48a <_kill_r+0x1e>
 800b482:	682b      	ldr	r3, [r5, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d000      	beq.n	800b48a <_kill_r+0x1e>
 800b488:	6023      	str	r3, [r4, #0]
 800b48a:	bd70      	pop	{r4, r5, r6, pc}
 800b48c:	20000d9c 	.word	0x20000d9c

0800b490 <_getpid_r>:
 800b490:	b510      	push	{r4, lr}
 800b492:	f7f8 fecb 	bl	800422c <_getpid>
 800b496:	bd10      	pop	{r4, pc}

0800b498 <sin>:
 800b498:	b530      	push	{r4, r5, lr}
 800b49a:	4a1f      	ldr	r2, [pc, #124]	@ (800b518 <sin+0x80>)
 800b49c:	004b      	lsls	r3, r1, #1
 800b49e:	b087      	sub	sp, #28
 800b4a0:	085b      	lsrs	r3, r3, #1
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d806      	bhi.n	800b4b4 <sin+0x1c>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f000 f8f7 	bl	800b6a0 <__kernel_sin>
 800b4b2:	e006      	b.n	800b4c2 <sin+0x2a>
 800b4b4:	4a19      	ldr	r2, [pc, #100]	@ (800b51c <sin+0x84>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d905      	bls.n	800b4c6 <sin+0x2e>
 800b4ba:	0002      	movs	r2, r0
 800b4bc:	000b      	movs	r3, r1
 800b4be:	f7f7 fb1d 	bl	8002afc <__aeabi_dsub>
 800b4c2:	b007      	add	sp, #28
 800b4c4:	bd30      	pop	{r4, r5, pc}
 800b4c6:	aa02      	add	r2, sp, #8
 800b4c8:	f000 f996 	bl	800b7f8 <__ieee754_rem_pio2>
 800b4cc:	9c04      	ldr	r4, [sp, #16]
 800b4ce:	9d05      	ldr	r5, [sp, #20]
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	4003      	ands	r3, r0
 800b4d4:	9802      	ldr	r0, [sp, #8]
 800b4d6:	9903      	ldr	r1, [sp, #12]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d008      	beq.n	800b4ee <sin+0x56>
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d00b      	beq.n	800b4f8 <sin+0x60>
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d113      	bne.n	800b50c <sin+0x74>
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	0022      	movs	r2, r4
 800b4ea:	002b      	movs	r3, r5
 800b4ec:	e7df      	b.n	800b4ae <sin+0x16>
 800b4ee:	0022      	movs	r2, r4
 800b4f0:	002b      	movs	r3, r5
 800b4f2:	f000 f815 	bl	800b520 <__kernel_cos>
 800b4f6:	e7e4      	b.n	800b4c2 <sin+0x2a>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	0022      	movs	r2, r4
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	002b      	movs	r3, r5
 800b500:	f000 f8ce 	bl	800b6a0 <__kernel_sin>
 800b504:	2380      	movs	r3, #128	@ 0x80
 800b506:	061b      	lsls	r3, r3, #24
 800b508:	18c9      	adds	r1, r1, r3
 800b50a:	e7da      	b.n	800b4c2 <sin+0x2a>
 800b50c:	0022      	movs	r2, r4
 800b50e:	002b      	movs	r3, r5
 800b510:	f000 f806 	bl	800b520 <__kernel_cos>
 800b514:	e7f6      	b.n	800b504 <sin+0x6c>
 800b516:	46c0      	nop			@ (mov r8, r8)
 800b518:	3fe921fb 	.word	0x3fe921fb
 800b51c:	7fefffff 	.word	0x7fefffff

0800b520 <__kernel_cos>:
 800b520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b522:	b087      	sub	sp, #28
 800b524:	9204      	str	r2, [sp, #16]
 800b526:	9305      	str	r3, [sp, #20]
 800b528:	004b      	lsls	r3, r1, #1
 800b52a:	085b      	lsrs	r3, r3, #1
 800b52c:	9301      	str	r3, [sp, #4]
 800b52e:	23f9      	movs	r3, #249	@ 0xf9
 800b530:	9a01      	ldr	r2, [sp, #4]
 800b532:	0004      	movs	r4, r0
 800b534:	000d      	movs	r5, r1
 800b536:	059b      	lsls	r3, r3, #22
 800b538:	429a      	cmp	r2, r3
 800b53a:	d204      	bcs.n	800b546 <__kernel_cos+0x26>
 800b53c:	f7f7 ff0a 	bl	8003354 <__aeabi_d2iz>
 800b540:	2800      	cmp	r0, #0
 800b542:	d100      	bne.n	800b546 <__kernel_cos+0x26>
 800b544:	e084      	b.n	800b650 <__kernel_cos+0x130>
 800b546:	0022      	movs	r2, r4
 800b548:	002b      	movs	r3, r5
 800b54a:	0020      	movs	r0, r4
 800b54c:	0029      	movs	r1, r5
 800b54e:	f7f6 ffef 	bl	8002530 <__aeabi_dmul>
 800b552:	2200      	movs	r2, #0
 800b554:	4b40      	ldr	r3, [pc, #256]	@ (800b658 <__kernel_cos+0x138>)
 800b556:	0006      	movs	r6, r0
 800b558:	000f      	movs	r7, r1
 800b55a:	f7f6 ffe9 	bl	8002530 <__aeabi_dmul>
 800b55e:	4a3f      	ldr	r2, [pc, #252]	@ (800b65c <__kernel_cos+0x13c>)
 800b560:	9002      	str	r0, [sp, #8]
 800b562:	9103      	str	r1, [sp, #12]
 800b564:	4b3e      	ldr	r3, [pc, #248]	@ (800b660 <__kernel_cos+0x140>)
 800b566:	0030      	movs	r0, r6
 800b568:	0039      	movs	r1, r7
 800b56a:	f7f6 ffe1 	bl	8002530 <__aeabi_dmul>
 800b56e:	4a3d      	ldr	r2, [pc, #244]	@ (800b664 <__kernel_cos+0x144>)
 800b570:	4b3d      	ldr	r3, [pc, #244]	@ (800b668 <__kernel_cos+0x148>)
 800b572:	f7f5 ffdd 	bl	8001530 <__aeabi_dadd>
 800b576:	0032      	movs	r2, r6
 800b578:	003b      	movs	r3, r7
 800b57a:	f7f6 ffd9 	bl	8002530 <__aeabi_dmul>
 800b57e:	4a3b      	ldr	r2, [pc, #236]	@ (800b66c <__kernel_cos+0x14c>)
 800b580:	4b3b      	ldr	r3, [pc, #236]	@ (800b670 <__kernel_cos+0x150>)
 800b582:	f7f7 fabb 	bl	8002afc <__aeabi_dsub>
 800b586:	0032      	movs	r2, r6
 800b588:	003b      	movs	r3, r7
 800b58a:	f7f6 ffd1 	bl	8002530 <__aeabi_dmul>
 800b58e:	4a39      	ldr	r2, [pc, #228]	@ (800b674 <__kernel_cos+0x154>)
 800b590:	4b39      	ldr	r3, [pc, #228]	@ (800b678 <__kernel_cos+0x158>)
 800b592:	f7f5 ffcd 	bl	8001530 <__aeabi_dadd>
 800b596:	0032      	movs	r2, r6
 800b598:	003b      	movs	r3, r7
 800b59a:	f7f6 ffc9 	bl	8002530 <__aeabi_dmul>
 800b59e:	4a37      	ldr	r2, [pc, #220]	@ (800b67c <__kernel_cos+0x15c>)
 800b5a0:	4b37      	ldr	r3, [pc, #220]	@ (800b680 <__kernel_cos+0x160>)
 800b5a2:	f7f7 faab 	bl	8002afc <__aeabi_dsub>
 800b5a6:	0032      	movs	r2, r6
 800b5a8:	003b      	movs	r3, r7
 800b5aa:	f7f6 ffc1 	bl	8002530 <__aeabi_dmul>
 800b5ae:	4a35      	ldr	r2, [pc, #212]	@ (800b684 <__kernel_cos+0x164>)
 800b5b0:	4b35      	ldr	r3, [pc, #212]	@ (800b688 <__kernel_cos+0x168>)
 800b5b2:	f7f5 ffbd 	bl	8001530 <__aeabi_dadd>
 800b5b6:	0032      	movs	r2, r6
 800b5b8:	003b      	movs	r3, r7
 800b5ba:	f7f6 ffb9 	bl	8002530 <__aeabi_dmul>
 800b5be:	0032      	movs	r2, r6
 800b5c0:	003b      	movs	r3, r7
 800b5c2:	f7f6 ffb5 	bl	8002530 <__aeabi_dmul>
 800b5c6:	9a04      	ldr	r2, [sp, #16]
 800b5c8:	9b05      	ldr	r3, [sp, #20]
 800b5ca:	0006      	movs	r6, r0
 800b5cc:	000f      	movs	r7, r1
 800b5ce:	0020      	movs	r0, r4
 800b5d0:	0029      	movs	r1, r5
 800b5d2:	f7f6 ffad 	bl	8002530 <__aeabi_dmul>
 800b5d6:	0002      	movs	r2, r0
 800b5d8:	000b      	movs	r3, r1
 800b5da:	0030      	movs	r0, r6
 800b5dc:	0039      	movs	r1, r7
 800b5de:	f7f7 fa8d 	bl	8002afc <__aeabi_dsub>
 800b5e2:	4b2a      	ldr	r3, [pc, #168]	@ (800b68c <__kernel_cos+0x16c>)
 800b5e4:	9a01      	ldr	r2, [sp, #4]
 800b5e6:	9004      	str	r0, [sp, #16]
 800b5e8:	9105      	str	r1, [sp, #20]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d80d      	bhi.n	800b60a <__kernel_cos+0xea>
 800b5ee:	0002      	movs	r2, r0
 800b5f0:	000b      	movs	r3, r1
 800b5f2:	9802      	ldr	r0, [sp, #8]
 800b5f4:	9903      	ldr	r1, [sp, #12]
 800b5f6:	f7f7 fa81 	bl	8002afc <__aeabi_dsub>
 800b5fa:	0002      	movs	r2, r0
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	000b      	movs	r3, r1
 800b600:	4923      	ldr	r1, [pc, #140]	@ (800b690 <__kernel_cos+0x170>)
 800b602:	f7f7 fa7b 	bl	8002afc <__aeabi_dsub>
 800b606:	b007      	add	sp, #28
 800b608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b60a:	4b22      	ldr	r3, [pc, #136]	@ (800b694 <__kernel_cos+0x174>)
 800b60c:	9a01      	ldr	r2, [sp, #4]
 800b60e:	2600      	movs	r6, #0
 800b610:	429a      	cmp	r2, r3
 800b612:	d81b      	bhi.n	800b64c <__kernel_cos+0x12c>
 800b614:	0013      	movs	r3, r2
 800b616:	4a20      	ldr	r2, [pc, #128]	@ (800b698 <__kernel_cos+0x178>)
 800b618:	4694      	mov	ip, r2
 800b61a:	4463      	add	r3, ip
 800b61c:	001f      	movs	r7, r3
 800b61e:	0032      	movs	r2, r6
 800b620:	003b      	movs	r3, r7
 800b622:	2000      	movs	r0, #0
 800b624:	491a      	ldr	r1, [pc, #104]	@ (800b690 <__kernel_cos+0x170>)
 800b626:	f7f7 fa69 	bl	8002afc <__aeabi_dsub>
 800b62a:	0032      	movs	r2, r6
 800b62c:	0004      	movs	r4, r0
 800b62e:	000d      	movs	r5, r1
 800b630:	9802      	ldr	r0, [sp, #8]
 800b632:	9903      	ldr	r1, [sp, #12]
 800b634:	003b      	movs	r3, r7
 800b636:	f7f7 fa61 	bl	8002afc <__aeabi_dsub>
 800b63a:	9a04      	ldr	r2, [sp, #16]
 800b63c:	9b05      	ldr	r3, [sp, #20]
 800b63e:	f7f7 fa5d 	bl	8002afc <__aeabi_dsub>
 800b642:	0002      	movs	r2, r0
 800b644:	000b      	movs	r3, r1
 800b646:	0020      	movs	r0, r4
 800b648:	0029      	movs	r1, r5
 800b64a:	e7da      	b.n	800b602 <__kernel_cos+0xe2>
 800b64c:	4f13      	ldr	r7, [pc, #76]	@ (800b69c <__kernel_cos+0x17c>)
 800b64e:	e7e6      	b.n	800b61e <__kernel_cos+0xfe>
 800b650:	2000      	movs	r0, #0
 800b652:	490f      	ldr	r1, [pc, #60]	@ (800b690 <__kernel_cos+0x170>)
 800b654:	e7d7      	b.n	800b606 <__kernel_cos+0xe6>
 800b656:	46c0      	nop			@ (mov r8, r8)
 800b658:	3fe00000 	.word	0x3fe00000
 800b65c:	be8838d4 	.word	0xbe8838d4
 800b660:	bda8fae9 	.word	0xbda8fae9
 800b664:	bdb4b1c4 	.word	0xbdb4b1c4
 800b668:	3e21ee9e 	.word	0x3e21ee9e
 800b66c:	809c52ad 	.word	0x809c52ad
 800b670:	3e927e4f 	.word	0x3e927e4f
 800b674:	19cb1590 	.word	0x19cb1590
 800b678:	3efa01a0 	.word	0x3efa01a0
 800b67c:	16c15177 	.word	0x16c15177
 800b680:	3f56c16c 	.word	0x3f56c16c
 800b684:	5555554c 	.word	0x5555554c
 800b688:	3fa55555 	.word	0x3fa55555
 800b68c:	3fd33332 	.word	0x3fd33332
 800b690:	3ff00000 	.word	0x3ff00000
 800b694:	3fe90000 	.word	0x3fe90000
 800b698:	ffe00000 	.word	0xffe00000
 800b69c:	3fd20000 	.word	0x3fd20000

0800b6a0 <__kernel_sin>:
 800b6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6a2:	b089      	sub	sp, #36	@ 0x24
 800b6a4:	9202      	str	r2, [sp, #8]
 800b6a6:	9303      	str	r3, [sp, #12]
 800b6a8:	22f9      	movs	r2, #249	@ 0xf9
 800b6aa:	004b      	lsls	r3, r1, #1
 800b6ac:	0006      	movs	r6, r0
 800b6ae:	000f      	movs	r7, r1
 800b6b0:	085b      	lsrs	r3, r3, #1
 800b6b2:	0592      	lsls	r2, r2, #22
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d203      	bcs.n	800b6c0 <__kernel_sin+0x20>
 800b6b8:	f7f7 fe4c 	bl	8003354 <__aeabi_d2iz>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d04c      	beq.n	800b75a <__kernel_sin+0xba>
 800b6c0:	0032      	movs	r2, r6
 800b6c2:	003b      	movs	r3, r7
 800b6c4:	0030      	movs	r0, r6
 800b6c6:	0039      	movs	r1, r7
 800b6c8:	f7f6 ff32 	bl	8002530 <__aeabi_dmul>
 800b6cc:	0004      	movs	r4, r0
 800b6ce:	000d      	movs	r5, r1
 800b6d0:	0002      	movs	r2, r0
 800b6d2:	000b      	movs	r3, r1
 800b6d4:	0030      	movs	r0, r6
 800b6d6:	0039      	movs	r1, r7
 800b6d8:	f7f6 ff2a 	bl	8002530 <__aeabi_dmul>
 800b6dc:	4a39      	ldr	r2, [pc, #228]	@ (800b7c4 <__kernel_sin+0x124>)
 800b6de:	9000      	str	r0, [sp, #0]
 800b6e0:	9101      	str	r1, [sp, #4]
 800b6e2:	4b39      	ldr	r3, [pc, #228]	@ (800b7c8 <__kernel_sin+0x128>)
 800b6e4:	0020      	movs	r0, r4
 800b6e6:	0029      	movs	r1, r5
 800b6e8:	f7f6 ff22 	bl	8002530 <__aeabi_dmul>
 800b6ec:	4a37      	ldr	r2, [pc, #220]	@ (800b7cc <__kernel_sin+0x12c>)
 800b6ee:	4b38      	ldr	r3, [pc, #224]	@ (800b7d0 <__kernel_sin+0x130>)
 800b6f0:	f7f7 fa04 	bl	8002afc <__aeabi_dsub>
 800b6f4:	0022      	movs	r2, r4
 800b6f6:	002b      	movs	r3, r5
 800b6f8:	f7f6 ff1a 	bl	8002530 <__aeabi_dmul>
 800b6fc:	4a35      	ldr	r2, [pc, #212]	@ (800b7d4 <__kernel_sin+0x134>)
 800b6fe:	4b36      	ldr	r3, [pc, #216]	@ (800b7d8 <__kernel_sin+0x138>)
 800b700:	f7f5 ff16 	bl	8001530 <__aeabi_dadd>
 800b704:	0022      	movs	r2, r4
 800b706:	002b      	movs	r3, r5
 800b708:	f7f6 ff12 	bl	8002530 <__aeabi_dmul>
 800b70c:	4a33      	ldr	r2, [pc, #204]	@ (800b7dc <__kernel_sin+0x13c>)
 800b70e:	4b34      	ldr	r3, [pc, #208]	@ (800b7e0 <__kernel_sin+0x140>)
 800b710:	f7f7 f9f4 	bl	8002afc <__aeabi_dsub>
 800b714:	0022      	movs	r2, r4
 800b716:	002b      	movs	r3, r5
 800b718:	f7f6 ff0a 	bl	8002530 <__aeabi_dmul>
 800b71c:	4b31      	ldr	r3, [pc, #196]	@ (800b7e4 <__kernel_sin+0x144>)
 800b71e:	4a32      	ldr	r2, [pc, #200]	@ (800b7e8 <__kernel_sin+0x148>)
 800b720:	f7f5 ff06 	bl	8001530 <__aeabi_dadd>
 800b724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b726:	9004      	str	r0, [sp, #16]
 800b728:	9105      	str	r1, [sp, #20]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d119      	bne.n	800b762 <__kernel_sin+0xc2>
 800b72e:	0002      	movs	r2, r0
 800b730:	000b      	movs	r3, r1
 800b732:	0020      	movs	r0, r4
 800b734:	0029      	movs	r1, r5
 800b736:	f7f6 fefb 	bl	8002530 <__aeabi_dmul>
 800b73a:	4a2c      	ldr	r2, [pc, #176]	@ (800b7ec <__kernel_sin+0x14c>)
 800b73c:	4b2c      	ldr	r3, [pc, #176]	@ (800b7f0 <__kernel_sin+0x150>)
 800b73e:	f7f7 f9dd 	bl	8002afc <__aeabi_dsub>
 800b742:	9a00      	ldr	r2, [sp, #0]
 800b744:	9b01      	ldr	r3, [sp, #4]
 800b746:	f7f6 fef3 	bl	8002530 <__aeabi_dmul>
 800b74a:	0002      	movs	r2, r0
 800b74c:	000b      	movs	r3, r1
 800b74e:	0030      	movs	r0, r6
 800b750:	0039      	movs	r1, r7
 800b752:	f7f5 feed 	bl	8001530 <__aeabi_dadd>
 800b756:	0006      	movs	r6, r0
 800b758:	000f      	movs	r7, r1
 800b75a:	0030      	movs	r0, r6
 800b75c:	0039      	movs	r1, r7
 800b75e:	b009      	add	sp, #36	@ 0x24
 800b760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b762:	2200      	movs	r2, #0
 800b764:	9802      	ldr	r0, [sp, #8]
 800b766:	9903      	ldr	r1, [sp, #12]
 800b768:	4b22      	ldr	r3, [pc, #136]	@ (800b7f4 <__kernel_sin+0x154>)
 800b76a:	f7f6 fee1 	bl	8002530 <__aeabi_dmul>
 800b76e:	9a04      	ldr	r2, [sp, #16]
 800b770:	9b05      	ldr	r3, [sp, #20]
 800b772:	9006      	str	r0, [sp, #24]
 800b774:	9107      	str	r1, [sp, #28]
 800b776:	9800      	ldr	r0, [sp, #0]
 800b778:	9901      	ldr	r1, [sp, #4]
 800b77a:	f7f6 fed9 	bl	8002530 <__aeabi_dmul>
 800b77e:	0002      	movs	r2, r0
 800b780:	000b      	movs	r3, r1
 800b782:	9806      	ldr	r0, [sp, #24]
 800b784:	9907      	ldr	r1, [sp, #28]
 800b786:	f7f7 f9b9 	bl	8002afc <__aeabi_dsub>
 800b78a:	0022      	movs	r2, r4
 800b78c:	002b      	movs	r3, r5
 800b78e:	f7f6 fecf 	bl	8002530 <__aeabi_dmul>
 800b792:	9a02      	ldr	r2, [sp, #8]
 800b794:	9b03      	ldr	r3, [sp, #12]
 800b796:	f7f7 f9b1 	bl	8002afc <__aeabi_dsub>
 800b79a:	4a14      	ldr	r2, [pc, #80]	@ (800b7ec <__kernel_sin+0x14c>)
 800b79c:	0004      	movs	r4, r0
 800b79e:	000d      	movs	r5, r1
 800b7a0:	9800      	ldr	r0, [sp, #0]
 800b7a2:	9901      	ldr	r1, [sp, #4]
 800b7a4:	4b12      	ldr	r3, [pc, #72]	@ (800b7f0 <__kernel_sin+0x150>)
 800b7a6:	f7f6 fec3 	bl	8002530 <__aeabi_dmul>
 800b7aa:	0002      	movs	r2, r0
 800b7ac:	000b      	movs	r3, r1
 800b7ae:	0020      	movs	r0, r4
 800b7b0:	0029      	movs	r1, r5
 800b7b2:	f7f5 febd 	bl	8001530 <__aeabi_dadd>
 800b7b6:	0002      	movs	r2, r0
 800b7b8:	000b      	movs	r3, r1
 800b7ba:	0030      	movs	r0, r6
 800b7bc:	0039      	movs	r1, r7
 800b7be:	f7f7 f99d 	bl	8002afc <__aeabi_dsub>
 800b7c2:	e7c8      	b.n	800b756 <__kernel_sin+0xb6>
 800b7c4:	5acfd57c 	.word	0x5acfd57c
 800b7c8:	3de5d93a 	.word	0x3de5d93a
 800b7cc:	8a2b9ceb 	.word	0x8a2b9ceb
 800b7d0:	3e5ae5e6 	.word	0x3e5ae5e6
 800b7d4:	57b1fe7d 	.word	0x57b1fe7d
 800b7d8:	3ec71de3 	.word	0x3ec71de3
 800b7dc:	19c161d5 	.word	0x19c161d5
 800b7e0:	3f2a01a0 	.word	0x3f2a01a0
 800b7e4:	3f811111 	.word	0x3f811111
 800b7e8:	1110f8a6 	.word	0x1110f8a6
 800b7ec:	55555549 	.word	0x55555549
 800b7f0:	3fc55555 	.word	0x3fc55555
 800b7f4:	3fe00000 	.word	0x3fe00000

0800b7f8 <__ieee754_rem_pio2>:
 800b7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7fa:	4baf      	ldr	r3, [pc, #700]	@ (800bab8 <__ieee754_rem_pio2+0x2c0>)
 800b7fc:	b095      	sub	sp, #84	@ 0x54
 800b7fe:	004d      	lsls	r5, r1, #1
 800b800:	0017      	movs	r7, r2
 800b802:	910d      	str	r1, [sp, #52]	@ 0x34
 800b804:	086d      	lsrs	r5, r5, #1
 800b806:	429d      	cmp	r5, r3
 800b808:	d807      	bhi.n	800b81a <__ieee754_rem_pio2+0x22>
 800b80a:	6010      	str	r0, [r2, #0]
 800b80c:	6051      	str	r1, [r2, #4]
 800b80e:	2300      	movs	r3, #0
 800b810:	2200      	movs	r2, #0
 800b812:	60ba      	str	r2, [r7, #8]
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	2300      	movs	r3, #0
 800b818:	e024      	b.n	800b864 <__ieee754_rem_pio2+0x6c>
 800b81a:	4ba8      	ldr	r3, [pc, #672]	@ (800babc <__ieee754_rem_pio2+0x2c4>)
 800b81c:	429d      	cmp	r5, r3
 800b81e:	d900      	bls.n	800b822 <__ieee754_rem_pio2+0x2a>
 800b820:	e072      	b.n	800b908 <__ieee754_rem_pio2+0x110>
 800b822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b824:	4ca6      	ldr	r4, [pc, #664]	@ (800bac0 <__ieee754_rem_pio2+0x2c8>)
 800b826:	4aa7      	ldr	r2, [pc, #668]	@ (800bac4 <__ieee754_rem_pio2+0x2cc>)
 800b828:	2b00      	cmp	r3, #0
 800b82a:	dd37      	ble.n	800b89c <__ieee754_rem_pio2+0xa4>
 800b82c:	4ba4      	ldr	r3, [pc, #656]	@ (800bac0 <__ieee754_rem_pio2+0x2c8>)
 800b82e:	f7f7 f965 	bl	8002afc <__aeabi_dsub>
 800b832:	9002      	str	r0, [sp, #8]
 800b834:	9103      	str	r1, [sp, #12]
 800b836:	42a5      	cmp	r5, r4
 800b838:	d018      	beq.n	800b86c <__ieee754_rem_pio2+0x74>
 800b83a:	4aa3      	ldr	r2, [pc, #652]	@ (800bac8 <__ieee754_rem_pio2+0x2d0>)
 800b83c:	4ba3      	ldr	r3, [pc, #652]	@ (800bacc <__ieee754_rem_pio2+0x2d4>)
 800b83e:	f7f7 f95d 	bl	8002afc <__aeabi_dsub>
 800b842:	0002      	movs	r2, r0
 800b844:	000b      	movs	r3, r1
 800b846:	0004      	movs	r4, r0
 800b848:	000d      	movs	r5, r1
 800b84a:	9802      	ldr	r0, [sp, #8]
 800b84c:	9903      	ldr	r1, [sp, #12]
 800b84e:	f7f7 f955 	bl	8002afc <__aeabi_dsub>
 800b852:	4a9d      	ldr	r2, [pc, #628]	@ (800bac8 <__ieee754_rem_pio2+0x2d0>)
 800b854:	4b9d      	ldr	r3, [pc, #628]	@ (800bacc <__ieee754_rem_pio2+0x2d4>)
 800b856:	f7f7 f951 	bl	8002afc <__aeabi_dsub>
 800b85a:	2301      	movs	r3, #1
 800b85c:	603c      	str	r4, [r7, #0]
 800b85e:	607d      	str	r5, [r7, #4]
 800b860:	60b8      	str	r0, [r7, #8]
 800b862:	60f9      	str	r1, [r7, #12]
 800b864:	9302      	str	r3, [sp, #8]
 800b866:	9802      	ldr	r0, [sp, #8]
 800b868:	b015      	add	sp, #84	@ 0x54
 800b86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b86c:	22d3      	movs	r2, #211	@ 0xd3
 800b86e:	9802      	ldr	r0, [sp, #8]
 800b870:	9903      	ldr	r1, [sp, #12]
 800b872:	4b96      	ldr	r3, [pc, #600]	@ (800bacc <__ieee754_rem_pio2+0x2d4>)
 800b874:	0552      	lsls	r2, r2, #21
 800b876:	f7f7 f941 	bl	8002afc <__aeabi_dsub>
 800b87a:	4a95      	ldr	r2, [pc, #596]	@ (800bad0 <__ieee754_rem_pio2+0x2d8>)
 800b87c:	4b95      	ldr	r3, [pc, #596]	@ (800bad4 <__ieee754_rem_pio2+0x2dc>)
 800b87e:	9002      	str	r0, [sp, #8]
 800b880:	9103      	str	r1, [sp, #12]
 800b882:	f7f7 f93b 	bl	8002afc <__aeabi_dsub>
 800b886:	0002      	movs	r2, r0
 800b888:	000b      	movs	r3, r1
 800b88a:	0004      	movs	r4, r0
 800b88c:	000d      	movs	r5, r1
 800b88e:	9802      	ldr	r0, [sp, #8]
 800b890:	9903      	ldr	r1, [sp, #12]
 800b892:	f7f7 f933 	bl	8002afc <__aeabi_dsub>
 800b896:	4a8e      	ldr	r2, [pc, #568]	@ (800bad0 <__ieee754_rem_pio2+0x2d8>)
 800b898:	4b8e      	ldr	r3, [pc, #568]	@ (800bad4 <__ieee754_rem_pio2+0x2dc>)
 800b89a:	e7dc      	b.n	800b856 <__ieee754_rem_pio2+0x5e>
 800b89c:	4b88      	ldr	r3, [pc, #544]	@ (800bac0 <__ieee754_rem_pio2+0x2c8>)
 800b89e:	f7f5 fe47 	bl	8001530 <__aeabi_dadd>
 800b8a2:	9002      	str	r0, [sp, #8]
 800b8a4:	9103      	str	r1, [sp, #12]
 800b8a6:	42a5      	cmp	r5, r4
 800b8a8:	d016      	beq.n	800b8d8 <__ieee754_rem_pio2+0xe0>
 800b8aa:	4a87      	ldr	r2, [pc, #540]	@ (800bac8 <__ieee754_rem_pio2+0x2d0>)
 800b8ac:	4b87      	ldr	r3, [pc, #540]	@ (800bacc <__ieee754_rem_pio2+0x2d4>)
 800b8ae:	f7f5 fe3f 	bl	8001530 <__aeabi_dadd>
 800b8b2:	0002      	movs	r2, r0
 800b8b4:	000b      	movs	r3, r1
 800b8b6:	0004      	movs	r4, r0
 800b8b8:	000d      	movs	r5, r1
 800b8ba:	9802      	ldr	r0, [sp, #8]
 800b8bc:	9903      	ldr	r1, [sp, #12]
 800b8be:	f7f7 f91d 	bl	8002afc <__aeabi_dsub>
 800b8c2:	4a81      	ldr	r2, [pc, #516]	@ (800bac8 <__ieee754_rem_pio2+0x2d0>)
 800b8c4:	4b81      	ldr	r3, [pc, #516]	@ (800bacc <__ieee754_rem_pio2+0x2d4>)
 800b8c6:	f7f5 fe33 	bl	8001530 <__aeabi_dadd>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	603c      	str	r4, [r7, #0]
 800b8ce:	607d      	str	r5, [r7, #4]
 800b8d0:	60b8      	str	r0, [r7, #8]
 800b8d2:	60f9      	str	r1, [r7, #12]
 800b8d4:	425b      	negs	r3, r3
 800b8d6:	e7c5      	b.n	800b864 <__ieee754_rem_pio2+0x6c>
 800b8d8:	22d3      	movs	r2, #211	@ 0xd3
 800b8da:	9802      	ldr	r0, [sp, #8]
 800b8dc:	9903      	ldr	r1, [sp, #12]
 800b8de:	4b7b      	ldr	r3, [pc, #492]	@ (800bacc <__ieee754_rem_pio2+0x2d4>)
 800b8e0:	0552      	lsls	r2, r2, #21
 800b8e2:	f7f5 fe25 	bl	8001530 <__aeabi_dadd>
 800b8e6:	4a7a      	ldr	r2, [pc, #488]	@ (800bad0 <__ieee754_rem_pio2+0x2d8>)
 800b8e8:	4b7a      	ldr	r3, [pc, #488]	@ (800bad4 <__ieee754_rem_pio2+0x2dc>)
 800b8ea:	9002      	str	r0, [sp, #8]
 800b8ec:	9103      	str	r1, [sp, #12]
 800b8ee:	f7f5 fe1f 	bl	8001530 <__aeabi_dadd>
 800b8f2:	0002      	movs	r2, r0
 800b8f4:	000b      	movs	r3, r1
 800b8f6:	0004      	movs	r4, r0
 800b8f8:	000d      	movs	r5, r1
 800b8fa:	9802      	ldr	r0, [sp, #8]
 800b8fc:	9903      	ldr	r1, [sp, #12]
 800b8fe:	f7f7 f8fd 	bl	8002afc <__aeabi_dsub>
 800b902:	4a73      	ldr	r2, [pc, #460]	@ (800bad0 <__ieee754_rem_pio2+0x2d8>)
 800b904:	4b73      	ldr	r3, [pc, #460]	@ (800bad4 <__ieee754_rem_pio2+0x2dc>)
 800b906:	e7de      	b.n	800b8c6 <__ieee754_rem_pio2+0xce>
 800b908:	4b73      	ldr	r3, [pc, #460]	@ (800bad8 <__ieee754_rem_pio2+0x2e0>)
 800b90a:	429d      	cmp	r5, r3
 800b90c:	d900      	bls.n	800b910 <__ieee754_rem_pio2+0x118>
 800b90e:	e0c6      	b.n	800ba9e <__ieee754_rem_pio2+0x2a6>
 800b910:	f000 f94e 	bl	800bbb0 <fabs>
 800b914:	4a71      	ldr	r2, [pc, #452]	@ (800badc <__ieee754_rem_pio2+0x2e4>)
 800b916:	4b72      	ldr	r3, [pc, #456]	@ (800bae0 <__ieee754_rem_pio2+0x2e8>)
 800b918:	9004      	str	r0, [sp, #16]
 800b91a:	9105      	str	r1, [sp, #20]
 800b91c:	f7f6 fe08 	bl	8002530 <__aeabi_dmul>
 800b920:	2200      	movs	r2, #0
 800b922:	4b70      	ldr	r3, [pc, #448]	@ (800bae4 <__ieee754_rem_pio2+0x2ec>)
 800b924:	f7f5 fe04 	bl	8001530 <__aeabi_dadd>
 800b928:	f7f7 fd14 	bl	8003354 <__aeabi_d2iz>
 800b92c:	9002      	str	r0, [sp, #8]
 800b92e:	f7f7 fd4d 	bl	80033cc <__aeabi_i2d>
 800b932:	4a64      	ldr	r2, [pc, #400]	@ (800bac4 <__ieee754_rem_pio2+0x2cc>)
 800b934:	4b62      	ldr	r3, [pc, #392]	@ (800bac0 <__ieee754_rem_pio2+0x2c8>)
 800b936:	9008      	str	r0, [sp, #32]
 800b938:	9109      	str	r1, [sp, #36]	@ 0x24
 800b93a:	f7f6 fdf9 	bl	8002530 <__aeabi_dmul>
 800b93e:	0002      	movs	r2, r0
 800b940:	000b      	movs	r3, r1
 800b942:	9804      	ldr	r0, [sp, #16]
 800b944:	9905      	ldr	r1, [sp, #20]
 800b946:	f7f7 f8d9 	bl	8002afc <__aeabi_dsub>
 800b94a:	4b60      	ldr	r3, [pc, #384]	@ (800bacc <__ieee754_rem_pio2+0x2d4>)
 800b94c:	9004      	str	r0, [sp, #16]
 800b94e:	9105      	str	r1, [sp, #20]
 800b950:	9808      	ldr	r0, [sp, #32]
 800b952:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b954:	4a5c      	ldr	r2, [pc, #368]	@ (800bac8 <__ieee754_rem_pio2+0x2d0>)
 800b956:	f7f6 fdeb 	bl	8002530 <__aeabi_dmul>
 800b95a:	9b02      	ldr	r3, [sp, #8]
 800b95c:	9006      	str	r0, [sp, #24]
 800b95e:	9107      	str	r1, [sp, #28]
 800b960:	2b1f      	cmp	r3, #31
 800b962:	dc0d      	bgt.n	800b980 <__ieee754_rem_pio2+0x188>
 800b964:	9a02      	ldr	r2, [sp, #8]
 800b966:	4b60      	ldr	r3, [pc, #384]	@ (800bae8 <__ieee754_rem_pio2+0x2f0>)
 800b968:	3a01      	subs	r2, #1
 800b96a:	0092      	lsls	r2, r2, #2
 800b96c:	58d3      	ldr	r3, [r2, r3]
 800b96e:	42ab      	cmp	r3, r5
 800b970:	d006      	beq.n	800b980 <__ieee754_rem_pio2+0x188>
 800b972:	0002      	movs	r2, r0
 800b974:	000b      	movs	r3, r1
 800b976:	9804      	ldr	r0, [sp, #16]
 800b978:	9905      	ldr	r1, [sp, #20]
 800b97a:	f7f7 f8bf 	bl	8002afc <__aeabi_dsub>
 800b97e:	e00b      	b.n	800b998 <__ieee754_rem_pio2+0x1a0>
 800b980:	9a06      	ldr	r2, [sp, #24]
 800b982:	9b07      	ldr	r3, [sp, #28]
 800b984:	9804      	ldr	r0, [sp, #16]
 800b986:	9905      	ldr	r1, [sp, #20]
 800b988:	f7f7 f8b8 	bl	8002afc <__aeabi_dsub>
 800b98c:	004b      	lsls	r3, r1, #1
 800b98e:	152e      	asrs	r6, r5, #20
 800b990:	0d5b      	lsrs	r3, r3, #21
 800b992:	1af3      	subs	r3, r6, r3
 800b994:	2b10      	cmp	r3, #16
 800b996:	dc02      	bgt.n	800b99e <__ieee754_rem_pio2+0x1a6>
 800b998:	6038      	str	r0, [r7, #0]
 800b99a:	6079      	str	r1, [r7, #4]
 800b99c:	e039      	b.n	800ba12 <__ieee754_rem_pio2+0x21a>
 800b99e:	22d3      	movs	r2, #211	@ 0xd3
 800b9a0:	9808      	ldr	r0, [sp, #32]
 800b9a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9a4:	4b49      	ldr	r3, [pc, #292]	@ (800bacc <__ieee754_rem_pio2+0x2d4>)
 800b9a6:	0552      	lsls	r2, r2, #21
 800b9a8:	f7f6 fdc2 	bl	8002530 <__aeabi_dmul>
 800b9ac:	0004      	movs	r4, r0
 800b9ae:	000d      	movs	r5, r1
 800b9b0:	0002      	movs	r2, r0
 800b9b2:	000b      	movs	r3, r1
 800b9b4:	9804      	ldr	r0, [sp, #16]
 800b9b6:	9905      	ldr	r1, [sp, #20]
 800b9b8:	f7f7 f8a0 	bl	8002afc <__aeabi_dsub>
 800b9bc:	0002      	movs	r2, r0
 800b9be:	000b      	movs	r3, r1
 800b9c0:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9c2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b9c4:	9804      	ldr	r0, [sp, #16]
 800b9c6:	9905      	ldr	r1, [sp, #20]
 800b9c8:	f7f7 f898 	bl	8002afc <__aeabi_dsub>
 800b9cc:	0022      	movs	r2, r4
 800b9ce:	002b      	movs	r3, r5
 800b9d0:	f7f7 f894 	bl	8002afc <__aeabi_dsub>
 800b9d4:	0004      	movs	r4, r0
 800b9d6:	000d      	movs	r5, r1
 800b9d8:	9808      	ldr	r0, [sp, #32]
 800b9da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9dc:	4a3c      	ldr	r2, [pc, #240]	@ (800bad0 <__ieee754_rem_pio2+0x2d8>)
 800b9de:	4b3d      	ldr	r3, [pc, #244]	@ (800bad4 <__ieee754_rem_pio2+0x2dc>)
 800b9e0:	f7f6 fda6 	bl	8002530 <__aeabi_dmul>
 800b9e4:	0022      	movs	r2, r4
 800b9e6:	002b      	movs	r3, r5
 800b9e8:	f7f7 f888 	bl	8002afc <__aeabi_dsub>
 800b9ec:	000b      	movs	r3, r1
 800b9ee:	0002      	movs	r2, r0
 800b9f0:	9006      	str	r0, [sp, #24]
 800b9f2:	9107      	str	r1, [sp, #28]
 800b9f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b9f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9f8:	f7f7 f880 	bl	8002afc <__aeabi_dsub>
 800b9fc:	004b      	lsls	r3, r1, #1
 800b9fe:	0d5b      	lsrs	r3, r3, #21
 800ba00:	1af3      	subs	r3, r6, r3
 800ba02:	2b31      	cmp	r3, #49	@ 0x31
 800ba04:	dc21      	bgt.n	800ba4a <__ieee754_rem_pio2+0x252>
 800ba06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba08:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ba0a:	6038      	str	r0, [r7, #0]
 800ba0c:	6079      	str	r1, [r7, #4]
 800ba0e:	9304      	str	r3, [sp, #16]
 800ba10:	9405      	str	r4, [sp, #20]
 800ba12:	683c      	ldr	r4, [r7, #0]
 800ba14:	687d      	ldr	r5, [r7, #4]
 800ba16:	9804      	ldr	r0, [sp, #16]
 800ba18:	9905      	ldr	r1, [sp, #20]
 800ba1a:	0022      	movs	r2, r4
 800ba1c:	002b      	movs	r3, r5
 800ba1e:	f7f7 f86d 	bl	8002afc <__aeabi_dsub>
 800ba22:	9a06      	ldr	r2, [sp, #24]
 800ba24:	9b07      	ldr	r3, [sp, #28]
 800ba26:	f7f7 f869 	bl	8002afc <__aeabi_dsub>
 800ba2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba2c:	60b8      	str	r0, [r7, #8]
 800ba2e:	60f9      	str	r1, [r7, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	db00      	blt.n	800ba36 <__ieee754_rem_pio2+0x23e>
 800ba34:	e717      	b.n	800b866 <__ieee754_rem_pio2+0x6e>
 800ba36:	2280      	movs	r2, #128	@ 0x80
 800ba38:	0612      	lsls	r2, r2, #24
 800ba3a:	18ab      	adds	r3, r5, r2
 800ba3c:	607b      	str	r3, [r7, #4]
 800ba3e:	188b      	adds	r3, r1, r2
 800ba40:	603c      	str	r4, [r7, #0]
 800ba42:	60b8      	str	r0, [r7, #8]
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	9b02      	ldr	r3, [sp, #8]
 800ba48:	e744      	b.n	800b8d4 <__ieee754_rem_pio2+0xdc>
 800ba4a:	22b8      	movs	r2, #184	@ 0xb8
 800ba4c:	9808      	ldr	r0, [sp, #32]
 800ba4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba50:	4b20      	ldr	r3, [pc, #128]	@ (800bad4 <__ieee754_rem_pio2+0x2dc>)
 800ba52:	0592      	lsls	r2, r2, #22
 800ba54:	f7f6 fd6c 	bl	8002530 <__aeabi_dmul>
 800ba58:	0004      	movs	r4, r0
 800ba5a:	000d      	movs	r5, r1
 800ba5c:	0002      	movs	r2, r0
 800ba5e:	000b      	movs	r3, r1
 800ba60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba64:	f7f7 f84a 	bl	8002afc <__aeabi_dsub>
 800ba68:	0002      	movs	r2, r0
 800ba6a:	000b      	movs	r3, r1
 800ba6c:	9004      	str	r0, [sp, #16]
 800ba6e:	9105      	str	r1, [sp, #20]
 800ba70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ba74:	f7f7 f842 	bl	8002afc <__aeabi_dsub>
 800ba78:	0022      	movs	r2, r4
 800ba7a:	002b      	movs	r3, r5
 800ba7c:	f7f7 f83e 	bl	8002afc <__aeabi_dsub>
 800ba80:	0004      	movs	r4, r0
 800ba82:	000d      	movs	r5, r1
 800ba84:	9808      	ldr	r0, [sp, #32]
 800ba86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba88:	4a18      	ldr	r2, [pc, #96]	@ (800baec <__ieee754_rem_pio2+0x2f4>)
 800ba8a:	4b19      	ldr	r3, [pc, #100]	@ (800baf0 <__ieee754_rem_pio2+0x2f8>)
 800ba8c:	f7f6 fd50 	bl	8002530 <__aeabi_dmul>
 800ba90:	0022      	movs	r2, r4
 800ba92:	002b      	movs	r3, r5
 800ba94:	f7f7 f832 	bl	8002afc <__aeabi_dsub>
 800ba98:	9006      	str	r0, [sp, #24]
 800ba9a:	9107      	str	r1, [sp, #28]
 800ba9c:	e769      	b.n	800b972 <__ieee754_rem_pio2+0x17a>
 800ba9e:	4b15      	ldr	r3, [pc, #84]	@ (800baf4 <__ieee754_rem_pio2+0x2fc>)
 800baa0:	429d      	cmp	r5, r3
 800baa2:	d929      	bls.n	800baf8 <__ieee754_rem_pio2+0x300>
 800baa4:	0002      	movs	r2, r0
 800baa6:	000b      	movs	r3, r1
 800baa8:	f7f7 f828 	bl	8002afc <__aeabi_dsub>
 800baac:	60b8      	str	r0, [r7, #8]
 800baae:	60f9      	str	r1, [r7, #12]
 800bab0:	6038      	str	r0, [r7, #0]
 800bab2:	6079      	str	r1, [r7, #4]
 800bab4:	e6af      	b.n	800b816 <__ieee754_rem_pio2+0x1e>
 800bab6:	46c0      	nop			@ (mov r8, r8)
 800bab8:	3fe921fb 	.word	0x3fe921fb
 800babc:	4002d97b 	.word	0x4002d97b
 800bac0:	3ff921fb 	.word	0x3ff921fb
 800bac4:	54400000 	.word	0x54400000
 800bac8:	1a626331 	.word	0x1a626331
 800bacc:	3dd0b461 	.word	0x3dd0b461
 800bad0:	2e037073 	.word	0x2e037073
 800bad4:	3ba3198a 	.word	0x3ba3198a
 800bad8:	413921fb 	.word	0x413921fb
 800badc:	6dc9c883 	.word	0x6dc9c883
 800bae0:	3fe45f30 	.word	0x3fe45f30
 800bae4:	3fe00000 	.word	0x3fe00000
 800bae8:	0800d204 	.word	0x0800d204
 800baec:	252049c1 	.word	0x252049c1
 800baf0:	397b839a 	.word	0x397b839a
 800baf4:	7fefffff 	.word	0x7fefffff
 800baf8:	4b2a      	ldr	r3, [pc, #168]	@ (800bba4 <__ieee754_rem_pio2+0x3ac>)
 800bafa:	152e      	asrs	r6, r5, #20
 800bafc:	18f6      	adds	r6, r6, r3
 800bafe:	0531      	lsls	r1, r6, #20
 800bb00:	1a6b      	subs	r3, r5, r1
 800bb02:	0019      	movs	r1, r3
 800bb04:	001d      	movs	r5, r3
 800bb06:	0004      	movs	r4, r0
 800bb08:	f7f7 fc24 	bl	8003354 <__aeabi_d2iz>
 800bb0c:	f7f7 fc5e 	bl	80033cc <__aeabi_i2d>
 800bb10:	0002      	movs	r2, r0
 800bb12:	000b      	movs	r3, r1
 800bb14:	0020      	movs	r0, r4
 800bb16:	0029      	movs	r1, r5
 800bb18:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb1c:	f7f6 ffee 	bl	8002afc <__aeabi_dsub>
 800bb20:	2200      	movs	r2, #0
 800bb22:	4b21      	ldr	r3, [pc, #132]	@ (800bba8 <__ieee754_rem_pio2+0x3b0>)
 800bb24:	f7f6 fd04 	bl	8002530 <__aeabi_dmul>
 800bb28:	000d      	movs	r5, r1
 800bb2a:	0004      	movs	r4, r0
 800bb2c:	f7f7 fc12 	bl	8003354 <__aeabi_d2iz>
 800bb30:	f7f7 fc4c 	bl	80033cc <__aeabi_i2d>
 800bb34:	0002      	movs	r2, r0
 800bb36:	000b      	movs	r3, r1
 800bb38:	0020      	movs	r0, r4
 800bb3a:	0029      	movs	r1, r5
 800bb3c:	9210      	str	r2, [sp, #64]	@ 0x40
 800bb3e:	9311      	str	r3, [sp, #68]	@ 0x44
 800bb40:	f7f6 ffdc 	bl	8002afc <__aeabi_dsub>
 800bb44:	2200      	movs	r2, #0
 800bb46:	4b18      	ldr	r3, [pc, #96]	@ (800bba8 <__ieee754_rem_pio2+0x3b0>)
 800bb48:	f7f6 fcf2 	bl	8002530 <__aeabi_dmul>
 800bb4c:	2503      	movs	r5, #3
 800bb4e:	9012      	str	r0, [sp, #72]	@ 0x48
 800bb50:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bb52:	ac0e      	add	r4, sp, #56	@ 0x38
 800bb54:	2200      	movs	r2, #0
 800bb56:	6920      	ldr	r0, [r4, #16]
 800bb58:	6961      	ldr	r1, [r4, #20]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	9502      	str	r5, [sp, #8]
 800bb5e:	3c08      	subs	r4, #8
 800bb60:	3d01      	subs	r5, #1
 800bb62:	f7f4 fc71 	bl	8000448 <__aeabi_dcmpeq>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d1f4      	bne.n	800bb54 <__ieee754_rem_pio2+0x35c>
 800bb6a:	4b10      	ldr	r3, [pc, #64]	@ (800bbac <__ieee754_rem_pio2+0x3b4>)
 800bb6c:	0032      	movs	r2, r6
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	2302      	movs	r3, #2
 800bb72:	0039      	movs	r1, r7
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	a80e      	add	r0, sp, #56	@ 0x38
 800bb78:	9b02      	ldr	r3, [sp, #8]
 800bb7a:	f000 f81d 	bl	800bbb8 <__kernel_rem_pio2>
 800bb7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb80:	9002      	str	r0, [sp, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	db00      	blt.n	800bb88 <__ieee754_rem_pio2+0x390>
 800bb86:	e66e      	b.n	800b866 <__ieee754_rem_pio2+0x6e>
 800bb88:	2080      	movs	r0, #128	@ 0x80
 800bb8a:	6879      	ldr	r1, [r7, #4]
 800bb8c:	683a      	ldr	r2, [r7, #0]
 800bb8e:	0600      	lsls	r0, r0, #24
 800bb90:	180b      	adds	r3, r1, r0
 800bb92:	68f9      	ldr	r1, [r7, #12]
 800bb94:	603a      	str	r2, [r7, #0]
 800bb96:	607b      	str	r3, [r7, #4]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	180b      	adds	r3, r1, r0
 800bb9c:	60ba      	str	r2, [r7, #8]
 800bb9e:	60fb      	str	r3, [r7, #12]
 800bba0:	e751      	b.n	800ba46 <__ieee754_rem_pio2+0x24e>
 800bba2:	46c0      	nop			@ (mov r8, r8)
 800bba4:	fffffbea 	.word	0xfffffbea
 800bba8:	41700000 	.word	0x41700000
 800bbac:	0800d284 	.word	0x0800d284

0800bbb0 <fabs>:
 800bbb0:	0049      	lsls	r1, r1, #1
 800bbb2:	084b      	lsrs	r3, r1, #1
 800bbb4:	0019      	movs	r1, r3
 800bbb6:	4770      	bx	lr

0800bbb8 <__kernel_rem_pio2>:
 800bbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbba:	4cc6      	ldr	r4, [pc, #792]	@ (800bed4 <__kernel_rem_pio2+0x31c>)
 800bbbc:	44a5      	add	sp, r4
 800bbbe:	0014      	movs	r4, r2
 800bbc0:	9aa4      	ldr	r2, [sp, #656]	@ 0x290
 800bbc2:	930e      	str	r3, [sp, #56]	@ 0x38
 800bbc4:	4bc4      	ldr	r3, [pc, #784]	@ (800bed8 <__kernel_rem_pio2+0x320>)
 800bbc6:	0092      	lsls	r2, r2, #2
 800bbc8:	58d3      	ldr	r3, [r2, r3]
 800bbca:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bbcc:	9308      	str	r3, [sp, #32]
 800bbce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbd0:	9105      	str	r1, [sp, #20]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	930d      	str	r3, [sp, #52]	@ 0x34
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	0023      	movs	r3, r4
 800bbdc:	3314      	adds	r3, #20
 800bbde:	db04      	blt.n	800bbea <__kernel_rem_pio2+0x32>
 800bbe0:	2118      	movs	r1, #24
 800bbe2:	1ee0      	subs	r0, r4, #3
 800bbe4:	f7f4 fb34 	bl	8000250 <__divsi3>
 800bbe8:	9000      	str	r0, [sp, #0]
 800bbea:	9b00      	ldr	r3, [sp, #0]
 800bbec:	ae26      	add	r6, sp, #152	@ 0x98
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	2318      	movs	r3, #24
 800bbf2:	425b      	negs	r3, r3
 800bbf4:	4353      	muls	r3, r2
 800bbf6:	191b      	adds	r3, r3, r4
 800bbf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bbfa:	9302      	str	r3, [sp, #8]
 800bbfc:	9b00      	ldr	r3, [sp, #0]
 800bbfe:	1a9d      	subs	r5, r3, r2
 800bc00:	002c      	movs	r4, r5
 800bc02:	9b08      	ldr	r3, [sp, #32]
 800bc04:	189f      	adds	r7, r3, r2
 800bc06:	1b63      	subs	r3, r4, r5
 800bc08:	429f      	cmp	r7, r3
 800bc0a:	da0f      	bge.n	800bc2c <__kernel_rem_pio2+0x74>
 800bc0c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800bc0e:	af76      	add	r7, sp, #472	@ 0x1d8
 800bc10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc12:	9a08      	ldr	r2, [sp, #32]
 800bc14:	1aeb      	subs	r3, r5, r3
 800bc16:	429a      	cmp	r2, r3
 800bc18:	db30      	blt.n	800bc7c <__kernel_rem_pio2+0xc4>
 800bc1a:	00eb      	lsls	r3, r5, #3
 800bc1c:	aa26      	add	r2, sp, #152	@ 0x98
 800bc1e:	2400      	movs	r4, #0
 800bc20:	189e      	adds	r6, r3, r2
 800bc22:	2300      	movs	r3, #0
 800bc24:	9306      	str	r3, [sp, #24]
 800bc26:	9407      	str	r4, [sp, #28]
 800bc28:	2400      	movs	r4, #0
 800bc2a:	e01e      	b.n	800bc6a <__kernel_rem_pio2+0xb2>
 800bc2c:	2c00      	cmp	r4, #0
 800bc2e:	db07      	blt.n	800bc40 <__kernel_rem_pio2+0x88>
 800bc30:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 800bc32:	00a3      	lsls	r3, r4, #2
 800bc34:	58d0      	ldr	r0, [r2, r3]
 800bc36:	f7f7 fbc9 	bl	80033cc <__aeabi_i2d>
 800bc3a:	c603      	stmia	r6!, {r0, r1}
 800bc3c:	3401      	adds	r4, #1
 800bc3e:	e7e2      	b.n	800bc06 <__kernel_rem_pio2+0x4e>
 800bc40:	2000      	movs	r0, #0
 800bc42:	2100      	movs	r1, #0
 800bc44:	e7f9      	b.n	800bc3a <__kernel_rem_pio2+0x82>
 800bc46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc48:	00e1      	lsls	r1, r4, #3
 800bc4a:	1859      	adds	r1, r3, r1
 800bc4c:	6808      	ldr	r0, [r1, #0]
 800bc4e:	6849      	ldr	r1, [r1, #4]
 800bc50:	6832      	ldr	r2, [r6, #0]
 800bc52:	6873      	ldr	r3, [r6, #4]
 800bc54:	f7f6 fc6c 	bl	8002530 <__aeabi_dmul>
 800bc58:	0002      	movs	r2, r0
 800bc5a:	000b      	movs	r3, r1
 800bc5c:	9806      	ldr	r0, [sp, #24]
 800bc5e:	9907      	ldr	r1, [sp, #28]
 800bc60:	f7f5 fc66 	bl	8001530 <__aeabi_dadd>
 800bc64:	9006      	str	r0, [sp, #24]
 800bc66:	9107      	str	r1, [sp, #28]
 800bc68:	3401      	adds	r4, #1
 800bc6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc6c:	3e08      	subs	r6, #8
 800bc6e:	429c      	cmp	r4, r3
 800bc70:	dde9      	ble.n	800bc46 <__kernel_rem_pio2+0x8e>
 800bc72:	9b06      	ldr	r3, [sp, #24]
 800bc74:	9c07      	ldr	r4, [sp, #28]
 800bc76:	3501      	adds	r5, #1
 800bc78:	c718      	stmia	r7!, {r3, r4}
 800bc7a:	e7c9      	b.n	800bc10 <__kernel_rem_pio2+0x58>
 800bc7c:	9b08      	ldr	r3, [sp, #32]
 800bc7e:	aa12      	add	r2, sp, #72	@ 0x48
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	189b      	adds	r3, r3, r2
 800bc84:	9311      	str	r3, [sp, #68]	@ 0x44
 800bc86:	9b00      	ldr	r3, [sp, #0]
 800bc88:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	18d3      	adds	r3, r2, r3
 800bc8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc90:	9b08      	ldr	r3, [sp, #32]
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	9b00      	ldr	r3, [sp, #0]
 800bc96:	aa76      	add	r2, sp, #472	@ 0x1d8
 800bc98:	00db      	lsls	r3, r3, #3
 800bc9a:	18d3      	adds	r3, r2, r3
 800bc9c:	681e      	ldr	r6, [r3, #0]
 800bc9e:	685f      	ldr	r7, [r3, #4]
 800bca0:	ab12      	add	r3, sp, #72	@ 0x48
 800bca2:	001d      	movs	r5, r3
 800bca4:	9c00      	ldr	r4, [sp, #0]
 800bca6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bca8:	2c00      	cmp	r4, #0
 800bcaa:	dc73      	bgt.n	800bd94 <__kernel_rem_pio2+0x1dc>
 800bcac:	0030      	movs	r0, r6
 800bcae:	0039      	movs	r1, r7
 800bcb0:	9a02      	ldr	r2, [sp, #8]
 800bcb2:	f000 fad5 	bl	800c260 <scalbn>
 800bcb6:	23ff      	movs	r3, #255	@ 0xff
 800bcb8:	2200      	movs	r2, #0
 800bcba:	059b      	lsls	r3, r3, #22
 800bcbc:	0004      	movs	r4, r0
 800bcbe:	000d      	movs	r5, r1
 800bcc0:	f7f6 fc36 	bl	8002530 <__aeabi_dmul>
 800bcc4:	f000 fb38 	bl	800c338 <floor>
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4b84      	ldr	r3, [pc, #528]	@ (800bedc <__kernel_rem_pio2+0x324>)
 800bccc:	f7f6 fc30 	bl	8002530 <__aeabi_dmul>
 800bcd0:	0002      	movs	r2, r0
 800bcd2:	000b      	movs	r3, r1
 800bcd4:	0020      	movs	r0, r4
 800bcd6:	0029      	movs	r1, r5
 800bcd8:	f7f6 ff10 	bl	8002afc <__aeabi_dsub>
 800bcdc:	000d      	movs	r5, r1
 800bcde:	0004      	movs	r4, r0
 800bce0:	f7f7 fb38 	bl	8003354 <__aeabi_d2iz>
 800bce4:	900c      	str	r0, [sp, #48]	@ 0x30
 800bce6:	f7f7 fb71 	bl	80033cc <__aeabi_i2d>
 800bcea:	000b      	movs	r3, r1
 800bcec:	0002      	movs	r2, r0
 800bcee:	0029      	movs	r1, r5
 800bcf0:	0020      	movs	r0, r4
 800bcf2:	f7f6 ff03 	bl	8002afc <__aeabi_dsub>
 800bcf6:	9b02      	ldr	r3, [sp, #8]
 800bcf8:	0006      	movs	r6, r0
 800bcfa:	000f      	movs	r7, r1
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dd6f      	ble.n	800bde0 <__kernel_rem_pio2+0x228>
 800bd00:	2018      	movs	r0, #24
 800bd02:	9b00      	ldr	r3, [sp, #0]
 800bd04:	aa12      	add	r2, sp, #72	@ 0x48
 800bd06:	3b01      	subs	r3, #1
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	589a      	ldr	r2, [r3, r2]
 800bd0c:	9902      	ldr	r1, [sp, #8]
 800bd0e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800bd10:	1a40      	subs	r0, r0, r1
 800bd12:	0011      	movs	r1, r2
 800bd14:	4101      	asrs	r1, r0
 800bd16:	1864      	adds	r4, r4, r1
 800bd18:	4081      	lsls	r1, r0
 800bd1a:	1a52      	subs	r2, r2, r1
 800bd1c:	a912      	add	r1, sp, #72	@ 0x48
 800bd1e:	505a      	str	r2, [r3, r1]
 800bd20:	2317      	movs	r3, #23
 800bd22:	9902      	ldr	r1, [sp, #8]
 800bd24:	940c      	str	r4, [sp, #48]	@ 0x30
 800bd26:	1a5b      	subs	r3, r3, r1
 800bd28:	411a      	asrs	r2, r3
 800bd2a:	9206      	str	r2, [sp, #24]
 800bd2c:	9b06      	ldr	r3, [sp, #24]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	dd68      	ble.n	800be04 <__kernel_rem_pio2+0x24c>
 800bd32:	2200      	movs	r2, #0
 800bd34:	2580      	movs	r5, #128	@ 0x80
 800bd36:	0014      	movs	r4, r2
 800bd38:	2101      	movs	r1, #1
 800bd3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd3c:	4868      	ldr	r0, [pc, #416]	@ (800bee0 <__kernel_rem_pio2+0x328>)
 800bd3e:	3301      	adds	r3, #1
 800bd40:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd42:	046d      	lsls	r5, r5, #17
 800bd44:	9b00      	ldr	r3, [sp, #0]
 800bd46:	4293      	cmp	r3, r2
 800bd48:	dd00      	ble.n	800bd4c <__kernel_rem_pio2+0x194>
 800bd4a:	e098      	b.n	800be7e <__kernel_rem_pio2+0x2c6>
 800bd4c:	9b02      	ldr	r3, [sp, #8]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	dd05      	ble.n	800bd5e <__kernel_rem_pio2+0x1a6>
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d100      	bne.n	800bd58 <__kernel_rem_pio2+0x1a0>
 800bd56:	e0a4      	b.n	800bea2 <__kernel_rem_pio2+0x2ea>
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d100      	bne.n	800bd5e <__kernel_rem_pio2+0x1a6>
 800bd5c:	e0ab      	b.n	800beb6 <__kernel_rem_pio2+0x2fe>
 800bd5e:	9b06      	ldr	r3, [sp, #24]
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d14f      	bne.n	800be04 <__kernel_rem_pio2+0x24c>
 800bd64:	0032      	movs	r2, r6
 800bd66:	003b      	movs	r3, r7
 800bd68:	2000      	movs	r0, #0
 800bd6a:	495e      	ldr	r1, [pc, #376]	@ (800bee4 <__kernel_rem_pio2+0x32c>)
 800bd6c:	f7f6 fec6 	bl	8002afc <__aeabi_dsub>
 800bd70:	0006      	movs	r6, r0
 800bd72:	000f      	movs	r7, r1
 800bd74:	2c00      	cmp	r4, #0
 800bd76:	d045      	beq.n	800be04 <__kernel_rem_pio2+0x24c>
 800bd78:	9a02      	ldr	r2, [sp, #8]
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	4959      	ldr	r1, [pc, #356]	@ (800bee4 <__kernel_rem_pio2+0x32c>)
 800bd7e:	f000 fa6f 	bl	800c260 <scalbn>
 800bd82:	0002      	movs	r2, r0
 800bd84:	000b      	movs	r3, r1
 800bd86:	0030      	movs	r0, r6
 800bd88:	0039      	movs	r1, r7
 800bd8a:	f7f6 feb7 	bl	8002afc <__aeabi_dsub>
 800bd8e:	0006      	movs	r6, r0
 800bd90:	000f      	movs	r7, r1
 800bd92:	e037      	b.n	800be04 <__kernel_rem_pio2+0x24c>
 800bd94:	2200      	movs	r2, #0
 800bd96:	4b54      	ldr	r3, [pc, #336]	@ (800bee8 <__kernel_rem_pio2+0x330>)
 800bd98:	0030      	movs	r0, r6
 800bd9a:	0039      	movs	r1, r7
 800bd9c:	f7f6 fbc8 	bl	8002530 <__aeabi_dmul>
 800bda0:	f7f7 fad8 	bl	8003354 <__aeabi_d2iz>
 800bda4:	f7f7 fb12 	bl	80033cc <__aeabi_i2d>
 800bda8:	2200      	movs	r2, #0
 800bdaa:	4b50      	ldr	r3, [pc, #320]	@ (800beec <__kernel_rem_pio2+0x334>)
 800bdac:	9006      	str	r0, [sp, #24]
 800bdae:	9107      	str	r1, [sp, #28]
 800bdb0:	f7f6 fbbe 	bl	8002530 <__aeabi_dmul>
 800bdb4:	0002      	movs	r2, r0
 800bdb6:	000b      	movs	r3, r1
 800bdb8:	0030      	movs	r0, r6
 800bdba:	0039      	movs	r1, r7
 800bdbc:	f7f6 fe9e 	bl	8002afc <__aeabi_dsub>
 800bdc0:	f7f7 fac8 	bl	8003354 <__aeabi_d2iz>
 800bdc4:	3c01      	subs	r4, #1
 800bdc6:	aa76      	add	r2, sp, #472	@ 0x1d8
 800bdc8:	00e3      	lsls	r3, r4, #3
 800bdca:	18d3      	adds	r3, r2, r3
 800bdcc:	c501      	stmia	r5!, {r0}
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	9806      	ldr	r0, [sp, #24]
 800bdd4:	9907      	ldr	r1, [sp, #28]
 800bdd6:	f7f5 fbab 	bl	8001530 <__aeabi_dadd>
 800bdda:	0006      	movs	r6, r0
 800bddc:	000f      	movs	r7, r1
 800bdde:	e763      	b.n	800bca8 <__kernel_rem_pio2+0xf0>
 800bde0:	9b02      	ldr	r3, [sp, #8]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d107      	bne.n	800bdf6 <__kernel_rem_pio2+0x23e>
 800bde6:	9b00      	ldr	r3, [sp, #0]
 800bde8:	aa12      	add	r2, sp, #72	@ 0x48
 800bdea:	3b01      	subs	r3, #1
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	589b      	ldr	r3, [r3, r2]
 800bdf0:	15db      	asrs	r3, r3, #23
 800bdf2:	9306      	str	r3, [sp, #24]
 800bdf4:	e79a      	b.n	800bd2c <__kernel_rem_pio2+0x174>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	4b3d      	ldr	r3, [pc, #244]	@ (800bef0 <__kernel_rem_pio2+0x338>)
 800bdfa:	f7f4 fb49 	bl	8000490 <__aeabi_dcmpge>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d13a      	bne.n	800be78 <__kernel_rem_pio2+0x2c0>
 800be02:	9006      	str	r0, [sp, #24]
 800be04:	2200      	movs	r2, #0
 800be06:	2300      	movs	r3, #0
 800be08:	0030      	movs	r0, r6
 800be0a:	0039      	movs	r1, r7
 800be0c:	f7f4 fb1c 	bl	8000448 <__aeabi_dcmpeq>
 800be10:	2800      	cmp	r0, #0
 800be12:	d100      	bne.n	800be16 <__kernel_rem_pio2+0x25e>
 800be14:	e0b5      	b.n	800bf82 <__kernel_rem_pio2+0x3ca>
 800be16:	2200      	movs	r2, #0
 800be18:	9b00      	ldr	r3, [sp, #0]
 800be1a:	3b01      	subs	r3, #1
 800be1c:	9908      	ldr	r1, [sp, #32]
 800be1e:	428b      	cmp	r3, r1
 800be20:	da51      	bge.n	800bec6 <__kernel_rem_pio2+0x30e>
 800be22:	2a00      	cmp	r2, #0
 800be24:	d100      	bne.n	800be28 <__kernel_rem_pio2+0x270>
 800be26:	e096      	b.n	800bf56 <__kernel_rem_pio2+0x39e>
 800be28:	9b00      	ldr	r3, [sp, #0]
 800be2a:	aa12      	add	r2, sp, #72	@ 0x48
 800be2c:	3b01      	subs	r3, #1
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	9b02      	ldr	r3, [sp, #8]
 800be32:	3b18      	subs	r3, #24
 800be34:	9302      	str	r3, [sp, #8]
 800be36:	9b00      	ldr	r3, [sp, #0]
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	589b      	ldr	r3, [r3, r2]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d0f3      	beq.n	800be28 <__kernel_rem_pio2+0x270>
 800be40:	2000      	movs	r0, #0
 800be42:	9a02      	ldr	r2, [sp, #8]
 800be44:	4927      	ldr	r1, [pc, #156]	@ (800bee4 <__kernel_rem_pio2+0x32c>)
 800be46:	f000 fa0b 	bl	800c260 <scalbn>
 800be4a:	0004      	movs	r4, r0
 800be4c:	000d      	movs	r5, r1
 800be4e:	9e00      	ldr	r6, [sp, #0]
 800be50:	2e00      	cmp	r6, #0
 800be52:	db00      	blt.n	800be56 <__kernel_rem_pio2+0x29e>
 800be54:	e0d2      	b.n	800bffc <__kernel_rem_pio2+0x444>
 800be56:	4b27      	ldr	r3, [pc, #156]	@ (800bef4 <__kernel_rem_pio2+0x33c>)
 800be58:	9c00      	ldr	r4, [sp, #0]
 800be5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800be5c:	2c00      	cmp	r4, #0
 800be5e:	da00      	bge.n	800be62 <__kernel_rem_pio2+0x2aa>
 800be60:	e103      	b.n	800c06a <__kernel_rem_pio2+0x4b2>
 800be62:	00e3      	lsls	r3, r4, #3
 800be64:	aa76      	add	r2, sp, #472	@ 0x1d8
 800be66:	189f      	adds	r7, r3, r2
 800be68:	2300      	movs	r3, #0
 800be6a:	2200      	movs	r2, #0
 800be6c:	9202      	str	r2, [sp, #8]
 800be6e:	9303      	str	r3, [sp, #12]
 800be70:	9b00      	ldr	r3, [sp, #0]
 800be72:	2500      	movs	r5, #0
 800be74:	1b1e      	subs	r6, r3, r4
 800be76:	e0ea      	b.n	800c04e <__kernel_rem_pio2+0x496>
 800be78:	2302      	movs	r3, #2
 800be7a:	9306      	str	r3, [sp, #24]
 800be7c:	e759      	b.n	800bd32 <__kernel_rem_pio2+0x17a>
 800be7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2c00      	cmp	r4, #0
 800be84:	d10b      	bne.n	800be9e <__kernel_rem_pio2+0x2e6>
 800be86:	2b00      	cmp	r3, #0
 800be88:	d003      	beq.n	800be92 <__kernel_rem_pio2+0x2da>
 800be8a:	1aeb      	subs	r3, r5, r3
 800be8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be8e:	6023      	str	r3, [r4, #0]
 800be90:	000b      	movs	r3, r1
 800be92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be94:	3201      	adds	r2, #1
 800be96:	3404      	adds	r4, #4
 800be98:	940a      	str	r4, [sp, #40]	@ 0x28
 800be9a:	001c      	movs	r4, r3
 800be9c:	e752      	b.n	800bd44 <__kernel_rem_pio2+0x18c>
 800be9e:	1ac3      	subs	r3, r0, r3
 800bea0:	e7f4      	b.n	800be8c <__kernel_rem_pio2+0x2d4>
 800bea2:	9b00      	ldr	r3, [sp, #0]
 800bea4:	aa12      	add	r2, sp, #72	@ 0x48
 800bea6:	3b01      	subs	r3, #1
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	589a      	ldr	r2, [r3, r2]
 800beac:	0252      	lsls	r2, r2, #9
 800beae:	0a52      	lsrs	r2, r2, #9
 800beb0:	a912      	add	r1, sp, #72	@ 0x48
 800beb2:	505a      	str	r2, [r3, r1]
 800beb4:	e753      	b.n	800bd5e <__kernel_rem_pio2+0x1a6>
 800beb6:	9b00      	ldr	r3, [sp, #0]
 800beb8:	aa12      	add	r2, sp, #72	@ 0x48
 800beba:	3b01      	subs	r3, #1
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	589a      	ldr	r2, [r3, r2]
 800bec0:	0292      	lsls	r2, r2, #10
 800bec2:	0a92      	lsrs	r2, r2, #10
 800bec4:	e7f4      	b.n	800beb0 <__kernel_rem_pio2+0x2f8>
 800bec6:	0099      	lsls	r1, r3, #2
 800bec8:	a812      	add	r0, sp, #72	@ 0x48
 800beca:	5809      	ldr	r1, [r1, r0]
 800becc:	3b01      	subs	r3, #1
 800bece:	430a      	orrs	r2, r1
 800bed0:	e7a4      	b.n	800be1c <__kernel_rem_pio2+0x264>
 800bed2:	46c0      	nop			@ (mov r8, r8)
 800bed4:	fffffd84 	.word	0xfffffd84
 800bed8:	0800d3d0 	.word	0x0800d3d0
 800bedc:	40200000 	.word	0x40200000
 800bee0:	00ffffff 	.word	0x00ffffff
 800bee4:	3ff00000 	.word	0x3ff00000
 800bee8:	3e700000 	.word	0x3e700000
 800beec:	41700000 	.word	0x41700000
 800bef0:	3fe00000 	.word	0x3fe00000
 800bef4:	0800d390 	.word	0x0800d390
 800bef8:	3301      	adds	r3, #1
 800befa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800befc:	009a      	lsls	r2, r3, #2
 800befe:	4252      	negs	r2, r2
 800bf00:	588a      	ldr	r2, [r1, r2]
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	d0f8      	beq.n	800bef8 <__kernel_rem_pio2+0x340>
 800bf06:	9a00      	ldr	r2, [sp, #0]
 800bf08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bf0a:	1c55      	adds	r5, r2, #1
 800bf0c:	1852      	adds	r2, r2, r1
 800bf0e:	00d2      	lsls	r2, r2, #3
 800bf10:	a926      	add	r1, sp, #152	@ 0x98
 800bf12:	188c      	adds	r4, r1, r2
 800bf14:	9a00      	ldr	r2, [sp, #0]
 800bf16:	18d3      	adds	r3, r2, r3
 800bf18:	9306      	str	r3, [sp, #24]
 800bf1a:	9b06      	ldr	r3, [sp, #24]
 800bf1c:	42ab      	cmp	r3, r5
 800bf1e:	da00      	bge.n	800bf22 <__kernel_rem_pio2+0x36a>
 800bf20:	e6b7      	b.n	800bc92 <__kernel_rem_pio2+0xda>
 800bf22:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bf24:	00ab      	lsls	r3, r5, #2
 800bf26:	58d0      	ldr	r0, [r2, r3]
 800bf28:	f7f7 fa50 	bl	80033cc <__aeabi_i2d>
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	2300      	movs	r3, #0
 800bf30:	0027      	movs	r7, r4
 800bf32:	2600      	movs	r6, #0
 800bf34:	6020      	str	r0, [r4, #0]
 800bf36:	6061      	str	r1, [r4, #4]
 800bf38:	9200      	str	r2, [sp, #0]
 800bf3a:	9301      	str	r3, [sp, #4]
 800bf3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf3e:	429e      	cmp	r6, r3
 800bf40:	dd0b      	ble.n	800bf5a <__kernel_rem_pio2+0x3a2>
 800bf42:	00eb      	lsls	r3, r5, #3
 800bf44:	aa76      	add	r2, sp, #472	@ 0x1d8
 800bf46:	18d3      	adds	r3, r2, r3
 800bf48:	3501      	adds	r5, #1
 800bf4a:	9900      	ldr	r1, [sp, #0]
 800bf4c:	9a01      	ldr	r2, [sp, #4]
 800bf4e:	3408      	adds	r4, #8
 800bf50:	6019      	str	r1, [r3, #0]
 800bf52:	605a      	str	r2, [r3, #4]
 800bf54:	e7e1      	b.n	800bf1a <__kernel_rem_pio2+0x362>
 800bf56:	2301      	movs	r3, #1
 800bf58:	e7cf      	b.n	800befa <__kernel_rem_pio2+0x342>
 800bf5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf5c:	00f1      	lsls	r1, r6, #3
 800bf5e:	1859      	adds	r1, r3, r1
 800bf60:	6808      	ldr	r0, [r1, #0]
 800bf62:	6849      	ldr	r1, [r1, #4]
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f7f6 fae2 	bl	8002530 <__aeabi_dmul>
 800bf6c:	0002      	movs	r2, r0
 800bf6e:	000b      	movs	r3, r1
 800bf70:	9800      	ldr	r0, [sp, #0]
 800bf72:	9901      	ldr	r1, [sp, #4]
 800bf74:	f7f5 fadc 	bl	8001530 <__aeabi_dadd>
 800bf78:	3601      	adds	r6, #1
 800bf7a:	9000      	str	r0, [sp, #0]
 800bf7c:	9101      	str	r1, [sp, #4]
 800bf7e:	3f08      	subs	r7, #8
 800bf80:	e7dc      	b.n	800bf3c <__kernel_rem_pio2+0x384>
 800bf82:	9b02      	ldr	r3, [sp, #8]
 800bf84:	0030      	movs	r0, r6
 800bf86:	425a      	negs	r2, r3
 800bf88:	0039      	movs	r1, r7
 800bf8a:	f000 f969 	bl	800c260 <scalbn>
 800bf8e:	2200      	movs	r2, #0
 800bf90:	4bb1      	ldr	r3, [pc, #708]	@ (800c258 <__kernel_rem_pio2+0x6a0>)
 800bf92:	0006      	movs	r6, r0
 800bf94:	000f      	movs	r7, r1
 800bf96:	f7f4 fa7b 	bl	8000490 <__aeabi_dcmpge>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d025      	beq.n	800bfea <__kernel_rem_pio2+0x432>
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	4bae      	ldr	r3, [pc, #696]	@ (800c25c <__kernel_rem_pio2+0x6a4>)
 800bfa2:	0030      	movs	r0, r6
 800bfa4:	0039      	movs	r1, r7
 800bfa6:	f7f6 fac3 	bl	8002530 <__aeabi_dmul>
 800bfaa:	f7f7 f9d3 	bl	8003354 <__aeabi_d2iz>
 800bfae:	9b00      	ldr	r3, [sp, #0]
 800bfb0:	0004      	movs	r4, r0
 800bfb2:	009d      	lsls	r5, r3, #2
 800bfb4:	f7f7 fa0a 	bl	80033cc <__aeabi_i2d>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	4ba7      	ldr	r3, [pc, #668]	@ (800c258 <__kernel_rem_pio2+0x6a0>)
 800bfbc:	f7f6 fab8 	bl	8002530 <__aeabi_dmul>
 800bfc0:	0002      	movs	r2, r0
 800bfc2:	000b      	movs	r3, r1
 800bfc4:	0030      	movs	r0, r6
 800bfc6:	0039      	movs	r1, r7
 800bfc8:	f7f6 fd98 	bl	8002afc <__aeabi_dsub>
 800bfcc:	f7f7 f9c2 	bl	8003354 <__aeabi_d2iz>
 800bfd0:	ab12      	add	r3, sp, #72	@ 0x48
 800bfd2:	5158      	str	r0, [r3, r5]
 800bfd4:	9b00      	ldr	r3, [sp, #0]
 800bfd6:	aa12      	add	r2, sp, #72	@ 0x48
 800bfd8:	3301      	adds	r3, #1
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	9b02      	ldr	r3, [sp, #8]
 800bfde:	3318      	adds	r3, #24
 800bfe0:	9302      	str	r3, [sp, #8]
 800bfe2:	9b00      	ldr	r3, [sp, #0]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	509c      	str	r4, [r3, r2]
 800bfe8:	e72a      	b.n	800be40 <__kernel_rem_pio2+0x288>
 800bfea:	9b00      	ldr	r3, [sp, #0]
 800bfec:	0030      	movs	r0, r6
 800bfee:	0039      	movs	r1, r7
 800bff0:	009c      	lsls	r4, r3, #2
 800bff2:	f7f7 f9af 	bl	8003354 <__aeabi_d2iz>
 800bff6:	ab12      	add	r3, sp, #72	@ 0x48
 800bff8:	5118      	str	r0, [r3, r4]
 800bffa:	e721      	b.n	800be40 <__kernel_rem_pio2+0x288>
 800bffc:	00f3      	lsls	r3, r6, #3
 800bffe:	aa76      	add	r2, sp, #472	@ 0x1d8
 800c000:	18d7      	adds	r7, r2, r3
 800c002:	00b3      	lsls	r3, r6, #2
 800c004:	aa12      	add	r2, sp, #72	@ 0x48
 800c006:	5898      	ldr	r0, [r3, r2]
 800c008:	f7f7 f9e0 	bl	80033cc <__aeabi_i2d>
 800c00c:	0022      	movs	r2, r4
 800c00e:	002b      	movs	r3, r5
 800c010:	f7f6 fa8e 	bl	8002530 <__aeabi_dmul>
 800c014:	2200      	movs	r2, #0
 800c016:	6038      	str	r0, [r7, #0]
 800c018:	6079      	str	r1, [r7, #4]
 800c01a:	4b90      	ldr	r3, [pc, #576]	@ (800c25c <__kernel_rem_pio2+0x6a4>)
 800c01c:	0020      	movs	r0, r4
 800c01e:	0029      	movs	r1, r5
 800c020:	f7f6 fa86 	bl	8002530 <__aeabi_dmul>
 800c024:	3e01      	subs	r6, #1
 800c026:	0004      	movs	r4, r0
 800c028:	000d      	movs	r5, r1
 800c02a:	e711      	b.n	800be50 <__kernel_rem_pio2+0x298>
 800c02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c02e:	00e9      	lsls	r1, r5, #3
 800c030:	18c9      	adds	r1, r1, r3
 800c032:	6808      	ldr	r0, [r1, #0]
 800c034:	6849      	ldr	r1, [r1, #4]
 800c036:	cf0c      	ldmia	r7!, {r2, r3}
 800c038:	f7f6 fa7a 	bl	8002530 <__aeabi_dmul>
 800c03c:	0002      	movs	r2, r0
 800c03e:	000b      	movs	r3, r1
 800c040:	9802      	ldr	r0, [sp, #8]
 800c042:	9903      	ldr	r1, [sp, #12]
 800c044:	f7f5 fa74 	bl	8001530 <__aeabi_dadd>
 800c048:	9002      	str	r0, [sp, #8]
 800c04a:	9103      	str	r1, [sp, #12]
 800c04c:	3501      	adds	r5, #1
 800c04e:	9b08      	ldr	r3, [sp, #32]
 800c050:	429d      	cmp	r5, r3
 800c052:	dc01      	bgt.n	800c058 <__kernel_rem_pio2+0x4a0>
 800c054:	42b5      	cmp	r5, r6
 800c056:	dde9      	ble.n	800c02c <__kernel_rem_pio2+0x474>
 800c058:	00f6      	lsls	r6, r6, #3
 800c05a:	ab4e      	add	r3, sp, #312	@ 0x138
 800c05c:	199b      	adds	r3, r3, r6
 800c05e:	9902      	ldr	r1, [sp, #8]
 800c060:	9a03      	ldr	r2, [sp, #12]
 800c062:	3c01      	subs	r4, #1
 800c064:	6019      	str	r1, [r3, #0]
 800c066:	605a      	str	r2, [r3, #4]
 800c068:	e6f8      	b.n	800be5c <__kernel_rem_pio2+0x2a4>
 800c06a:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	dc0b      	bgt.n	800c088 <__kernel_rem_pio2+0x4d0>
 800c070:	2b00      	cmp	r3, #0
 800c072:	dd00      	ble.n	800c076 <__kernel_rem_pio2+0x4be>
 800c074:	e084      	b.n	800c180 <__kernel_rem_pio2+0x5c8>
 800c076:	d052      	beq.n	800c11e <__kernel_rem_pio2+0x566>
 800c078:	2007      	movs	r0, #7
 800c07a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c07c:	4003      	ands	r3, r0
 800c07e:	0018      	movs	r0, r3
 800c080:	239f      	movs	r3, #159	@ 0x9f
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	449d      	add	sp, r3
 800c086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c088:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d1f4      	bne.n	800c078 <__kernel_rem_pio2+0x4c0>
 800c08e:	9b00      	ldr	r3, [sp, #0]
 800c090:	aa4e      	add	r2, sp, #312	@ 0x138
 800c092:	00db      	lsls	r3, r3, #3
 800c094:	18d4      	adds	r4, r2, r3
 800c096:	0025      	movs	r5, r4
 800c098:	9b00      	ldr	r3, [sp, #0]
 800c09a:	9302      	str	r3, [sp, #8]
 800c09c:	9b02      	ldr	r3, [sp, #8]
 800c09e:	3d08      	subs	r5, #8
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	dd00      	ble.n	800c0a6 <__kernel_rem_pio2+0x4ee>
 800c0a4:	e07a      	b.n	800c19c <__kernel_rem_pio2+0x5e4>
 800c0a6:	9d00      	ldr	r5, [sp, #0]
 800c0a8:	3c08      	subs	r4, #8
 800c0aa:	2d01      	cmp	r5, #1
 800c0ac:	dd00      	ble.n	800c0b0 <__kernel_rem_pio2+0x4f8>
 800c0ae:	e095      	b.n	800c1dc <__kernel_rem_pio2+0x624>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	9b00      	ldr	r3, [sp, #0]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	dd00      	ble.n	800c0bc <__kernel_rem_pio2+0x504>
 800c0ba:	e0ad      	b.n	800c218 <__kernel_rem_pio2+0x660>
 800c0bc:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800c0be:	9c51      	ldr	r4, [sp, #324]	@ 0x144
 800c0c0:	9d4e      	ldr	r5, [sp, #312]	@ 0x138
 800c0c2:	9e4f      	ldr	r6, [sp, #316]	@ 0x13c
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	9401      	str	r4, [sp, #4]
 800c0c8:	9b06      	ldr	r3, [sp, #24]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d000      	beq.n	800c0d0 <__kernel_rem_pio2+0x518>
 800c0ce:	e0af      	b.n	800c230 <__kernel_rem_pio2+0x678>
 800c0d0:	9b05      	ldr	r3, [sp, #20]
 800c0d2:	601d      	str	r5, [r3, #0]
 800c0d4:	605e      	str	r6, [r3, #4]
 800c0d6:	9c00      	ldr	r4, [sp, #0]
 800c0d8:	9d01      	ldr	r5, [sp, #4]
 800c0da:	6118      	str	r0, [r3, #16]
 800c0dc:	6159      	str	r1, [r3, #20]
 800c0de:	609c      	str	r4, [r3, #8]
 800c0e0:	60dd      	str	r5, [r3, #12]
 800c0e2:	e7c9      	b.n	800c078 <__kernel_rem_pio2+0x4c0>
 800c0e4:	9b00      	ldr	r3, [sp, #0]
 800c0e6:	aa4e      	add	r2, sp, #312	@ 0x138
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	18d3      	adds	r3, r2, r3
 800c0ec:	0020      	movs	r0, r4
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	0029      	movs	r1, r5
 800c0f4:	f7f5 fa1c 	bl	8001530 <__aeabi_dadd>
 800c0f8:	0004      	movs	r4, r0
 800c0fa:	000d      	movs	r5, r1
 800c0fc:	9b00      	ldr	r3, [sp, #0]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	9300      	str	r3, [sp, #0]
 800c102:	9b00      	ldr	r3, [sp, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	daed      	bge.n	800c0e4 <__kernel_rem_pio2+0x52c>
 800c108:	9b06      	ldr	r3, [sp, #24]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d003      	beq.n	800c116 <__kernel_rem_pio2+0x55e>
 800c10e:	2180      	movs	r1, #128	@ 0x80
 800c110:	0609      	lsls	r1, r1, #24
 800c112:	186b      	adds	r3, r5, r1
 800c114:	001d      	movs	r5, r3
 800c116:	9b05      	ldr	r3, [sp, #20]
 800c118:	601c      	str	r4, [r3, #0]
 800c11a:	605d      	str	r5, [r3, #4]
 800c11c:	e7ac      	b.n	800c078 <__kernel_rem_pio2+0x4c0>
 800c11e:	2400      	movs	r4, #0
 800c120:	2500      	movs	r5, #0
 800c122:	e7ee      	b.n	800c102 <__kernel_rem_pio2+0x54a>
 800c124:	00e3      	lsls	r3, r4, #3
 800c126:	aa4e      	add	r2, sp, #312	@ 0x138
 800c128:	18d3      	adds	r3, r2, r3
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	f7f5 f9ff 	bl	8001530 <__aeabi_dadd>
 800c132:	3c01      	subs	r4, #1
 800c134:	2c00      	cmp	r4, #0
 800c136:	daf5      	bge.n	800c124 <__kernel_rem_pio2+0x56c>
 800c138:	9c06      	ldr	r4, [sp, #24]
 800c13a:	0002      	movs	r2, r0
 800c13c:	000b      	movs	r3, r1
 800c13e:	2c00      	cmp	r4, #0
 800c140:	d002      	beq.n	800c148 <__kernel_rem_pio2+0x590>
 800c142:	2480      	movs	r4, #128	@ 0x80
 800c144:	0624      	lsls	r4, r4, #24
 800c146:	190b      	adds	r3, r1, r4
 800c148:	9c05      	ldr	r4, [sp, #20]
 800c14a:	2501      	movs	r5, #1
 800c14c:	6022      	str	r2, [r4, #0]
 800c14e:	6063      	str	r3, [r4, #4]
 800c150:	0002      	movs	r2, r0
 800c152:	000b      	movs	r3, r1
 800c154:	984e      	ldr	r0, [sp, #312]	@ 0x138
 800c156:	994f      	ldr	r1, [sp, #316]	@ 0x13c
 800c158:	f7f6 fcd0 	bl	8002afc <__aeabi_dsub>
 800c15c:	0006      	movs	r6, r0
 800c15e:	000f      	movs	r7, r1
 800c160:	ac4e      	add	r4, sp, #312	@ 0x138
 800c162:	9b00      	ldr	r3, [sp, #0]
 800c164:	3408      	adds	r4, #8
 800c166:	42ab      	cmp	r3, r5
 800c168:	da0e      	bge.n	800c188 <__kernel_rem_pio2+0x5d0>
 800c16a:	9b06      	ldr	r3, [sp, #24]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d003      	beq.n	800c178 <__kernel_rem_pio2+0x5c0>
 800c170:	2180      	movs	r1, #128	@ 0x80
 800c172:	0609      	lsls	r1, r1, #24
 800c174:	187b      	adds	r3, r7, r1
 800c176:	001f      	movs	r7, r3
 800c178:	9b05      	ldr	r3, [sp, #20]
 800c17a:	609e      	str	r6, [r3, #8]
 800c17c:	60df      	str	r7, [r3, #12]
 800c17e:	e77b      	b.n	800c078 <__kernel_rem_pio2+0x4c0>
 800c180:	2000      	movs	r0, #0
 800c182:	2100      	movs	r1, #0
 800c184:	9c00      	ldr	r4, [sp, #0]
 800c186:	e7d5      	b.n	800c134 <__kernel_rem_pio2+0x57c>
 800c188:	0030      	movs	r0, r6
 800c18a:	6822      	ldr	r2, [r4, #0]
 800c18c:	6863      	ldr	r3, [r4, #4]
 800c18e:	0039      	movs	r1, r7
 800c190:	f7f5 f9ce 	bl	8001530 <__aeabi_dadd>
 800c194:	3501      	adds	r5, #1
 800c196:	0006      	movs	r6, r0
 800c198:	000f      	movs	r7, r1
 800c19a:	e7e2      	b.n	800c162 <__kernel_rem_pio2+0x5aa>
 800c19c:	9b02      	ldr	r3, [sp, #8]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	9302      	str	r3, [sp, #8]
 800c1a2:	682a      	ldr	r2, [r5, #0]
 800c1a4:	686b      	ldr	r3, [r5, #4]
 800c1a6:	9208      	str	r2, [sp, #32]
 800c1a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1aa:	9808      	ldr	r0, [sp, #32]
 800c1ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1ae:	68aa      	ldr	r2, [r5, #8]
 800c1b0:	68eb      	ldr	r3, [r5, #12]
 800c1b2:	920a      	str	r2, [sp, #40]	@ 0x28
 800c1b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1b6:	f7f5 f9bb 	bl	8001530 <__aeabi_dadd>
 800c1ba:	0002      	movs	r2, r0
 800c1bc:	000b      	movs	r3, r1
 800c1be:	0006      	movs	r6, r0
 800c1c0:	000f      	movs	r7, r1
 800c1c2:	9808      	ldr	r0, [sp, #32]
 800c1c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1c6:	f7f6 fc99 	bl	8002afc <__aeabi_dsub>
 800c1ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c1cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1ce:	f7f5 f9af 	bl	8001530 <__aeabi_dadd>
 800c1d2:	602e      	str	r6, [r5, #0]
 800c1d4:	606f      	str	r7, [r5, #4]
 800c1d6:	60a8      	str	r0, [r5, #8]
 800c1d8:	60e9      	str	r1, [r5, #12]
 800c1da:	e75f      	b.n	800c09c <__kernel_rem_pio2+0x4e4>
 800c1dc:	6822      	ldr	r2, [r4, #0]
 800c1de:	6863      	ldr	r3, [r4, #4]
 800c1e0:	9202      	str	r2, [sp, #8]
 800c1e2:	9303      	str	r3, [sp, #12]
 800c1e4:	9802      	ldr	r0, [sp, #8]
 800c1e6:	9903      	ldr	r1, [sp, #12]
 800c1e8:	68a2      	ldr	r2, [r4, #8]
 800c1ea:	68e3      	ldr	r3, [r4, #12]
 800c1ec:	9208      	str	r2, [sp, #32]
 800c1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1f0:	f7f5 f99e 	bl	8001530 <__aeabi_dadd>
 800c1f4:	0002      	movs	r2, r0
 800c1f6:	000b      	movs	r3, r1
 800c1f8:	0006      	movs	r6, r0
 800c1fa:	000f      	movs	r7, r1
 800c1fc:	9802      	ldr	r0, [sp, #8]
 800c1fe:	9903      	ldr	r1, [sp, #12]
 800c200:	f7f6 fc7c 	bl	8002afc <__aeabi_dsub>
 800c204:	9a08      	ldr	r2, [sp, #32]
 800c206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c208:	f7f5 f992 	bl	8001530 <__aeabi_dadd>
 800c20c:	3d01      	subs	r5, #1
 800c20e:	60a0      	str	r0, [r4, #8]
 800c210:	60e1      	str	r1, [r4, #12]
 800c212:	6026      	str	r6, [r4, #0]
 800c214:	6067      	str	r7, [r4, #4]
 800c216:	e747      	b.n	800c0a8 <__kernel_rem_pio2+0x4f0>
 800c218:	9b00      	ldr	r3, [sp, #0]
 800c21a:	aa4e      	add	r2, sp, #312	@ 0x138
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	18d3      	adds	r3, r2, r3
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	f7f5 f984 	bl	8001530 <__aeabi_dadd>
 800c228:	9b00      	ldr	r3, [sp, #0]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	e741      	b.n	800c0b4 <__kernel_rem_pio2+0x4fc>
 800c230:	9b05      	ldr	r3, [sp, #20]
 800c232:	9a05      	ldr	r2, [sp, #20]
 800c234:	601d      	str	r5, [r3, #0]
 800c236:	2380      	movs	r3, #128	@ 0x80
 800c238:	061b      	lsls	r3, r3, #24
 800c23a:	18f4      	adds	r4, r6, r3
 800c23c:	6054      	str	r4, [r2, #4]
 800c23e:	9a00      	ldr	r2, [sp, #0]
 800c240:	9c05      	ldr	r4, [sp, #20]
 800c242:	60a2      	str	r2, [r4, #8]
 800c244:	001a      	movs	r2, r3
 800c246:	9c01      	ldr	r4, [sp, #4]
 800c248:	18e3      	adds	r3, r4, r3
 800c24a:	9c05      	ldr	r4, [sp, #20]
 800c24c:	60e3      	str	r3, [r4, #12]
 800c24e:	188b      	adds	r3, r1, r2
 800c250:	6120      	str	r0, [r4, #16]
 800c252:	6163      	str	r3, [r4, #20]
 800c254:	e710      	b.n	800c078 <__kernel_rem_pio2+0x4c0>
 800c256:	46c0      	nop			@ (mov r8, r8)
 800c258:	41700000 	.word	0x41700000
 800c25c:	3e700000 	.word	0x3e700000

0800c260 <scalbn>:
 800c260:	004b      	lsls	r3, r1, #1
 800c262:	b570      	push	{r4, r5, r6, lr}
 800c264:	0d5b      	lsrs	r3, r3, #21
 800c266:	0014      	movs	r4, r2
 800c268:	000d      	movs	r5, r1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10f      	bne.n	800c28e <scalbn+0x2e>
 800c26e:	004b      	lsls	r3, r1, #1
 800c270:	085b      	lsrs	r3, r3, #1
 800c272:	4303      	orrs	r3, r0
 800c274:	d012      	beq.n	800c29c <scalbn+0x3c>
 800c276:	4b23      	ldr	r3, [pc, #140]	@ (800c304 <scalbn+0xa4>)
 800c278:	2200      	movs	r2, #0
 800c27a:	f7f6 f959 	bl	8002530 <__aeabi_dmul>
 800c27e:	4b22      	ldr	r3, [pc, #136]	@ (800c308 <scalbn+0xa8>)
 800c280:	429c      	cmp	r4, r3
 800c282:	da0c      	bge.n	800c29e <scalbn+0x3e>
 800c284:	4a21      	ldr	r2, [pc, #132]	@ (800c30c <scalbn+0xac>)
 800c286:	4b22      	ldr	r3, [pc, #136]	@ (800c310 <scalbn+0xb0>)
 800c288:	f7f6 f952 	bl	8002530 <__aeabi_dmul>
 800c28c:	e006      	b.n	800c29c <scalbn+0x3c>
 800c28e:	4a21      	ldr	r2, [pc, #132]	@ (800c314 <scalbn+0xb4>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d108      	bne.n	800c2a6 <scalbn+0x46>
 800c294:	0002      	movs	r2, r0
 800c296:	000b      	movs	r3, r1
 800c298:	f7f5 f94a 	bl	8001530 <__aeabi_dadd>
 800c29c:	bd70      	pop	{r4, r5, r6, pc}
 800c29e:	000d      	movs	r5, r1
 800c2a0:	004b      	lsls	r3, r1, #1
 800c2a2:	0d5b      	lsrs	r3, r3, #21
 800c2a4:	3b36      	subs	r3, #54	@ 0x36
 800c2a6:	4a1c      	ldr	r2, [pc, #112]	@ (800c318 <scalbn+0xb8>)
 800c2a8:	4294      	cmp	r4, r2
 800c2aa:	dd0a      	ble.n	800c2c2 <scalbn+0x62>
 800c2ac:	4c1b      	ldr	r4, [pc, #108]	@ (800c31c <scalbn+0xbc>)
 800c2ae:	4d1c      	ldr	r5, [pc, #112]	@ (800c320 <scalbn+0xc0>)
 800c2b0:	2900      	cmp	r1, #0
 800c2b2:	da01      	bge.n	800c2b8 <scalbn+0x58>
 800c2b4:	4c19      	ldr	r4, [pc, #100]	@ (800c31c <scalbn+0xbc>)
 800c2b6:	4d1b      	ldr	r5, [pc, #108]	@ (800c324 <scalbn+0xc4>)
 800c2b8:	4a18      	ldr	r2, [pc, #96]	@ (800c31c <scalbn+0xbc>)
 800c2ba:	4b19      	ldr	r3, [pc, #100]	@ (800c320 <scalbn+0xc0>)
 800c2bc:	0020      	movs	r0, r4
 800c2be:	0029      	movs	r1, r5
 800c2c0:	e7e2      	b.n	800c288 <scalbn+0x28>
 800c2c2:	18e2      	adds	r2, r4, r3
 800c2c4:	4b18      	ldr	r3, [pc, #96]	@ (800c328 <scalbn+0xc8>)
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	dcf0      	bgt.n	800c2ac <scalbn+0x4c>
 800c2ca:	2a00      	cmp	r2, #0
 800c2cc:	dd05      	ble.n	800c2da <scalbn+0x7a>
 800c2ce:	4b17      	ldr	r3, [pc, #92]	@ (800c32c <scalbn+0xcc>)
 800c2d0:	0512      	lsls	r2, r2, #20
 800c2d2:	402b      	ands	r3, r5
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	0019      	movs	r1, r3
 800c2d8:	e7e0      	b.n	800c29c <scalbn+0x3c>
 800c2da:	0013      	movs	r3, r2
 800c2dc:	3335      	adds	r3, #53	@ 0x35
 800c2de:	da08      	bge.n	800c2f2 <scalbn+0x92>
 800c2e0:	4c0a      	ldr	r4, [pc, #40]	@ (800c30c <scalbn+0xac>)
 800c2e2:	4d0b      	ldr	r5, [pc, #44]	@ (800c310 <scalbn+0xb0>)
 800c2e4:	2900      	cmp	r1, #0
 800c2e6:	da01      	bge.n	800c2ec <scalbn+0x8c>
 800c2e8:	4c08      	ldr	r4, [pc, #32]	@ (800c30c <scalbn+0xac>)
 800c2ea:	4d11      	ldr	r5, [pc, #68]	@ (800c330 <scalbn+0xd0>)
 800c2ec:	4a07      	ldr	r2, [pc, #28]	@ (800c30c <scalbn+0xac>)
 800c2ee:	4b08      	ldr	r3, [pc, #32]	@ (800c310 <scalbn+0xb0>)
 800c2f0:	e7e4      	b.n	800c2bc <scalbn+0x5c>
 800c2f2:	4b0e      	ldr	r3, [pc, #56]	@ (800c32c <scalbn+0xcc>)
 800c2f4:	3236      	adds	r2, #54	@ 0x36
 800c2f6:	401d      	ands	r5, r3
 800c2f8:	0512      	lsls	r2, r2, #20
 800c2fa:	432a      	orrs	r2, r5
 800c2fc:	0011      	movs	r1, r2
 800c2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c334 <scalbn+0xd4>)
 800c300:	2200      	movs	r2, #0
 800c302:	e7c1      	b.n	800c288 <scalbn+0x28>
 800c304:	43500000 	.word	0x43500000
 800c308:	ffff3cb0 	.word	0xffff3cb0
 800c30c:	c2f8f359 	.word	0xc2f8f359
 800c310:	01a56e1f 	.word	0x01a56e1f
 800c314:	000007ff 	.word	0x000007ff
 800c318:	0000c350 	.word	0x0000c350
 800c31c:	8800759c 	.word	0x8800759c
 800c320:	7e37e43c 	.word	0x7e37e43c
 800c324:	fe37e43c 	.word	0xfe37e43c
 800c328:	000007fe 	.word	0x000007fe
 800c32c:	800fffff 	.word	0x800fffff
 800c330:	81a56e1f 	.word	0x81a56e1f
 800c334:	3c900000 	.word	0x3c900000

0800c338 <floor>:
 800c338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c33a:	004b      	lsls	r3, r1, #1
 800c33c:	4a36      	ldr	r2, [pc, #216]	@ (800c418 <floor+0xe0>)
 800c33e:	0d5b      	lsrs	r3, r3, #21
 800c340:	189e      	adds	r6, r3, r2
 800c342:	000c      	movs	r4, r1
 800c344:	0005      	movs	r5, r0
 800c346:	9001      	str	r0, [sp, #4]
 800c348:	2e13      	cmp	r6, #19
 800c34a:	dc2f      	bgt.n	800c3ac <floor+0x74>
 800c34c:	2e00      	cmp	r6, #0
 800c34e:	da14      	bge.n	800c37a <floor+0x42>
 800c350:	4a32      	ldr	r2, [pc, #200]	@ (800c41c <floor+0xe4>)
 800c352:	4b33      	ldr	r3, [pc, #204]	@ (800c420 <floor+0xe8>)
 800c354:	f7f5 f8ec 	bl	8001530 <__aeabi_dadd>
 800c358:	2200      	movs	r2, #0
 800c35a:	2300      	movs	r3, #0
 800c35c:	f7f4 f88e 	bl	800047c <__aeabi_dcmpgt>
 800c360:	2800      	cmp	r0, #0
 800c362:	d007      	beq.n	800c374 <floor+0x3c>
 800c364:	2c00      	cmp	r4, #0
 800c366:	da50      	bge.n	800c40a <floor+0xd2>
 800c368:	0064      	lsls	r4, r4, #1
 800c36a:	0864      	lsrs	r4, r4, #1
 800c36c:	4325      	orrs	r5, r4
 800c36e:	d14f      	bne.n	800c410 <floor+0xd8>
 800c370:	2480      	movs	r4, #128	@ 0x80
 800c372:	0624      	lsls	r4, r4, #24
 800c374:	0021      	movs	r1, r4
 800c376:	0028      	movs	r0, r5
 800c378:	e022      	b.n	800c3c0 <floor+0x88>
 800c37a:	4f2a      	ldr	r7, [pc, #168]	@ (800c424 <floor+0xec>)
 800c37c:	4137      	asrs	r7, r6
 800c37e:	003b      	movs	r3, r7
 800c380:	400b      	ands	r3, r1
 800c382:	4303      	orrs	r3, r0
 800c384:	d01c      	beq.n	800c3c0 <floor+0x88>
 800c386:	4a25      	ldr	r2, [pc, #148]	@ (800c41c <floor+0xe4>)
 800c388:	4b25      	ldr	r3, [pc, #148]	@ (800c420 <floor+0xe8>)
 800c38a:	f7f5 f8d1 	bl	8001530 <__aeabi_dadd>
 800c38e:	2200      	movs	r2, #0
 800c390:	2300      	movs	r3, #0
 800c392:	f7f4 f873 	bl	800047c <__aeabi_dcmpgt>
 800c396:	2800      	cmp	r0, #0
 800c398:	d0ec      	beq.n	800c374 <floor+0x3c>
 800c39a:	2c00      	cmp	r4, #0
 800c39c:	da03      	bge.n	800c3a6 <floor+0x6e>
 800c39e:	2380      	movs	r3, #128	@ 0x80
 800c3a0:	035b      	lsls	r3, r3, #13
 800c3a2:	4133      	asrs	r3, r6
 800c3a4:	18e4      	adds	r4, r4, r3
 800c3a6:	2500      	movs	r5, #0
 800c3a8:	43bc      	bics	r4, r7
 800c3aa:	e7e3      	b.n	800c374 <floor+0x3c>
 800c3ac:	2e33      	cmp	r6, #51	@ 0x33
 800c3ae:	dd09      	ble.n	800c3c4 <floor+0x8c>
 800c3b0:	2380      	movs	r3, #128	@ 0x80
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	429e      	cmp	r6, r3
 800c3b6:	d103      	bne.n	800c3c0 <floor+0x88>
 800c3b8:	0002      	movs	r2, r0
 800c3ba:	000b      	movs	r3, r1
 800c3bc:	f7f5 f8b8 	bl	8001530 <__aeabi_dadd>
 800c3c0:	b003      	add	sp, #12
 800c3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3c4:	2701      	movs	r7, #1
 800c3c6:	4a18      	ldr	r2, [pc, #96]	@ (800c428 <floor+0xf0>)
 800c3c8:	427f      	negs	r7, r7
 800c3ca:	189b      	adds	r3, r3, r2
 800c3cc:	40df      	lsrs	r7, r3
 800c3ce:	4238      	tst	r0, r7
 800c3d0:	d0f6      	beq.n	800c3c0 <floor+0x88>
 800c3d2:	4a12      	ldr	r2, [pc, #72]	@ (800c41c <floor+0xe4>)
 800c3d4:	4b12      	ldr	r3, [pc, #72]	@ (800c420 <floor+0xe8>)
 800c3d6:	f7f5 f8ab 	bl	8001530 <__aeabi_dadd>
 800c3da:	2200      	movs	r2, #0
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f7f4 f84d 	bl	800047c <__aeabi_dcmpgt>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d0c6      	beq.n	800c374 <floor+0x3c>
 800c3e6:	2c00      	cmp	r4, #0
 800c3e8:	da02      	bge.n	800c3f0 <floor+0xb8>
 800c3ea:	2e14      	cmp	r6, #20
 800c3ec:	d102      	bne.n	800c3f4 <floor+0xbc>
 800c3ee:	3401      	adds	r4, #1
 800c3f0:	43bd      	bics	r5, r7
 800c3f2:	e7bf      	b.n	800c374 <floor+0x3c>
 800c3f4:	2234      	movs	r2, #52	@ 0x34
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	1b92      	subs	r2, r2, r6
 800c3fa:	4093      	lsls	r3, r2
 800c3fc:	18ed      	adds	r5, r5, r3
 800c3fe:	9b01      	ldr	r3, [sp, #4]
 800c400:	429d      	cmp	r5, r3
 800c402:	419b      	sbcs	r3, r3
 800c404:	425b      	negs	r3, r3
 800c406:	18e4      	adds	r4, r4, r3
 800c408:	e7f2      	b.n	800c3f0 <floor+0xb8>
 800c40a:	2500      	movs	r5, #0
 800c40c:	002c      	movs	r4, r5
 800c40e:	e7b1      	b.n	800c374 <floor+0x3c>
 800c410:	2500      	movs	r5, #0
 800c412:	4c06      	ldr	r4, [pc, #24]	@ (800c42c <floor+0xf4>)
 800c414:	e7ae      	b.n	800c374 <floor+0x3c>
 800c416:	46c0      	nop			@ (mov r8, r8)
 800c418:	fffffc01 	.word	0xfffffc01
 800c41c:	8800759c 	.word	0x8800759c
 800c420:	7e37e43c 	.word	0x7e37e43c
 800c424:	000fffff 	.word	0x000fffff
 800c428:	fffffbed 	.word	0xfffffbed
 800c42c:	bff00000 	.word	0xbff00000

0800c430 <_init>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	46c0      	nop			@ (mov r8, r8)
 800c434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c436:	bc08      	pop	{r3}
 800c438:	469e      	mov	lr, r3
 800c43a:	4770      	bx	lr

0800c43c <_fini>:
 800c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43e:	46c0      	nop			@ (mov r8, r8)
 800c440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c442:	bc08      	pop	{r3}
 800c444:	469e      	mov	lr, r3
 800c446:	4770      	bx	lr
